	TITLE	Z:\XashXTSRC\server\monsters\animation.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_04NHIK@?$CFs?3?3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JDJH@classname?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@PMO@targetname?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06CCPD@target?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@KILF@Bad?5ent?5in?5OFFSET?$CI?$CJ?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@BH@Bad?5pev?5in?5OFFSET?$CI?$CJ?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LPPN@ACT_RESET?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08ONOA@ACT_IDLE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09OPPC@ACT_GUARD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PMDL@ACT_WALK?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07IFOB@ACT_RUN?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07NJBD@ACT_FLY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08BHBM@ACT_SWIM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07GAAB@ACT_HOP?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08FPAD@ACT_LEAP?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08NJKN@ACT_FALL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08MAHE@ACT_LAND?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@KGJE@ACT_STRAFE_LEFT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@MBHD@ACT_STRAFE_RIGHT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@KHJF@ACT_ROLL_LEFT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@PNHC@ACT_ROLL_RIGHT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@CICP@ACT_TURN_LEFT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@EBPN@ACT_TURN_RIGHT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DEKF@ACT_CROUCH?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@FFOO@ACT_CROUCHIDLE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09MNDH@ACT_STAND?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07OHHO@ACT_USE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@MCGA@ACT_SIGNAL1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DNNJ@ACT_SIGNAL2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@JHEO@ACT_SIGNAL3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@CLIN@ACT_TWITCH?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09MKJB@ACT_COWER?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@MJFP@ACT_SMALL_FLINCH?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@DFJK@ACT_BIG_FLINCH?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@EBCE@ACT_RANGE_ATTACK1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@LOJN@ACT_RANGE_ATTACK2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@BHKF@ACT_MELEE_ATTACK1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@OIBM@ACT_MELEE_ATTACK2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DABN@ACT_RELOAD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07MMFM@ACT_ARM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MANE@ACT_DISARM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07ICAP@ACT_EAT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@LMAD@ACT_DIESIMPLE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@ONLF@ACT_DIEBACKWARD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@MBEH@ACT_DIEFORWARD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@CCI@ACT_DIEVIOLENT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@OMIO@ACT_BARNACLE_HIT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@CAB@ACT_BARNACLE_PULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@LC@ACT_BARNACLE_CHOMP?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@DCMK@ACT_BARNACLE_CHEW?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HHFL@ACT_SLEEP?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@HBKN@ACT_INSPECT_FLOOR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@NPC@ACT_INSPECT_WALL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@FPPM@ACT_IDLE_ANGRY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@PBCP@ACT_WALK_HURT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@MLHD@ACT_RUN_HURT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HJMC@ACT_HOVER?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JCGF@ACT_GLIDE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@OMAB@ACT_FLY_LEFT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@DMDJ@ACT_FLY_RIGHT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@MJAI@ACT_DETECT_SCENT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09IION@ACT_SNIFF?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PNIC@ACT_BITE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@NHBG@ACT_THREAT_DISPLAY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@GAPB@ACT_FEAR_DISPLAY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@LPIN@ACT_EXCITED?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@LKKK@ACT_SPECIAL_ATTACK1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@EFBD@ACT_SPECIAL_ATTACK2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@MCPA@ACT_COMBAT_IDLE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKFK@ACT_WALK_SCARED?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@FNPL@ACT_RUN_SCARED?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@OLLI@ACT_VICTORY_DANCE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@IJCK@ACT_DIE_HEADSHOT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@EHPG@ACT_DIE_CHESTSHOT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIOA@ACT_DIE_GUTSHOT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@KIMF@ACT_DIE_BACKSHOT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCMH@ACT_FLINCH_HEAD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@DJCH@ACT_FLINCH_CHEST?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GHME@ACT_FLINCH_STOMACH?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@HLFN@ACT_FLINCH_LEFTARM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@KFMB@ACT_FLINCH_RIGHTARM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@PLMO@ACT_FLINCH_LEFTLEG?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@CFFC@ACT_FLINCH_RIGHTLEG?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@KGMH@ACT_VM_NONE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@JFOP@ACT_VM_DEPLOY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@DMGM@ACT_VM_DEPLOY_EMPTY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@NLOH@ACT_VM_HOLSTER?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@FCKA@ACT_VM_HOLSTER_EMPTY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@NLBA@ACT_VM_IDLE1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@CEKJ@ACT_VM_IDLE2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@IODO@ACT_VM_IDLE3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@JDBF@ACT_VM_RANGE_ATTACK1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@GMKM@ACT_VM_RANGE_ATTACK2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@MGDL@ACT_VM_RANGE_ATTACK3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@MFJE@ACT_VM_MELEE_ATTACK1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@DKCN@ACT_VM_MELEE_ATTACK2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@JALK@ACT_VM_MELEE_ATTACK3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@POBB@ACT_VM_SHOOT_EMPTY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@KED@ACT_VM_START_RELOAD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@JBEH@ACT_VM_RELOAD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@INPL@ACT_VM_RELOAD_EMPTY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@NPKE@ACT_VM_TURNON?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@FDDJ@ACT_VM_TURNOFF?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@IBCM@ACT_VM_PUMP?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@PIKE@ACT_VM_PUMP_EMPTY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@IAK@ACT_VM_START_CHARGE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@JDAO@ACT_VM_CHARGE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@PHBH@ACT_VM_OVERLOAD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@CGCN@ACT_VM_IDLE_EMPTY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04GOCP@null?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FOPF@parent?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08IDGH@movewith?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@FCIN@parentflags?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05JCDO@style?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MCHI@reflection?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@DCCA@vlight_cache?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_00A@?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@JICI@FUNCTION?5NOT?5IN?5TABLE?$CB?3?5?$CFs?3?$CFs?5?$CI?$CF@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CL@EHCN@z?3?2xashxtsrc?2server?2monsters?2ani@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@NLKH@m_pSubModel?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@FCKL@?$CFs?1?$CFs?$CFi?$CFi?4mdl?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@DENN@loading?3?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@MKJ@Server_GetBlendingInterface?$CI?$CJ?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@PPBE@Bad?5sound?5event?5?$CFd?5in?5sequence?5?$CF@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@DMEH@error?5in?5transition?5graph?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@EGBJ@z?3?2xashxtsrc?2game_shared?2utlarra@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EF@KBFD@?$CIBase?$CI?$CJ?5?$DN?$DN?5NULL?$CJ?5?$HM?$HM?5?$CI?$CGsrc?5?$DM?5Base@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@IOBG@?$CIelem?5?$DN?$DN?5Count?$CI?$CJ?$CJ?5?$HM?$HM?5IsValidInde@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@KIKJ@z?3?2xashxtsrc?2game_shared?2utlmemo@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@MOH@nGrowSize?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@KBCN@?$CBIsReadOnly?$CI?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MLLF@IsIdxValid?$CIi?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DG@DBGD@IsValidIndex?$CIelem?$CJ?5?$HM?$HM?5?$CI?5m_Size?5?$DN@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07BGLK@num?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01PLJA@0?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JCKE@m_pMemory?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
;	COMDAT ?SinCos@@YAXMPAM0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector2D@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector2D@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DVector2D@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector2D@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Vector@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9Vector@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DVector@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector@@QAEPAMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QAEPAMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QBE?BVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector4D@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Vector4D@@QBE_NABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Radian@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BRadian@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Radian@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x3@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix3x3@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix3x3@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix3x3@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x3@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x4@@QAE@MMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix3x4@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix3x4@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix3x4@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x4@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix4x4@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix4x4@@QAE@ABVVector@@0M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix4x4@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix4x4@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix4x4@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix4x4@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SimpleSpline@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GET_PRIVATE@@YAPAXPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UtlMemory_CalcNewAllocationCount@@YAHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLessThan@@YA_NABQBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ENT@@YAPAUedict_s@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OFFSET@@YAHPBUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OFFSET@@YAHPAUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ENTINDEX@@YAHPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FNullEnt@@YAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FNullEnt@@YAHPBUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FNullEnt@@YAHPAUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FStrEq@@YAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CStudioBoneSetup@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pPoseParameter@CStudioBoneSetup@@QAEPBUmstudioposeparamdesc_t@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pHitboxSet@CStudioBoneSetup@@QBEPAUmstudiohitboxset_t@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountPoseParameters@CStudioBoneSetup@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNumHitboxSets@CStudioBoneSetup@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitBoneWeights@CStudioBoneSetup@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?debugMsg@CStudioBoneSetup@@UAAXPADZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?debugLine@CStudioBoneSetup@@UAEXABVVector@@0HHH_NM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStudioPointers@CStudioBoneSetup@@QAEXPAUstudiohdr_t@@PBM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@EHANDLE@@QAEPAUedict_s@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BEHANDLE@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CEHANDLE@@QAEPAVCBaseEntity@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassname@CBaseEntity@@QAEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTargetname@CBaseEntity@@QAEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ObjectCaps@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FunctionCheck@CBaseEntity@@QAEXPAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearGroundEntity@CBaseEntity@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetModelType@CBaseEntity@@QAE?AW4modtype_t@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?edict@CBaseEntity@@QAEPAUedict_s@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EntityToWorldTransform@CBaseEntity@@QBEABVmatrix4x4@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLocalTime@CBaseEntity@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetConditions@CBaseMonster@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HasConditions@CBaseMonster@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?debugMsg@CBaseBoneSetup@@UAAXPADZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAnimSourceData@CBaseBoneSetup@@UAEPAUmstudioanim_t@@PAUmstudioseqdesc_t@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBaseModel@CBaseBoneSetup@@QAEXPAUmodel_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E19
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBaseBoneSetup@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Server_GetBlendingInterface
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetupModelBones@@YAXPAUstudiohdr_t@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CalcDefaultPoseParameters@@YAXPAXPAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseBoneSetup@@YAPAVCStudioBoneSetup@@HPAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LookupPoseParameter@@YAHPAXPBDPAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPoseParameter@@YAXPAXHMPAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPoseParameter@@YAMPAXHPAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindHitboxSetByName@@YAHPAXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ExtractBbox@@YAHPAXHAAVVector@@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LookupActivity@@YAHPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LookupActivityHeaviest@@YAHPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetEyePosition@@YAHPAXAAVVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LookupSequence@@YAHPAXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSoundEvent@@YAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SequencePrecache@@YAXPAXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CalcGaitFrame@@YAXPAXAAHAAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSequenceInfo@@YAXPAXHPAM1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSequenceFlags@@YAHPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAnimationEvent@@YAHPAXHPAUMonsterEvent_t@@MMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetController@@YAMPAXPAEHM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBlending@@YAMPAXHPAEHM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindTransition@@YAHPAXHHPAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBodygroup@@YAXPAXAAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBodygroup@@YAHPAXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindAttachmentByName@@YAHPAXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddToTail@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEHABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertBefore@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEHHABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CUtlMemory@PADH@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CUtlMemory@PADH@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CUtlMemory@PADH@@QAEAAPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Base@?$CUtlMemory@PADH@@QAEPAPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValidIndex@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBE_NH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GrowVector@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShiftElementsRight@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyConstruct@@YAXPAPADABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Purge@?$CUtlMemory@PADH@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NumAllocated@?$CUtlMemory@PADH@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Grow@?$CUtlMemory@PADH@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Destruct@@YAXPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CStudioBoneSetup@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CBaseBoneSetup@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??_C@_0BC@BHKF@ACT_MELEE_ATTACK1?$AA@		; `string'
PUBLIC	??_C@_0BC@OIBM@ACT_MELEE_ATTACK2?$AA@		; `string'
PUBLIC	??_C@_0L@DABN@ACT_RELOAD?$AA@			; `string'
PUBLIC	??_C@_07MMFM@ACT_ARM?$AA@			; `string'
PUBLIC	??_C@_0L@MANE@ACT_DISARM?$AA@			; `string'
PUBLIC	??_C@_07ICAP@ACT_EAT?$AA@			; `string'
PUBLIC	??_C@_0O@LMAD@ACT_DIESIMPLE?$AA@		; `string'
PUBLIC	??_C@_0BA@ONLF@ACT_DIEBACKWARD?$AA@		; `string'
PUBLIC	??_C@_0P@MBEH@ACT_DIEFORWARD?$AA@		; `string'
PUBLIC	??_C@_0P@CCI@ACT_DIEVIOLENT?$AA@		; `string'
PUBLIC	??_C@_0BB@OMIO@ACT_BARNACLE_HIT?$AA@		; `string'
PUBLIC	??_C@_0BC@CAB@ACT_BARNACLE_PULL?$AA@		; `string'
PUBLIC	??_C@_0BD@LC@ACT_BARNACLE_CHOMP?$AA@		; `string'
PUBLIC	??_C@_0BC@DCMK@ACT_BARNACLE_CHEW?$AA@		; `string'
PUBLIC	??_C@_09HHFL@ACT_SLEEP?$AA@			; `string'
PUBLIC	??_C@_0BC@HBKN@ACT_INSPECT_FLOOR?$AA@		; `string'
PUBLIC	??_C@_0BB@NPC@ACT_INSPECT_WALL?$AA@		; `string'
PUBLIC	??_C@_0P@FPPM@ACT_IDLE_ANGRY?$AA@		; `string'
PUBLIC	??_C@_0O@PBCP@ACT_WALK_HURT?$AA@		; `string'
PUBLIC	??_C@_0N@MLHD@ACT_RUN_HURT?$AA@			; `string'
PUBLIC	??_C@_09HJMC@ACT_HOVER?$AA@			; `string'
PUBLIC	??_C@_09JCGF@ACT_GLIDE?$AA@			; `string'
PUBLIC	??_C@_0N@OMAB@ACT_FLY_LEFT?$AA@			; `string'
PUBLIC	??_C@_0O@DMDJ@ACT_FLY_RIGHT?$AA@		; `string'
PUBLIC	??_C@_0BB@MJAI@ACT_DETECT_SCENT?$AA@		; `string'
PUBLIC	??_C@_09IION@ACT_SNIFF?$AA@			; `string'
PUBLIC	??_C@_08PNIC@ACT_BITE?$AA@			; `string'
PUBLIC	??_C@_0BD@NHBG@ACT_THREAT_DISPLAY?$AA@		; `string'
PUBLIC	??_C@_0BB@GAPB@ACT_FEAR_DISPLAY?$AA@		; `string'
PUBLIC	?m_poseparameter@@3PAMA				; m_poseparameter
PUBLIC	??_C@_0M@LPIN@ACT_EXCITED?$AA@			; `string'
PUBLIC	?IEngineStudio@@3Userver_studio_api_s@@A	; IEngineStudio
PUBLIC	??_C@_0BE@LKKK@ACT_SPECIAL_ATTACK1?$AA@		; `string'
PUBLIC	??_C@_0BE@EFBD@ACT_SPECIAL_ATTACK2?$AA@		; `string'
PUBLIC	??_C@_0BA@MCPA@ACT_COMBAT_IDLE?$AA@		; `string'
PUBLIC	??_C@_0BA@KKFK@ACT_WALK_SCARED?$AA@		; `string'
PUBLIC	??_C@_0P@FNPL@ACT_RUN_SCARED?$AA@		; `string'
PUBLIC	??_C@_0BC@OLLI@ACT_VICTORY_DANCE?$AA@		; `string'
PUBLIC	??_C@_0BB@IJCK@ACT_DIE_HEADSHOT?$AA@		; `string'
PUBLIC	??_C@_0BC@EHPG@ACT_DIE_CHESTSHOT?$AA@		; `string'
PUBLIC	??_C@_0BA@IIOA@ACT_DIE_GUTSHOT?$AA@		; `string'
PUBLIC	??_C@_0BB@KIMF@ACT_DIE_BACKSHOT?$AA@		; `string'
PUBLIC	??_C@_0BA@KCMH@ACT_FLINCH_HEAD?$AA@		; `string'
PUBLIC	??_C@_0BB@DJCH@ACT_FLINCH_CHEST?$AA@		; `string'
PUBLIC	??_C@_0BD@GHME@ACT_FLINCH_STOMACH?$AA@		; `string'
PUBLIC	??_C@_0BD@HLFN@ACT_FLINCH_LEFTARM?$AA@		; `string'
PUBLIC	??_C@_0BE@KFMB@ACT_FLINCH_RIGHTARM?$AA@		; `string'
PUBLIC	??_C@_0BD@PLMO@ACT_FLINCH_LEFTLEG?$AA@		; `string'
PUBLIC	??_C@_0BE@CFFC@ACT_FLINCH_RIGHTLEG?$AA@		; `string'
PUBLIC	??_C@_0M@KGMH@ACT_VM_NONE?$AA@			; `string'
PUBLIC	??_C@_0O@JFOP@ACT_VM_DEPLOY?$AA@		; `string'
PUBLIC	??_C@_0BE@DMGM@ACT_VM_DEPLOY_EMPTY?$AA@		; `string'
PUBLIC	??_C@_0P@NLOH@ACT_VM_HOLSTER?$AA@		; `string'
PUBLIC	??_C@_0BF@FCKA@ACT_VM_HOLSTER_EMPTY?$AA@	; `string'
PUBLIC	??_C@_0N@NLBA@ACT_VM_IDLE1?$AA@			; `string'
PUBLIC	??_C@_0N@CEKJ@ACT_VM_IDLE2?$AA@			; `string'
PUBLIC	??_C@_0N@IODO@ACT_VM_IDLE3?$AA@			; `string'
PUBLIC	??_C@_0BF@JDBF@ACT_VM_RANGE_ATTACK1?$AA@	; `string'
PUBLIC	??_C@_0BF@GMKM@ACT_VM_RANGE_ATTACK2?$AA@	; `string'
PUBLIC	??_C@_0BF@MGDL@ACT_VM_RANGE_ATTACK3?$AA@	; `string'
PUBLIC	??_C@_0BF@MFJE@ACT_VM_MELEE_ATTACK1?$AA@	; `string'
PUBLIC	??_C@_0BF@DKCN@ACT_VM_MELEE_ATTACK2?$AA@	; `string'
PUBLIC	??_C@_0BF@JALK@ACT_VM_MELEE_ATTACK3?$AA@	; `string'
PUBLIC	??_C@_0BD@POBB@ACT_VM_SHOOT_EMPTY?$AA@		; `string'
PUBLIC	??_C@_0BE@KED@ACT_VM_START_RELOAD?$AA@		; `string'
PUBLIC	??_C@_0O@JBEH@ACT_VM_RELOAD?$AA@		; `string'
PUBLIC	??_C@_0BE@INPL@ACT_VM_RELOAD_EMPTY?$AA@		; `string'
PUBLIC	??_C@_0O@NPKE@ACT_VM_TURNON?$AA@		; `string'
PUBLIC	??_C@_0P@FDDJ@ACT_VM_TURNOFF?$AA@		; `string'
PUBLIC	??_C@_0M@IBCM@ACT_VM_PUMP?$AA@			; `string'
PUBLIC	??_C@_0BC@PIKE@ACT_VM_PUMP_EMPTY?$AA@		; `string'
PUBLIC	??_C@_0BE@IAK@ACT_VM_START_CHARGE?$AA@		; `string'
PUBLIC	??_C@_0O@JDAO@ACT_VM_CHARGE?$AA@		; `string'
PUBLIC	??_C@_0BA@PHBH@ACT_VM_OVERLOAD?$AA@		; `string'
PUBLIC	??_C@_0BC@CGCN@ACT_VM_IDLE_EMPTY?$AA@		; `string'
PUBLIC	?activity_map@@3PAUactivity_map_t@@A		; activity_map
PUBLIC	??_C@_09LPPN@ACT_RESET?$AA@			; `string'
PUBLIC	??_C@_08ONOA@ACT_IDLE?$AA@			; `string'
PUBLIC	??_C@_09OPPC@ACT_GUARD?$AA@			; `string'
PUBLIC	??_C@_08PMDL@ACT_WALK?$AA@			; `string'
PUBLIC	??_C@_07IFOB@ACT_RUN?$AA@			; `string'
PUBLIC	??_C@_07NJBD@ACT_FLY?$AA@			; `string'
PUBLIC	??_C@_08BHBM@ACT_SWIM?$AA@			; `string'
PUBLIC	??_C@_07GAAB@ACT_HOP?$AA@			; `string'
PUBLIC	??_C@_08FPAD@ACT_LEAP?$AA@			; `string'
PUBLIC	??_C@_08NJKN@ACT_FALL?$AA@			; `string'
PUBLIC	??_C@_08MAHE@ACT_LAND?$AA@			; `string'
PUBLIC	??_C@_0BA@KGJE@ACT_STRAFE_LEFT?$AA@		; `string'
PUBLIC	??_C@_0BB@MBHD@ACT_STRAFE_RIGHT?$AA@		; `string'
PUBLIC	??_C@_0O@KHJF@ACT_ROLL_LEFT?$AA@		; `string'
PUBLIC	??_C@_0P@PNHC@ACT_ROLL_RIGHT?$AA@		; `string'
PUBLIC	??_C@_0O@CICP@ACT_TURN_LEFT?$AA@		; `string'
PUBLIC	??_C@_0P@EBPN@ACT_TURN_RIGHT?$AA@		; `string'
PUBLIC	??_C@_0L@DEKF@ACT_CROUCH?$AA@			; `string'
PUBLIC	??_C@_0P@FFOO@ACT_CROUCHIDLE?$AA@		; `string'
PUBLIC	??_C@_09MNDH@ACT_STAND?$AA@			; `string'
PUBLIC	??_C@_07OHHO@ACT_USE?$AA@			; `string'
PUBLIC	??_C@_0M@MCGA@ACT_SIGNAL1?$AA@			; `string'
PUBLIC	??_C@_0M@DNNJ@ACT_SIGNAL2?$AA@			; `string'
PUBLIC	??_C@_0M@JHEO@ACT_SIGNAL3?$AA@			; `string'
PUBLIC	??_C@_0L@CLIN@ACT_TWITCH?$AA@			; `string'
PUBLIC	??_C@_09MKJB@ACT_COWER?$AA@			; `string'
PUBLIC	??_C@_0BB@MJFP@ACT_SMALL_FLINCH?$AA@		; `string'
PUBLIC	??_C@_0P@DFJK@ACT_BIG_FLINCH?$AA@		; `string'
PUBLIC	??_C@_0BC@EBCE@ACT_RANGE_ATTACK1?$AA@		; `string'
PUBLIC	??_C@_0BC@LOJN@ACT_RANGE_ATTACK2?$AA@		; `string'
_BSS	SEGMENT
?m_poseparameter@@3PAMA DD 018H DUP (?)			; m_poseparameter
?IEngineStudio@@3Userver_studio_api_s@@A DB 010H DUP (?) ; IEngineStudio
_BSS	ENDS
_DATA	SEGMENT
?activity_map@@3PAUactivity_map_t@@A DD 00H		; activity_map
	DD	FLAT:??_C@_09LPPN@ACT_RESET?$AA@
	DD	01H
	DD	FLAT:??_C@_08ONOA@ACT_IDLE?$AA@
	DD	02H
	DD	FLAT:??_C@_09OPPC@ACT_GUARD?$AA@
	DD	03H
	DD	FLAT:??_C@_08PMDL@ACT_WALK?$AA@
	DD	04H
	DD	FLAT:??_C@_07IFOB@ACT_RUN?$AA@
	DD	05H
	DD	FLAT:??_C@_07NJBD@ACT_FLY?$AA@
	DD	06H
	DD	FLAT:??_C@_08BHBM@ACT_SWIM?$AA@
	DD	07H
	DD	FLAT:??_C@_07GAAB@ACT_HOP?$AA@
	DD	08H
	DD	FLAT:??_C@_08FPAD@ACT_LEAP?$AA@
	DD	09H
	DD	FLAT:??_C@_08NJKN@ACT_FALL?$AA@
	DD	0aH
	DD	FLAT:??_C@_08MAHE@ACT_LAND?$AA@
	DD	0bH
	DD	FLAT:??_C@_0BA@KGJE@ACT_STRAFE_LEFT?$AA@
	DD	0cH
	DD	FLAT:??_C@_0BB@MBHD@ACT_STRAFE_RIGHT?$AA@
	DD	0dH
	DD	FLAT:??_C@_0O@KHJF@ACT_ROLL_LEFT?$AA@
	DD	0eH
	DD	FLAT:??_C@_0P@PNHC@ACT_ROLL_RIGHT?$AA@
	DD	0fH
	DD	FLAT:??_C@_0O@CICP@ACT_TURN_LEFT?$AA@
	DD	010H
	DD	FLAT:??_C@_0P@EBPN@ACT_TURN_RIGHT?$AA@
	DD	011H
	DD	FLAT:??_C@_0L@DEKF@ACT_CROUCH?$AA@
	DD	012H
	DD	FLAT:??_C@_0P@FFOO@ACT_CROUCHIDLE?$AA@
	DD	013H
	DD	FLAT:??_C@_09MNDH@ACT_STAND?$AA@
	DD	014H
	DD	FLAT:??_C@_07OHHO@ACT_USE?$AA@
	DD	015H
	DD	FLAT:??_C@_0M@MCGA@ACT_SIGNAL1?$AA@
	DD	016H
	DD	FLAT:??_C@_0M@DNNJ@ACT_SIGNAL2?$AA@
	DD	017H
	DD	FLAT:??_C@_0M@JHEO@ACT_SIGNAL3?$AA@
	DD	018H
	DD	FLAT:??_C@_0L@CLIN@ACT_TWITCH?$AA@
	DD	019H
	DD	FLAT:??_C@_09MKJB@ACT_COWER?$AA@
	DD	01aH
	DD	FLAT:??_C@_0BB@MJFP@ACT_SMALL_FLINCH?$AA@
	DD	01bH
	DD	FLAT:??_C@_0P@DFJK@ACT_BIG_FLINCH?$AA@
	DD	01cH
	DD	FLAT:??_C@_0BC@EBCE@ACT_RANGE_ATTACK1?$AA@
	DD	01dH
	DD	FLAT:??_C@_0BC@LOJN@ACT_RANGE_ATTACK2?$AA@
	DD	01eH
	DD	FLAT:??_C@_0BC@BHKF@ACT_MELEE_ATTACK1?$AA@
	DD	01fH
	DD	FLAT:??_C@_0BC@OIBM@ACT_MELEE_ATTACK2?$AA@
	DD	020H
	DD	FLAT:??_C@_0L@DABN@ACT_RELOAD?$AA@
	DD	021H
	DD	FLAT:??_C@_07MMFM@ACT_ARM?$AA@
	DD	022H
	DD	FLAT:??_C@_0L@MANE@ACT_DISARM?$AA@
	DD	023H
	DD	FLAT:??_C@_07ICAP@ACT_EAT?$AA@
	DD	024H
	DD	FLAT:??_C@_0O@LMAD@ACT_DIESIMPLE?$AA@
	DD	025H
	DD	FLAT:??_C@_0BA@ONLF@ACT_DIEBACKWARD?$AA@
	DD	026H
	DD	FLAT:??_C@_0P@MBEH@ACT_DIEFORWARD?$AA@
	DD	027H
	DD	FLAT:??_C@_0P@CCI@ACT_DIEVIOLENT?$AA@
	DD	028H
	DD	FLAT:??_C@_0BB@OMIO@ACT_BARNACLE_HIT?$AA@
	DD	029H
	DD	FLAT:??_C@_0BC@CAB@ACT_BARNACLE_PULL?$AA@
	DD	02aH
	DD	FLAT:??_C@_0BD@LC@ACT_BARNACLE_CHOMP?$AA@
	DD	02bH
	DD	FLAT:??_C@_0BC@DCMK@ACT_BARNACLE_CHEW?$AA@
	DD	02cH
	DD	FLAT:??_C@_09HHFL@ACT_SLEEP?$AA@
	DD	02dH
	DD	FLAT:??_C@_0BC@HBKN@ACT_INSPECT_FLOOR?$AA@
	DD	02eH
	DD	FLAT:??_C@_0BB@NPC@ACT_INSPECT_WALL?$AA@
	DD	02fH
	DD	FLAT:??_C@_0P@FPPM@ACT_IDLE_ANGRY?$AA@
	DD	030H
	DD	FLAT:??_C@_0O@PBCP@ACT_WALK_HURT?$AA@
	DD	031H
	DD	FLAT:??_C@_0N@MLHD@ACT_RUN_HURT?$AA@
	DD	032H
	DD	FLAT:??_C@_09HJMC@ACT_HOVER?$AA@
	DD	033H
	DD	FLAT:??_C@_09JCGF@ACT_GLIDE?$AA@
	DD	034H
	DD	FLAT:??_C@_0N@OMAB@ACT_FLY_LEFT?$AA@
	DD	035H
	DD	FLAT:??_C@_0O@DMDJ@ACT_FLY_RIGHT?$AA@
	DD	036H
	DD	FLAT:??_C@_0BB@MJAI@ACT_DETECT_SCENT?$AA@
	DD	037H
	DD	FLAT:??_C@_09IION@ACT_SNIFF?$AA@
	DD	038H
	DD	FLAT:??_C@_08PNIC@ACT_BITE?$AA@
	DD	039H
	DD	FLAT:??_C@_0BD@NHBG@ACT_THREAT_DISPLAY?$AA@
	DD	03aH
	DD	FLAT:??_C@_0BB@GAPB@ACT_FEAR_DISPLAY?$AA@
	DD	03bH
	DD	FLAT:??_C@_0M@LPIN@ACT_EXCITED?$AA@
	DD	03cH
	DD	FLAT:??_C@_0BE@LKKK@ACT_SPECIAL_ATTACK1?$AA@
	DD	03dH
	DD	FLAT:??_C@_0BE@EFBD@ACT_SPECIAL_ATTACK2?$AA@
	DD	03eH
	DD	FLAT:??_C@_0BA@MCPA@ACT_COMBAT_IDLE?$AA@
	DD	03fH
	DD	FLAT:??_C@_0BA@KKFK@ACT_WALK_SCARED?$AA@
	DD	040H
	DD	FLAT:??_C@_0P@FNPL@ACT_RUN_SCARED?$AA@
	DD	041H
	DD	FLAT:??_C@_0BC@OLLI@ACT_VICTORY_DANCE?$AA@
	DD	042H
	DD	FLAT:??_C@_0BB@IJCK@ACT_DIE_HEADSHOT?$AA@
	DD	043H
	DD	FLAT:??_C@_0BC@EHPG@ACT_DIE_CHESTSHOT?$AA@
	DD	044H
	DD	FLAT:??_C@_0BA@IIOA@ACT_DIE_GUTSHOT?$AA@
	DD	045H
	DD	FLAT:??_C@_0BB@KIMF@ACT_DIE_BACKSHOT?$AA@
	DD	046H
	DD	FLAT:??_C@_0BA@KCMH@ACT_FLINCH_HEAD?$AA@
	DD	047H
	DD	FLAT:??_C@_0BB@DJCH@ACT_FLINCH_CHEST?$AA@
	DD	048H
	DD	FLAT:??_C@_0BD@GHME@ACT_FLINCH_STOMACH?$AA@
	DD	049H
	DD	FLAT:??_C@_0BD@HLFN@ACT_FLINCH_LEFTARM?$AA@
	DD	04aH
	DD	FLAT:??_C@_0BE@KFMB@ACT_FLINCH_RIGHTARM?$AA@
	DD	04bH
	DD	FLAT:??_C@_0BD@PLMO@ACT_FLINCH_LEFTLEG?$AA@
	DD	04cH
	DD	FLAT:??_C@_0BE@CFFC@ACT_FLINCH_RIGHTLEG?$AA@
	DD	04dH
	DD	FLAT:??_C@_0M@KGMH@ACT_VM_NONE?$AA@
	DD	04eH
	DD	FLAT:??_C@_0O@JFOP@ACT_VM_DEPLOY?$AA@
	DD	04fH
	DD	FLAT:??_C@_0BE@DMGM@ACT_VM_DEPLOY_EMPTY?$AA@
	DD	050H
	DD	FLAT:??_C@_0P@NLOH@ACT_VM_HOLSTER?$AA@
	DD	051H
	DD	FLAT:??_C@_0BF@FCKA@ACT_VM_HOLSTER_EMPTY?$AA@
	DD	052H
	DD	FLAT:??_C@_0N@NLBA@ACT_VM_IDLE1?$AA@
	DD	053H
	DD	FLAT:??_C@_0N@CEKJ@ACT_VM_IDLE2?$AA@
	DD	054H
	DD	FLAT:??_C@_0N@IODO@ACT_VM_IDLE3?$AA@
	DD	055H
	DD	FLAT:??_C@_0BF@JDBF@ACT_VM_RANGE_ATTACK1?$AA@
	DD	056H
	DD	FLAT:??_C@_0BF@GMKM@ACT_VM_RANGE_ATTACK2?$AA@
	DD	057H
	DD	FLAT:??_C@_0BF@MGDL@ACT_VM_RANGE_ATTACK3?$AA@
	DD	058H
	DD	FLAT:??_C@_0BF@MFJE@ACT_VM_MELEE_ATTACK1?$AA@
	DD	059H
	DD	FLAT:??_C@_0BF@DKCN@ACT_VM_MELEE_ATTACK2?$AA@
	DD	05aH
	DD	FLAT:??_C@_0BF@JALK@ACT_VM_MELEE_ATTACK3?$AA@
	DD	05bH
	DD	FLAT:??_C@_0BD@POBB@ACT_VM_SHOOT_EMPTY?$AA@
	DD	05cH
	DD	FLAT:??_C@_0BE@KED@ACT_VM_START_RELOAD?$AA@
	DD	05dH
	DD	FLAT:??_C@_0O@JBEH@ACT_VM_RELOAD?$AA@
	DD	05eH
	DD	FLAT:??_C@_0BE@INPL@ACT_VM_RELOAD_EMPTY?$AA@
	DD	05fH
	DD	FLAT:??_C@_0O@NPKE@ACT_VM_TURNON?$AA@
	DD	060H
	DD	FLAT:??_C@_0P@FDDJ@ACT_VM_TURNOFF?$AA@
	DD	061H
	DD	FLAT:??_C@_0M@IBCM@ACT_VM_PUMP?$AA@
	DD	062H
	DD	FLAT:??_C@_0BC@PIKE@ACT_VM_PUMP_EMPTY?$AA@
	DD	063H
	DD	FLAT:??_C@_0BE@IAK@ACT_VM_START_CHARGE?$AA@
	DD	064H
	DD	FLAT:??_C@_0O@JDAO@ACT_VM_CHARGE?$AA@
	DD	065H
	DD	FLAT:??_C@_0BA@PHBH@ACT_VM_OVERLOAD?$AA@
	DD	066H
	DD	FLAT:??_C@_0BC@CGCN@ACT_VM_IDLE_EMPTY?$AA@
	DD	00H
	DD	00H
_DATA	ENDS
CRT$XCU	SEGMENT
_$S21	DD	FLAT:_$E20
CRT$XCU	ENDS
;	COMDAT ??_C@_09LPPN@ACT_RESET?$AA@
CONST	SEGMENT
??_C@_09LPPN@ACT_RESET?$AA@ DB 'ACT_RESET', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ONOA@ACT_IDLE?$AA@
CONST	SEGMENT
??_C@_08ONOA@ACT_IDLE?$AA@ DB 'ACT_IDLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPPC@ACT_GUARD?$AA@
CONST	SEGMENT
??_C@_09OPPC@ACT_GUARD?$AA@ DB 'ACT_GUARD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PMDL@ACT_WALK?$AA@
CONST	SEGMENT
??_C@_08PMDL@ACT_WALK?$AA@ DB 'ACT_WALK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IFOB@ACT_RUN?$AA@
CONST	SEGMENT
??_C@_07IFOB@ACT_RUN?$AA@ DB 'ACT_RUN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NJBD@ACT_FLY?$AA@
CONST	SEGMENT
??_C@_07NJBD@ACT_FLY?$AA@ DB 'ACT_FLY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHBM@ACT_SWIM?$AA@
CONST	SEGMENT
??_C@_08BHBM@ACT_SWIM?$AA@ DB 'ACT_SWIM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GAAB@ACT_HOP?$AA@
CONST	SEGMENT
??_C@_07GAAB@ACT_HOP?$AA@ DB 'ACT_HOP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FPAD@ACT_LEAP?$AA@
CONST	SEGMENT
??_C@_08FPAD@ACT_LEAP?$AA@ DB 'ACT_LEAP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NJKN@ACT_FALL?$AA@
CONST	SEGMENT
??_C@_08NJKN@ACT_FALL?$AA@ DB 'ACT_FALL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MAHE@ACT_LAND?$AA@
CONST	SEGMENT
??_C@_08MAHE@ACT_LAND?$AA@ DB 'ACT_LAND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KGJE@ACT_STRAFE_LEFT?$AA@
CONST	SEGMENT
??_C@_0BA@KGJE@ACT_STRAFE_LEFT?$AA@ DB 'ACT_STRAFE_LEFT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MBHD@ACT_STRAFE_RIGHT?$AA@
CONST	SEGMENT
??_C@_0BB@MBHD@ACT_STRAFE_RIGHT?$AA@ DB 'ACT_STRAFE_RIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KHJF@ACT_ROLL_LEFT?$AA@
CONST	SEGMENT
??_C@_0O@KHJF@ACT_ROLL_LEFT?$AA@ DB 'ACT_ROLL_LEFT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PNHC@ACT_ROLL_RIGHT?$AA@
CONST	SEGMENT
??_C@_0P@PNHC@ACT_ROLL_RIGHT?$AA@ DB 'ACT_ROLL_RIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CICP@ACT_TURN_LEFT?$AA@
CONST	SEGMENT
??_C@_0O@CICP@ACT_TURN_LEFT?$AA@ DB 'ACT_TURN_LEFT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBPN@ACT_TURN_RIGHT?$AA@
CONST	SEGMENT
??_C@_0P@EBPN@ACT_TURN_RIGHT?$AA@ DB 'ACT_TURN_RIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DEKF@ACT_CROUCH?$AA@
CONST	SEGMENT
??_C@_0L@DEKF@ACT_CROUCH?$AA@ DB 'ACT_CROUCH', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FFOO@ACT_CROUCHIDLE?$AA@
CONST	SEGMENT
??_C@_0P@FFOO@ACT_CROUCHIDLE?$AA@ DB 'ACT_CROUCHIDLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MNDH@ACT_STAND?$AA@
CONST	SEGMENT
??_C@_09MNDH@ACT_STAND?$AA@ DB 'ACT_STAND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHHO@ACT_USE?$AA@
CONST	SEGMENT
??_C@_07OHHO@ACT_USE?$AA@ DB 'ACT_USE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MCGA@ACT_SIGNAL1?$AA@
CONST	SEGMENT
??_C@_0M@MCGA@ACT_SIGNAL1?$AA@ DB 'ACT_SIGNAL1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DNNJ@ACT_SIGNAL2?$AA@
CONST	SEGMENT
??_C@_0M@DNNJ@ACT_SIGNAL2?$AA@ DB 'ACT_SIGNAL2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JHEO@ACT_SIGNAL3?$AA@
CONST	SEGMENT
??_C@_0M@JHEO@ACT_SIGNAL3?$AA@ DB 'ACT_SIGNAL3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CLIN@ACT_TWITCH?$AA@
CONST	SEGMENT
??_C@_0L@CLIN@ACT_TWITCH?$AA@ DB 'ACT_TWITCH', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MKJB@ACT_COWER?$AA@
CONST	SEGMENT
??_C@_09MKJB@ACT_COWER?$AA@ DB 'ACT_COWER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MJFP@ACT_SMALL_FLINCH?$AA@
CONST	SEGMENT
??_C@_0BB@MJFP@ACT_SMALL_FLINCH?$AA@ DB 'ACT_SMALL_FLINCH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DFJK@ACT_BIG_FLINCH?$AA@
CONST	SEGMENT
??_C@_0P@DFJK@ACT_BIG_FLINCH?$AA@ DB 'ACT_BIG_FLINCH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EBCE@ACT_RANGE_ATTACK1?$AA@
CONST	SEGMENT
??_C@_0BC@EBCE@ACT_RANGE_ATTACK1?$AA@ DB 'ACT_RANGE_ATTACK1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LOJN@ACT_RANGE_ATTACK2?$AA@
CONST	SEGMENT
??_C@_0BC@LOJN@ACT_RANGE_ATTACK2?$AA@ DB 'ACT_RANGE_ATTACK2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BHKF@ACT_MELEE_ATTACK1?$AA@
CONST	SEGMENT
??_C@_0BC@BHKF@ACT_MELEE_ATTACK1?$AA@ DB 'ACT_MELEE_ATTACK1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OIBM@ACT_MELEE_ATTACK2?$AA@
CONST	SEGMENT
??_C@_0BC@OIBM@ACT_MELEE_ATTACK2?$AA@ DB 'ACT_MELEE_ATTACK2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DABN@ACT_RELOAD?$AA@
CONST	SEGMENT
??_C@_0L@DABN@ACT_RELOAD?$AA@ DB 'ACT_RELOAD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MMFM@ACT_ARM?$AA@
CONST	SEGMENT
??_C@_07MMFM@ACT_ARM?$AA@ DB 'ACT_ARM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MANE@ACT_DISARM?$AA@
CONST	SEGMENT
??_C@_0L@MANE@ACT_DISARM?$AA@ DB 'ACT_DISARM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICAP@ACT_EAT?$AA@
CONST	SEGMENT
??_C@_07ICAP@ACT_EAT?$AA@ DB 'ACT_EAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LMAD@ACT_DIESIMPLE?$AA@
CONST	SEGMENT
??_C@_0O@LMAD@ACT_DIESIMPLE?$AA@ DB 'ACT_DIESIMPLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ONLF@ACT_DIEBACKWARD?$AA@
CONST	SEGMENT
??_C@_0BA@ONLF@ACT_DIEBACKWARD?$AA@ DB 'ACT_DIEBACKWARD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MBEH@ACT_DIEFORWARD?$AA@
CONST	SEGMENT
??_C@_0P@MBEH@ACT_DIEFORWARD?$AA@ DB 'ACT_DIEFORWARD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CCI@ACT_DIEVIOLENT?$AA@
CONST	SEGMENT
??_C@_0P@CCI@ACT_DIEVIOLENT?$AA@ DB 'ACT_DIEVIOLENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OMIO@ACT_BARNACLE_HIT?$AA@
CONST	SEGMENT
??_C@_0BB@OMIO@ACT_BARNACLE_HIT?$AA@ DB 'ACT_BARNACLE_HIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CAB@ACT_BARNACLE_PULL?$AA@
CONST	SEGMENT
??_C@_0BC@CAB@ACT_BARNACLE_PULL?$AA@ DB 'ACT_BARNACLE_PULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LC@ACT_BARNACLE_CHOMP?$AA@
CONST	SEGMENT
??_C@_0BD@LC@ACT_BARNACLE_CHOMP?$AA@ DB 'ACT_BARNACLE_CHOMP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DCMK@ACT_BARNACLE_CHEW?$AA@
CONST	SEGMENT
??_C@_0BC@DCMK@ACT_BARNACLE_CHEW?$AA@ DB 'ACT_BARNACLE_CHEW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HHFL@ACT_SLEEP?$AA@
CONST	SEGMENT
??_C@_09HHFL@ACT_SLEEP?$AA@ DB 'ACT_SLEEP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HBKN@ACT_INSPECT_FLOOR?$AA@
CONST	SEGMENT
??_C@_0BC@HBKN@ACT_INSPECT_FLOOR?$AA@ DB 'ACT_INSPECT_FLOOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NPC@ACT_INSPECT_WALL?$AA@
CONST	SEGMENT
??_C@_0BB@NPC@ACT_INSPECT_WALL?$AA@ DB 'ACT_INSPECT_WALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FPPM@ACT_IDLE_ANGRY?$AA@
CONST	SEGMENT
??_C@_0P@FPPM@ACT_IDLE_ANGRY?$AA@ DB 'ACT_IDLE_ANGRY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PBCP@ACT_WALK_HURT?$AA@
CONST	SEGMENT
??_C@_0O@PBCP@ACT_WALK_HURT?$AA@ DB 'ACT_WALK_HURT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MLHD@ACT_RUN_HURT?$AA@
CONST	SEGMENT
??_C@_0N@MLHD@ACT_RUN_HURT?$AA@ DB 'ACT_RUN_HURT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HJMC@ACT_HOVER?$AA@
CONST	SEGMENT
??_C@_09HJMC@ACT_HOVER?$AA@ DB 'ACT_HOVER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JCGF@ACT_GLIDE?$AA@
CONST	SEGMENT
??_C@_09JCGF@ACT_GLIDE?$AA@ DB 'ACT_GLIDE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OMAB@ACT_FLY_LEFT?$AA@
CONST	SEGMENT
??_C@_0N@OMAB@ACT_FLY_LEFT?$AA@ DB 'ACT_FLY_LEFT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DMDJ@ACT_FLY_RIGHT?$AA@
CONST	SEGMENT
??_C@_0O@DMDJ@ACT_FLY_RIGHT?$AA@ DB 'ACT_FLY_RIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MJAI@ACT_DETECT_SCENT?$AA@
CONST	SEGMENT
??_C@_0BB@MJAI@ACT_DETECT_SCENT?$AA@ DB 'ACT_DETECT_SCENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IION@ACT_SNIFF?$AA@
CONST	SEGMENT
??_C@_09IION@ACT_SNIFF?$AA@ DB 'ACT_SNIFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PNIC@ACT_BITE?$AA@
CONST	SEGMENT
??_C@_08PNIC@ACT_BITE?$AA@ DB 'ACT_BITE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NHBG@ACT_THREAT_DISPLAY?$AA@
CONST	SEGMENT
??_C@_0BD@NHBG@ACT_THREAT_DISPLAY?$AA@ DB 'ACT_THREAT_DISPLAY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GAPB@ACT_FEAR_DISPLAY?$AA@
CONST	SEGMENT
??_C@_0BB@GAPB@ACT_FEAR_DISPLAY?$AA@ DB 'ACT_FEAR_DISPLAY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LPIN@ACT_EXCITED?$AA@
CONST	SEGMENT
??_C@_0M@LPIN@ACT_EXCITED?$AA@ DB 'ACT_EXCITED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LKKK@ACT_SPECIAL_ATTACK1?$AA@
CONST	SEGMENT
??_C@_0BE@LKKK@ACT_SPECIAL_ATTACK1?$AA@ DB 'ACT_SPECIAL_ATTACK1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EFBD@ACT_SPECIAL_ATTACK2?$AA@
CONST	SEGMENT
??_C@_0BE@EFBD@ACT_SPECIAL_ATTACK2?$AA@ DB 'ACT_SPECIAL_ATTACK2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MCPA@ACT_COMBAT_IDLE?$AA@
CONST	SEGMENT
??_C@_0BA@MCPA@ACT_COMBAT_IDLE?$AA@ DB 'ACT_COMBAT_IDLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKFK@ACT_WALK_SCARED?$AA@
CONST	SEGMENT
??_C@_0BA@KKFK@ACT_WALK_SCARED?$AA@ DB 'ACT_WALK_SCARED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FNPL@ACT_RUN_SCARED?$AA@
CONST	SEGMENT
??_C@_0P@FNPL@ACT_RUN_SCARED?$AA@ DB 'ACT_RUN_SCARED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OLLI@ACT_VICTORY_DANCE?$AA@
CONST	SEGMENT
??_C@_0BC@OLLI@ACT_VICTORY_DANCE?$AA@ DB 'ACT_VICTORY_DANCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IJCK@ACT_DIE_HEADSHOT?$AA@
CONST	SEGMENT
??_C@_0BB@IJCK@ACT_DIE_HEADSHOT?$AA@ DB 'ACT_DIE_HEADSHOT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EHPG@ACT_DIE_CHESTSHOT?$AA@
CONST	SEGMENT
??_C@_0BC@EHPG@ACT_DIE_CHESTSHOT?$AA@ DB 'ACT_DIE_CHESTSHOT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIOA@ACT_DIE_GUTSHOT?$AA@
CONST	SEGMENT
??_C@_0BA@IIOA@ACT_DIE_GUTSHOT?$AA@ DB 'ACT_DIE_GUTSHOT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KIMF@ACT_DIE_BACKSHOT?$AA@
CONST	SEGMENT
??_C@_0BB@KIMF@ACT_DIE_BACKSHOT?$AA@ DB 'ACT_DIE_BACKSHOT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCMH@ACT_FLINCH_HEAD?$AA@
CONST	SEGMENT
??_C@_0BA@KCMH@ACT_FLINCH_HEAD?$AA@ DB 'ACT_FLINCH_HEAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DJCH@ACT_FLINCH_CHEST?$AA@
CONST	SEGMENT
??_C@_0BB@DJCH@ACT_FLINCH_CHEST?$AA@ DB 'ACT_FLINCH_CHEST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GHME@ACT_FLINCH_STOMACH?$AA@
CONST	SEGMENT
??_C@_0BD@GHME@ACT_FLINCH_STOMACH?$AA@ DB 'ACT_FLINCH_STOMACH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HLFN@ACT_FLINCH_LEFTARM?$AA@
CONST	SEGMENT
??_C@_0BD@HLFN@ACT_FLINCH_LEFTARM?$AA@ DB 'ACT_FLINCH_LEFTARM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KFMB@ACT_FLINCH_RIGHTARM?$AA@
CONST	SEGMENT
??_C@_0BE@KFMB@ACT_FLINCH_RIGHTARM?$AA@ DB 'ACT_FLINCH_RIGHTARM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PLMO@ACT_FLINCH_LEFTLEG?$AA@
CONST	SEGMENT
??_C@_0BD@PLMO@ACT_FLINCH_LEFTLEG?$AA@ DB 'ACT_FLINCH_LEFTLEG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CFFC@ACT_FLINCH_RIGHTLEG?$AA@
CONST	SEGMENT
??_C@_0BE@CFFC@ACT_FLINCH_RIGHTLEG?$AA@ DB 'ACT_FLINCH_RIGHTLEG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KGMH@ACT_VM_NONE?$AA@
CONST	SEGMENT
??_C@_0M@KGMH@ACT_VM_NONE?$AA@ DB 'ACT_VM_NONE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JFOP@ACT_VM_DEPLOY?$AA@
CONST	SEGMENT
??_C@_0O@JFOP@ACT_VM_DEPLOY?$AA@ DB 'ACT_VM_DEPLOY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DMGM@ACT_VM_DEPLOY_EMPTY?$AA@
CONST	SEGMENT
??_C@_0BE@DMGM@ACT_VM_DEPLOY_EMPTY?$AA@ DB 'ACT_VM_DEPLOY_EMPTY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NLOH@ACT_VM_HOLSTER?$AA@
CONST	SEGMENT
??_C@_0P@NLOH@ACT_VM_HOLSTER?$AA@ DB 'ACT_VM_HOLSTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FCKA@ACT_VM_HOLSTER_EMPTY?$AA@
CONST	SEGMENT
??_C@_0BF@FCKA@ACT_VM_HOLSTER_EMPTY?$AA@ DB 'ACT_VM_HOLSTER_EMPTY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NLBA@ACT_VM_IDLE1?$AA@
CONST	SEGMENT
??_C@_0N@NLBA@ACT_VM_IDLE1?$AA@ DB 'ACT_VM_IDLE1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CEKJ@ACT_VM_IDLE2?$AA@
CONST	SEGMENT
??_C@_0N@CEKJ@ACT_VM_IDLE2?$AA@ DB 'ACT_VM_IDLE2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IODO@ACT_VM_IDLE3?$AA@
CONST	SEGMENT
??_C@_0N@IODO@ACT_VM_IDLE3?$AA@ DB 'ACT_VM_IDLE3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JDBF@ACT_VM_RANGE_ATTACK1?$AA@
CONST	SEGMENT
??_C@_0BF@JDBF@ACT_VM_RANGE_ATTACK1?$AA@ DB 'ACT_VM_RANGE_ATTACK1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GMKM@ACT_VM_RANGE_ATTACK2?$AA@
CONST	SEGMENT
??_C@_0BF@GMKM@ACT_VM_RANGE_ATTACK2?$AA@ DB 'ACT_VM_RANGE_ATTACK2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MGDL@ACT_VM_RANGE_ATTACK3?$AA@
CONST	SEGMENT
??_C@_0BF@MGDL@ACT_VM_RANGE_ATTACK3?$AA@ DB 'ACT_VM_RANGE_ATTACK3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MFJE@ACT_VM_MELEE_ATTACK1?$AA@
CONST	SEGMENT
??_C@_0BF@MFJE@ACT_VM_MELEE_ATTACK1?$AA@ DB 'ACT_VM_MELEE_ATTACK1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DKCN@ACT_VM_MELEE_ATTACK2?$AA@
CONST	SEGMENT
??_C@_0BF@DKCN@ACT_VM_MELEE_ATTACK2?$AA@ DB 'ACT_VM_MELEE_ATTACK2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JALK@ACT_VM_MELEE_ATTACK3?$AA@
CONST	SEGMENT
??_C@_0BF@JALK@ACT_VM_MELEE_ATTACK3?$AA@ DB 'ACT_VM_MELEE_ATTACK3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@POBB@ACT_VM_SHOOT_EMPTY?$AA@
CONST	SEGMENT
??_C@_0BD@POBB@ACT_VM_SHOOT_EMPTY?$AA@ DB 'ACT_VM_SHOOT_EMPTY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KED@ACT_VM_START_RELOAD?$AA@
CONST	SEGMENT
??_C@_0BE@KED@ACT_VM_START_RELOAD?$AA@ DB 'ACT_VM_START_RELOAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JBEH@ACT_VM_RELOAD?$AA@
CONST	SEGMENT
??_C@_0O@JBEH@ACT_VM_RELOAD?$AA@ DB 'ACT_VM_RELOAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@INPL@ACT_VM_RELOAD_EMPTY?$AA@
CONST	SEGMENT
??_C@_0BE@INPL@ACT_VM_RELOAD_EMPTY?$AA@ DB 'ACT_VM_RELOAD_EMPTY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NPKE@ACT_VM_TURNON?$AA@
CONST	SEGMENT
??_C@_0O@NPKE@ACT_VM_TURNON?$AA@ DB 'ACT_VM_TURNON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FDDJ@ACT_VM_TURNOFF?$AA@
CONST	SEGMENT
??_C@_0P@FDDJ@ACT_VM_TURNOFF?$AA@ DB 'ACT_VM_TURNOFF', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IBCM@ACT_VM_PUMP?$AA@
CONST	SEGMENT
??_C@_0M@IBCM@ACT_VM_PUMP?$AA@ DB 'ACT_VM_PUMP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PIKE@ACT_VM_PUMP_EMPTY?$AA@
CONST	SEGMENT
??_C@_0BC@PIKE@ACT_VM_PUMP_EMPTY?$AA@ DB 'ACT_VM_PUMP_EMPTY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IAK@ACT_VM_START_CHARGE?$AA@
CONST	SEGMENT
??_C@_0BE@IAK@ACT_VM_START_CHARGE?$AA@ DB 'ACT_VM_START_CHARGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JDAO@ACT_VM_CHARGE?$AA@
CONST	SEGMENT
??_C@_0O@JDAO@ACT_VM_CHARGE?$AA@ DB 'ACT_VM_CHARGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PHBH@ACT_VM_OVERLOAD?$AA@
CONST	SEGMENT
??_C@_0BA@PHBH@ACT_VM_OVERLOAD?$AA@ DB 'ACT_VM_OVERLOAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CGCN@ACT_VM_IDLE_EMPTY?$AA@
CONST	SEGMENT
??_C@_0BC@CGCN@ACT_VM_IDLE_EMPTY?$AA@ DB 'ACT_VM_IDLE_EMPTY', 00H ; `string'
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EX0@Z@Z				; `vector constructor iterator'
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_H@YGXPAXIHP6EX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$L25385:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	cmp	DWORD PTR ___n$[ebp], 0
	jl	SHORT $L25386
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $L25385
$L25386:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
;	COMDAT _$E20
_TEXT	SEGMENT
_$E20	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	call	_$E19
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_$E20	ENDP
_TEXT	ENDS
PUBLIC	??0CBaseBoneSetup@@QAE@XZ			; CBaseBoneSetup::CBaseBoneSetup
_BSS	SEGMENT
_g_boneSetup DB	04a20H DUP (?)
_BSS	ENDS
;	COMDAT _$E19
_TEXT	SEGMENT
_$E19	PROC NEAR					; COMDAT

; 100  : static CBaseBoneSetup g_boneSetup;

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	??0CBaseBoneSetup@@QAE@XZ		; CBaseBoneSetup::CBaseBoneSetup
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_$E19	ENDP
_TEXT	ENDS
PUBLIC	?debugMsg@CBaseBoneSetup@@UAAXPADZZ		; CBaseBoneSetup::debugMsg
PUBLIC	?GetAnimSourceData@CBaseBoneSetup@@UAEPAUmstudioanim_t@@PAUmstudioseqdesc_t@@@Z ; CBaseBoneSetup::GetAnimSourceData
PUBLIC	??_7CBaseBoneSetup@@6B@				; CBaseBoneSetup::`vftable'
PUBLIC	??0CStudioBoneSetup@@QAE@XZ			; CStudioBoneSetup::CStudioBoneSetup
PUBLIC	?debugLine@CStudioBoneSetup@@UAEXABVVector@@0HHH_NM@Z ; CStudioBoneSetup::debugLine
;	COMDAT ??_7CBaseBoneSetup@@6B@
CONST	SEGMENT
??_7CBaseBoneSetup@@6B@ DD FLAT:?debugMsg@CBaseBoneSetup@@UAAXPADZZ ; CBaseBoneSetup::`vftable'
	DD	FLAT:?GetAnimSourceData@CBaseBoneSetup@@UAEPAUmstudioanim_t@@PAUmstudioseqdesc_t@@@Z
	DD	FLAT:?debugLine@CStudioBoneSetup@@UAEXABVVector@@0HHH_NM@Z
CONST	ENDS
;	COMDAT ??0CBaseBoneSetup@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CBaseBoneSetup@@QAE@XZ PROC NEAR			; CBaseBoneSetup::CBaseBoneSetup, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CStudioBoneSetup@@QAE@XZ		; CStudioBoneSetup::CStudioBoneSetup
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CBaseBoneSetup@@6B@ ; CBaseBoneSetup::`vftable'
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseBoneSetup@@QAE@XZ ENDP				; CBaseBoneSetup::CBaseBoneSetup
_TEXT	ENDS
PUBLIC	?InitBoneWeights@CStudioBoneSetup@@AAEXXZ	; CStudioBoneSetup::InitBoneWeights
PUBLIC	?debugMsg@CStudioBoneSetup@@UAAXPADZZ		; CStudioBoneSetup::debugMsg
PUBLIC	??_7CStudioBoneSetup@@6B@			; CStudioBoneSetup::`vftable'
EXTRN	?GetAnimSourceData@CStudioBoneSetup@@UAEPAUmstudioanim_t@@PAUmstudioseqdesc_t@@@Z:NEAR ; CStudioBoneSetup::GetAnimSourceData
EXTRN	??0matrix3x4@@QAE@XZ:NEAR			; matrix3x4::matrix3x4
;	COMDAT ??_7CStudioBoneSetup@@6B@
; File z:\xashxtsrc\game_shared\bs_defs.h
CONST	SEGMENT
??_7CStudioBoneSetup@@6B@ DD FLAT:?debugMsg@CStudioBoneSetup@@UAAXPADZZ ; CStudioBoneSetup::`vftable'
	DD	FLAT:?GetAnimSourceData@CStudioBoneSetup@@UAEPAUmstudioanim_t@@PAUmstudioseqdesc_t@@@Z
	DD	FLAT:?debugLine@CStudioBoneSetup@@UAEXABVVector@@0HHH_NM@Z
CONST	ENDS
;	COMDAT ??0CStudioBoneSetup@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CStudioBoneSetup@@QAE@XZ PROC NEAR			; CStudioBoneSetup::CStudioBoneSetup, COMDAT

; 33   : 	CStudioBoneSetup()

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET FLAT:??0matrix3x4@@QAE@XZ	; matrix3x4::matrix3x4
	push	128					; 00000080H
	push	48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 536				; 00000218H
	push	eax
	call	??_H@YGXPAXIHP6EX0@Z@Z			; `vector constructor iterator'
	push	OFFSET FLAT:??0matrix3x4@@QAE@XZ	; matrix3x4::matrix3x4
	push	128					; 00000080H
	push	48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 6680				; 00001a18H
	push	ecx
	call	??_H@YGXPAXIHP6EX0@Z@Z			; `vector constructor iterator'
	push	OFFSET FLAT:??0matrix3x4@@QAE@XZ	; matrix3x4::matrix3x4
	push	128					; 00000080H
	push	48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12824				; 00003218H
	push	edx
	call	??_H@YGXPAXIHP6EX0@Z@Z			; `vector constructor iterator'
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CStudioBoneSetup@@6B@ ; CStudioBoneSetup::`vftable'

; 34   : 	{
; 35   : 		InitBoneWeights();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitBoneWeights@CStudioBoneSetup@@AAEXXZ ; CStudioBoneSetup::InitBoneWeights

; 36   : 		m_pStudioHeader = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+18968], 0

; 37   : 		m_flBoneControllers = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+520], 0

; 38   : 		m_flPoseParams = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+524], 0

; 39   : 		m_iBoneMask = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+528], 0

; 40   : 	} 

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CStudioBoneSetup@@QAE@XZ ENDP			; CStudioBoneSetup::CStudioBoneSetup
_TEXT	ENDS
EXTRN	__fltused:NEAR
;	COMDAT ?InitBoneWeights@CStudioBoneSetup@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4
_i$ = -8
?InitBoneWeights@CStudioBoneSetup@@AAEXXZ PROC NEAR	; CStudioBoneSetup::InitBoneWeights, COMDAT

; 290  : 	void InitBoneWeights( void ) { for( int i = 0; i < MAXSTUDIOBONES; i++ ) m_flDefaultBoneWeight[i] = 1.0f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L34589
$L34590:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L34589:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jge	SHORT $L34591
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+4], 1065353216	; 3f800000H
	jmp	SHORT $L34590
$L34591:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitBoneWeights@CStudioBoneSetup@@AAEXXZ ENDP		; CStudioBoneSetup::InitBoneWeights
_TEXT	ENDS
;	COMDAT ?debugMsg@CStudioBoneSetup@@UAAXPADZZ
_TEXT	SEGMENT
?debugMsg@CStudioBoneSetup@@UAAXPADZZ PROC NEAR		; CStudioBoneSetup::debugMsg, COMDAT

; 337  : 	virtual void debugMsg( char *szFmt, ... ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?debugMsg@CStudioBoneSetup@@UAAXPADZZ ENDP		; CStudioBoneSetup::debugMsg
_TEXT	ENDS
;	COMDAT ?debugLine@CStudioBoneSetup@@UAEXABVVector@@0HHH_NM@Z
_TEXT	SEGMENT
_this$ = -4
?debugLine@CStudioBoneSetup@@UAEXABVVector@@0HHH_NM@Z PROC NEAR ; CStudioBoneSetup::debugLine, COMDAT

; 339  : 	virtual void debugLine( const Vector& origin, const Vector& dest, int r, int g, int b, bool noDepthTest = false, float duration = 0.0f ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?debugLine@CStudioBoneSetup@@UAEXABVVector@@0HHH_NM@Z ENDP ; CStudioBoneSetup::debugLine
_TEXT	ENDS
PUBLIC	??_C@_02DILL@?$CFs?$AA@				; `string'
EXTRN	?Q_vsnprintf@@YAHPADIPBD0@Z:NEAR		; Q_vsnprintf
EXTRN	?g_engfuncs@@3Uenginefuncs_s@@A:BYTE		; g_engfuncs
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
; File z:\xashxtsrc\server\monsters\animation.cpp
CONST	SEGMENT
??_C@_02DILL@?$CFs?$AA@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ?debugMsg@CBaseBoneSetup@@UAAXPADZZ
_TEXT	SEGMENT
_szFmt$ = 12
_buffer$ = -2048
_args$ = -2052
?debugMsg@CBaseBoneSetup@@UAAXPADZZ PROC NEAR		; CBaseBoneSetup::debugMsg, COMDAT

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 2116				; 00000844H
	push	ebx
	push	esi
	push	edi

; 49   : 		char	buffer[2048];	// must support > 1k messages
; 50   : 		va_list	args;
; 51   : 
; 52   : 		va_start( args, szFmt );

	lea	eax, DWORD PTR _szFmt$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 53   : 		Q_vsnprintf( buffer, 2048, szFmt, args );

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szFmt$[ebp]
	push	edx
	push	2048					; 00000800H
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?Q_vsnprintf@@YAHPADIPBD0@Z		; Q_vsnprintf
	add	esp, 16					; 00000010H

; 54   : 		va_end( args );

	mov	DWORD PTR _args$[ebp], 0

; 55   : 
; 56   : 		ALERT( at_console, "%s", buffer );

	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_02DILL@?$CFs?$AA@	; `string'
	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 12					; 0000000cH

; 57   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?debugMsg@CBaseBoneSetup@@UAAXPADZZ ENDP		; CBaseBoneSetup::debugMsg
_TEXT	ENDS
PUBLIC	??_C@_0CL@EHCN@z?3?2xashxtsrc?2server?2monsters?2ani@ ; `string'
PUBLIC	??_C@_0M@NLKH@m_pSubModel?$AA@			; `string'
PUBLIC	??_C@_0O@FCKL@?$CFs?1?$CFs?$CFi?$CFi?4mdl?$AA@	; `string'
PUBLIC	??_C@_0N@DENN@loading?3?5?$CFs?6?$AA@		; `string'
EXTRN	?Q_snprintf@@YAHPADIPBDZZ:NEAR			; Q_snprintf
EXTRN	?COM_FileBase@@YAXPBDPAD@Z:NEAR			; COM_FileBase
EXTRN	?COM_ExtractFilePath@@YAXPBDPAD@Z:NEAR		; COM_ExtractFilePath
EXTRN	__assert:NEAR
;	COMDAT ??_C@_0CL@EHCN@z?3?2xashxtsrc?2server?2monsters?2ani@
; File z:\xashxtsrc\server\monsters\animation.cpp
CONST	SEGMENT
??_C@_0CL@EHCN@z?3?2xashxtsrc?2server?2monsters?2ani@ DB 'z:\xashxtsrc\se'
	DB	'rver\monsters\animation.cpp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NLKH@m_pSubModel?$AA@
CONST	SEGMENT
??_C@_0M@NLKH@m_pSubModel?$AA@ DB 'm_pSubModel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FCKL@?$CFs?1?$CFs?$CFi?$CFi?4mdl?$AA@
CONST	SEGMENT
??_C@_0O@FCKL@?$CFs?1?$CFs?$CFi?$CFi?4mdl?$AA@ DB '%s/%s%i%i.mdl', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DENN@loading?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0N@DENN@loading?3?5?$CFs?6?$AA@ DB 'loading: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?GetAnimSourceData@CBaseBoneSetup@@UAEPAUmstudioanim_t@@PAUmstudioseqdesc_t@@@Z
_TEXT	SEGMENT
_pseqdesc$ = 8
_this$ = -4
_pseqgroup$ = -8
_paSequences$ = -12
_filepath$37963 = -140
_modelpath$37964 = -268
_modelname$37965 = -332
?GetAnimSourceData@CBaseBoneSetup@@UAEPAUmstudioanim_t@@PAUmstudioseqdesc_t@@@Z PROC NEAR ; CBaseBoneSetup::GetAnimSourceData, COMDAT

; 60   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 		mstudioseqgroup_t *pseqgroup;
; 62   : 		cache_user_t *paSequences;
; 63   : 
; 64   : 		pseqgroup = (mstudioseqgroup_t *)((byte *)m_pStudioHeader + m_pStudioHeader->seqgroupindex) + pseqdesc->seqgroup;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+18968]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+18968]
	add	eax, DWORD PTR [ecx+176]
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	imul	edx, 104				; 00000068H
	add	eax, edx
	mov	DWORD PTR _pseqgroup$[ebp], eax

; 65   : 
; 66   : 		if( pseqdesc->seqgroup == 0 )

	mov	eax, DWORD PTR _pseqdesc$[ebp]
	cmp	DWORD PTR [eax+156], 0
	jne	SHORT $L37950

; 67   : 			return (mstudioanim_t *)((byte *)m_pStudioHeader + pseqdesc->animindex);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+18968]
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	add	eax, DWORD PTR [edx+124]
	jmp	$L37945
$L37950:

; 68   : 
; 69   : 		assert( m_pSubModel ); // assume model is set

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+18972], 0
	jne	SHORT $L38834
	push	69					; 00000045H
	push	OFFSET FLAT:??_C@_0CL@EHCN@z?3?2xashxtsrc?2server?2monsters?2ani@ ; `string'
	push	OFFSET FLAT:??_C@_0M@NLKH@m_pSubModel?$AA@ ; `string'
	call	__assert
	add	esp, 12					; 0000000cH
$L38834:

; 70   : 
; 71   : 		paSequences = (cache_user_t *)m_pSubModel->submodels;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+18972]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _paSequences$[ebp], ecx

; 72   : 
; 73   : 		if( paSequences == NULL )

	cmp	DWORD PTR _paSequences$[ebp], 0
	jne	SHORT $L37957

; 75   : 			paSequences = (cache_user_t *)IEngineStudio.Mem_Calloc( MAXSTUDIOGROUPS, sizeof( cache_user_t ));

	push	4
	push	16					; 00000010H
	call	DWORD PTR ?IEngineStudio@@3Userver_studio_api_s@@A
	add	esp, 8
	mov	DWORD PTR _paSequences$[ebp], eax

; 76   : 			m_pSubModel->submodels = (dmodel_t *)paSequences;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+18972]
	mov	ecx, DWORD PTR _paSequences$[ebp]
	mov	DWORD PTR [eax+124], ecx
$L37957:

; 78   : 
; 79   : 		// check for already loaded
; 80   : 		if( !IEngineStudio.Cache_Check(( struct cache_user_s *)&(paSequences[pseqdesc->seqgroup] )))

	mov	edx, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR _paSequences$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR ?IEngineStudio@@3Userver_studio_api_s@@A+4
	add	esp, 4
	test	eax, eax
	jne	$L37962

; 82   : 			char filepath[128], modelpath[128], modelname[64];
; 83   : 
; 84   : 			COM_FileBase( m_pSubModel->name, modelname );

	lea	eax, DWORD PTR _modelname$37965[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+18972]
	push	edx
	call	?COM_FileBase@@YAXPBDPAD@Z		; COM_FileBase
	add	esp, 8

; 85   : 			COM_ExtractFilePath( m_pSubModel->name, modelpath );

	lea	eax, DWORD PTR _modelpath$37964[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+18972]
	push	edx
	call	?COM_ExtractFilePath@@YAXPBDPAD@Z	; COM_ExtractFilePath
	add	esp, 8

; 86   : 
; 87   : 			// NOTE: here we build real sub-animation filename because stupid user may rename model without recompile
; 88   : 			Q_snprintf( filepath, sizeof( filepath ), "%s/%s%i%i.mdl", modelpath, modelname, pseqdesc->seqgroup / 10, pseqdesc->seqgroup % 10 );

	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR [eax+156]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	push	edx
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR [edx+156]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	push	eax
	lea	edx, DWORD PTR _modelname$37965[ebp]
	push	edx
	lea	eax, DWORD PTR _modelpath$37964[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0O@FCKL@?$CFs?1?$CFs?$CFi?$CFi?4mdl?$AA@ ; `string'
	push	128					; 00000080H
	lea	ecx, DWORD PTR _filepath$37963[ebp]
	push	ecx
	call	?Q_snprintf@@YAHPADIPBDZZ		; Q_snprintf
	add	esp, 28					; 0000001cH

; 89   : 
; 90   : 			ALERT( at_console, "loading: %s\n", filepath );

	lea	edx, DWORD PTR _filepath$37963[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0N@DENN@loading?3?5?$CFs?6?$AA@ ; `string'
	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 12					; 0000000cH

; 91   : 			IEngineStudio.LoadCacheFile( filepath, (struct cache_user_s *)&paSequences[pseqdesc->seqgroup] );			

	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _paSequences$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	lea	ecx, DWORD PTR _filepath$37963[ebp]
	push	ecx
	call	DWORD PTR ?IEngineStudio@@3Userver_studio_api_s@@A+8
	add	esp, 8
$L37962:

; 93   : 
; 94   : 		return (mstudioanim_t *)((byte *)paSequences[pseqdesc->seqgroup].data + pseqdesc->animindex);

	mov	edx, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR _paSequences$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	add	eax, DWORD PTR [edx+124]
$L37945:

; 95   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAnimSourceData@CBaseBoneSetup@@UAEPAUmstudioanim_t@@PAUmstudioseqdesc_t@@@Z ENDP ; CBaseBoneSetup::GetAnimSourceData
_TEXT	ENDS
PUBLIC	_Server_GetBlendingInterface
PUBLIC	??_C@_0BP@MKJ@Server_GetBlendingInterface?$CI?$CJ?6?$AA@ ; `string'
EXTRN	_memcpy:NEAR
;	COMDAT ??_C@_0BP@MKJ@Server_GetBlendingInterface?$CI?$CJ?6?$AA@
; File z:\xashxtsrc\server\monsters\animation.cpp
CONST	SEGMENT
??_C@_0BP@MKJ@Server_GetBlendingInterface?$CI?$CJ?6?$AA@ DB 'Server_GetBl'
	DB	'endingInterface()', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT _Server_GetBlendingInterface
_TEXT	SEGMENT
_version$ = 8
_pstudio$ = 16
_Server_GetBlendingInterface PROC NEAR			; COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 108  : 	if( version != SV_BLENDING_INTERFACE_VERSION  )

	cmp	DWORD PTR _version$[ebp], 1
	je	SHORT $L37993

; 109  : 		return 0;

	xor	eax, eax
	jmp	SHORT $L37992
$L37993:

; 110  : 
; 111  : 	ALERT( at_aiconsole, "Server_GetBlendingInterface()\n" );

	push	OFFSET FLAT:??_C@_0BP@MKJ@Server_GetBlendingInterface?$CI?$CJ?6?$AA@ ; `string'
	push	2
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 8

; 112  : 
; 113  : 	// Copy in engine helper functions
; 114  : 	memcpy( &IEngineStudio, pstudio, sizeof( IEngineStudio ));

	push	16					; 00000010H
	mov	eax, DWORD PTR _pstudio$[ebp]
	push	eax
	push	OFFSET FLAT:?IEngineStudio@@3Userver_studio_api_s@@A ; IEngineStudio
	call	_memcpy
	add	esp, 12					; 0000000cH

; 115  : 
; 116  : 	// Success
; 117  : 	return 1;

	mov	eax, 1
$L37992:

; 118  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Server_GetBlendingInterface ENDP
_TEXT	ENDS
PUBLIC	?SetupModelBones@@YAXPAUstudiohdr_t@@@Z		; SetupModelBones
PUBLIC	?SetStudioPointers@CStudioBoneSetup@@QAEXPAUstudiohdr_t@@PBM@Z ; CStudioBoneSetup::SetStudioPointers
;	COMDAT ?SetupModelBones@@YAXPAUstudiohdr_t@@@Z
_TEXT	SEGMENT
_header$ = 8
?SetupModelBones@@YAXPAUstudiohdr_t@@@Z PROC NEAR	; SetupModelBones, COMDAT

; 121  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 122  : 	g_boneSetup.SetStudioPointers( header, m_poseparameter );

	push	OFFSET FLAT:?m_poseparameter@@3PAMA	; m_poseparameter
	mov	eax, DWORD PTR _header$[ebp]
	push	eax
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?SetStudioPointers@CStudioBoneSetup@@QAEXPAUstudiohdr_t@@PBM@Z ; CStudioBoneSetup::SetStudioPointers

; 123  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetupModelBones@@YAXPAUstudiohdr_t@@@Z ENDP		; SetupModelBones
_TEXT	ENDS
;	COMDAT ?SetStudioPointers@CStudioBoneSetup@@QAEXPAUstudiohdr_t@@PBM@Z
_TEXT	SEGMENT
_pStudioHdr$ = 8
_pPoseParams$ = 12
_this$ = -4
?SetStudioPointers@CStudioBoneSetup@@QAEXPAUstudiohdr_t@@PBM@Z PROC NEAR ; CStudioBoneSetup::SetStudioPointers, COMDAT

; 347  : 	void SetStudioPointers( studiohdr_t *pStudioHdr, const float *pPoseParams ) { m_pStudioHeader = pStudioHdr; m_flPoseParams = pPoseParams; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pStudioHdr$[ebp]
	mov	DWORD PTR [eax+18968], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pPoseParams$[ebp]
	mov	DWORD PTR [edx+524], eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetStudioPointers@CStudioBoneSetup@@QAEXPAUstudiohdr_t@@PBM@Z ENDP ; CStudioBoneSetup::SetStudioPointers
_TEXT	ENDS
PUBLIC	?CalcDefaultPoseParameters@@YAXPAXPAM@Z		; CalcDefaultPoseParameters
EXTRN	?CalcDefaultPoseParameters@CStudioBoneSetup@@QAEXQAM@Z:NEAR ; CStudioBoneSetup::CalcDefaultPoseParameters
;	COMDAT ?CalcDefaultPoseParameters@@YAXPAXPAM@Z
_TEXT	SEGMENT
_pmodel$ = 8
_poseparams$ = 12
_pstudiohdr$ = -4
?CalcDefaultPoseParameters@@YAXPAXPAM@Z PROC NEAR	; CalcDefaultPoseParameters, COMDAT

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 127  : 	studiohdr_t *pstudiohdr;
; 128  : 
; 129  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38004

; 130  : 		return;

	jmp	SHORT $L38001
$L38004:

; 131  : 
; 132  : 	g_boneSetup.SetStudioPointers( pstudiohdr, poseparams );

	mov	ecx, DWORD PTR _poseparams$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	push	edx
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?SetStudioPointers@CStudioBoneSetup@@QAEXPAUstudiohdr_t@@PBM@Z ; CStudioBoneSetup::SetStudioPointers

; 133  : 	g_boneSetup.CalcDefaultPoseParameters( poseparams );

	mov	eax, DWORD PTR _poseparams$[ebp]
	push	eax
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?CalcDefaultPoseParameters@CStudioBoneSetup@@QAEXQAM@Z ; CStudioBoneSetup::CalcDefaultPoseParameters
$L38001:

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CalcDefaultPoseParameters@@YAXPAXPAM@Z ENDP		; CalcDefaultPoseParameters
_TEXT	ENDS
PUBLIC	?SetBaseModel@CBaseBoneSetup@@QAEXPAUmodel_s@@@Z ; CBaseBoneSetup::SetBaseModel
PUBLIC	?GetBaseBoneSetup@@YAPAVCStudioBoneSetup@@HPAM@Z ; GetBaseBoneSetup
EXTRN	?g_physfuncs@@3Userver_physics_api_s@@A:BYTE	; g_physfuncs
;	COMDAT ?GetBaseBoneSetup@@YAPAVCStudioBoneSetup@@HPAM@Z
_TEXT	SEGMENT
_modelindex$ = 8
_poseparams$ = 12
_pstudiohdr$ = -4
_mod$ = -8
?GetBaseBoneSetup@@YAPAVCStudioBoneSetup@@HPAM@Z PROC NEAR ; GetBaseBoneSetup, COMDAT

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 138  : 	studiohdr_t *pstudiohdr;
; 139  : 
; 140  : 	model_t *mod = (model_t *)MODEL_HANDLE( modelindex );

	mov	eax, DWORD PTR _modelindex$[ebp]
	push	eax
	call	DWORD PTR ?g_physfuncs@@3Userver_physics_api_s@@A+12
	add	esp, 4
	mov	DWORD PTR _mod$[ebp], eax

; 141  : 
; 142  : 	if( !mod || mod->type != mod_studio )

	cmp	DWORD PTR _mod$[ebp], 0
	je	SHORT $L38013
	mov	ecx, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [ecx+68], 3
	je	SHORT $L38012
$L38013:

; 143  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L38008
$L38012:

; 144  : 
; 145  : 	if( !( pstudiohdr = (studiohdr_t *)mod->cache.data ))

	mov	edx, DWORD PTR _mod$[ebp]
	mov	eax, DWORD PTR [edx+388]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38015

; 146  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L38008
$L38015:

; 147  : 
; 148  : 	g_boneSetup.SetBaseModel( mod );

	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?SetBaseModel@CBaseBoneSetup@@QAEXPAUmodel_s@@@Z ; CBaseBoneSetup::SetBaseModel

; 149  : 	g_boneSetup.SetStudioPointers( pstudiohdr, poseparams );

	mov	edx, DWORD PTR _poseparams$[ebp]
	push	edx
	mov	eax, DWORD PTR _pstudiohdr$[ebp]
	push	eax
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?SetStudioPointers@CStudioBoneSetup@@QAEXPAUstudiohdr_t@@PBM@Z ; CStudioBoneSetup::SetStudioPointers

; 150  : 
; 151  : 	return &g_boneSetup;

	mov	eax, OFFSET FLAT:_g_boneSetup
$L38008:

; 152  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseBoneSetup@@YAPAVCStudioBoneSetup@@HPAM@Z ENDP	; GetBaseBoneSetup
_TEXT	ENDS
;	COMDAT ?SetBaseModel@CBaseBoneSetup@@QAEXPAUmodel_s@@@Z
_TEXT	SEGMENT
_mod$ = 8
_this$ = -4
?SetBaseModel@CBaseBoneSetup@@QAEXPAUmodel_s@@@Z PROC NEAR ; CBaseBoneSetup::SetBaseModel, COMDAT

; 97   : 	void SetBaseModel( model_t *mod ) { m_pSubModel = mod; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mod$[ebp]
	mov	DWORD PTR [eax+18972], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBaseModel@CBaseBoneSetup@@QAEXPAUmodel_s@@@Z ENDP	; CBaseBoneSetup::SetBaseModel
_TEXT	ENDS
PUBLIC	?LookupPoseParameter@@YAHPAXPBDPAM@Z		; LookupPoseParameter
PUBLIC	?pPoseParameter@CStudioBoneSetup@@QAEPBUmstudioposeparamdesc_t@@H@Z ; CStudioBoneSetup::pPoseParameter
PUBLIC	?CountPoseParameters@CStudioBoneSetup@@QAEHXZ	; CStudioBoneSetup::CountPoseParameters
EXTRN	?Q_strnicmp@@YAHPBD0H@Z:NEAR			; Q_strnicmp
;	COMDAT ?LookupPoseParameter@@YAHPAXPBDPAM@Z
_TEXT	SEGMENT
_pmodel$ = 8
_szName$ = 12
_poseparams$ = 16
_pstudiohdr$ = -4
_i$ = -8
?LookupPoseParameter@@YAHPAXPBDPAM@Z PROC NEAR		; LookupPoseParameter, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 158  : 	studiohdr_t *pstudiohdr;
; 159  : 
; 160  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38023

; 161  : 		return -1;

	or	eax, -1
	jmp	SHORT $L38020
$L38023:

; 162  : 
; 163  : 	g_boneSetup.SetStudioPointers( pstudiohdr, poseparams );

	mov	ecx, DWORD PTR _poseparams$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	push	edx
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?SetStudioPointers@CStudioBoneSetup@@QAEXPAUstudiohdr_t@@PBM@Z ; CStudioBoneSetup::SetStudioPointers

; 164  : 
; 165  : 	for( int i = 0; i < g_boneSetup.CountPoseParameters(); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L38025
$L38026:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L38025:
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?CountPoseParameters@CStudioBoneSetup@@QAEHXZ ; CStudioBoneSetup::CountPoseParameters
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L38027

; 167  : 		if( !Q_stricmp( g_boneSetup.pPoseParameter( i )->name, szName ))

	push	99999					; 0001869fH
	mov	ecx, DWORD PTR _szName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?pPoseParameter@CStudioBoneSetup@@QAEPBUmstudioposeparamdesc_t@@H@Z ; CStudioBoneSetup::pPoseParameter
	push	eax
	call	?Q_strnicmp@@YAHPBD0H@Z			; Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L38028

; 168  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $L38020
$L38028:

; 169  : 	}

	jmp	SHORT $L38026
$L38027:

; 170  : 
; 171  : 	return -1; // Error

	or	eax, -1
$L38020:

; 172  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LookupPoseParameter@@YAHPAXPBDPAM@Z ENDP		; LookupPoseParameter
_TEXT	ENDS
;	COMDAT ?pPoseParameter@CStudioBoneSetup@@QAEPBUmstudioposeparamdesc_t@@H@Z
_TEXT	SEGMENT
_iPose$ = 8
_this$ = -4
_phdr2$ = -8
?pPoseParameter@CStudioBoneSetup@@QAEPBUmstudioposeparamdesc_t@@H@Z PROC NEAR ; CStudioBoneSetup::pPoseParameter, COMDAT

; 135  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 136  : 		studiohdr2_t *phdr2 = NULL;

	mov	DWORD PTR _phdr2$[ebp], 0

; 137  : 
; 138  : 		if( m_pStudioHeader->studiohdr2index > 0 && m_pStudioHeader->studiohdr2index < m_pStudioHeader->length )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+18968]
	cmp	DWORD PTR [ecx+220], 0
	jle	SHORT $L34492
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+18968]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+18968]
	mov	eax, DWORD PTR [eax+220]
	cmp	eax, DWORD PTR [edx+72]
	jge	SHORT $L34492

; 139  : 			phdr2 = (studiohdr2_t *)((byte *)m_pStudioHeader + m_pStudioHeader->studiohdr2index);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+18968]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+18968]
	add	ecx, DWORD PTR [edx+220]
	mov	DWORD PTR _phdr2$[ebp], ecx
$L34492:

; 140  : 
; 141  : 		if( phdr2 && phdr2->numposeparameters > iPose )

	cmp	DWORD PTR _phdr2$[ebp], 0
	je	SHORT $L34495
	mov	edx, DWORD PTR _phdr2$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _iPose$[ebp]
	jle	SHORT $L34495

; 142  : 			return (mstudioposeparamdesc_t *)((byte *)m_pStudioHeader + phdr2->poseparamindex) + iPose;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+18968]
	mov	edx, DWORD PTR _phdr2$[ebp]
	add	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _iPose$[ebp]
	imul	ecx, 48					; 00000030H
	add	eax, ecx
	jmp	SHORT $L34490
$L34495:

; 143  : 
; 144  : 		return NULL; // poseparams is missed

	xor	eax, eax
$L34490:

; 145  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?pPoseParameter@CStudioBoneSetup@@QAEPBUmstudioposeparamdesc_t@@H@Z ENDP ; CStudioBoneSetup::pPoseParameter
_TEXT	ENDS
;	COMDAT ?CountPoseParameters@CStudioBoneSetup@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
_phdr2$ = -8
?CountPoseParameters@CStudioBoneSetup@@QAEHXZ PROC NEAR	; CStudioBoneSetup::CountPoseParameters, COMDAT

; 210  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 		studiohdr2_t *phdr2 = NULL;

	mov	DWORD PTR _phdr2$[ebp], 0

; 212  : 
; 213  : 		if( m_pStudioHeader->studiohdr2index > 0 && m_pStudioHeader->studiohdr2index < m_pStudioHeader->length )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+18968]
	cmp	DWORD PTR [ecx+220], 0
	jle	SHORT $L34543
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+18968]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+18968]
	mov	eax, DWORD PTR [eax+220]
	cmp	eax, DWORD PTR [edx+72]
	jge	SHORT $L34543

; 214  : 			phdr2 = (studiohdr2_t *)((byte *)m_pStudioHeader + m_pStudioHeader->studiohdr2index);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+18968]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+18968]
	add	ecx, DWORD PTR [edx+220]
	mov	DWORD PTR _phdr2$[ebp], ecx
$L34543:

; 215  : 
; 216  : 		if( phdr2 && phdr2->numposeparameters > 0 )

	cmp	DWORD PTR _phdr2$[ebp], 0
	je	SHORT $L34546
	mov	edx, DWORD PTR _phdr2$[ebp]
	cmp	DWORD PTR [edx], 0
	jle	SHORT $L34546

; 217  : 			return phdr2->numposeparameters;

	mov	eax, DWORD PTR _phdr2$[ebp]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $L34541
$L34546:

; 218  : 		return 0; // poseparams is missed

	xor	eax, eax
$L34541:

; 219  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CountPoseParameters@CStudioBoneSetup@@QAEHXZ ENDP	; CStudioBoneSetup::CountPoseParameters
_TEXT	ENDS
PUBLIC	?SetPoseParameter@@YAXPAXHMPAM@Z		; SetPoseParameter
EXTRN	?SetPoseParameter@CStudioBoneSetup@@QAEMHMAAM@Z:NEAR ; CStudioBoneSetup::SetPoseParameter
;	COMDAT ?SetPoseParameter@@YAXPAXHMPAM@Z
_TEXT	SEGMENT
_pmodel$ = 8
_iParameter$ = 12
_flValue$ = 16
_poseparams$ = 20
_pstudiohdr$ = -4
?SetPoseParameter@@YAXPAXHMPAM@Z PROC NEAR		; SetPoseParameter, COMDAT

; 175  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 176  : 	studiohdr_t *pstudiohdr;
; 177  : 
; 178  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38037

; 179  : 		return;

	jmp	SHORT $L38034
$L38037:

; 180  : 
; 181  : 	g_boneSetup.SetStudioPointers( pstudiohdr, poseparams );

	mov	ecx, DWORD PTR _poseparams$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	push	edx
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?SetStudioPointers@CStudioBoneSetup@@QAEXPAUstudiohdr_t@@PBM@Z ; CStudioBoneSetup::SetStudioPointers

; 182  : 	g_boneSetup.SetPoseParameter( iParameter, flValue, poseparams[iParameter] );

	mov	eax, DWORD PTR _iParameter$[ebp]
	mov	ecx, DWORD PTR _poseparams$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _flValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iParameter$[ebp]
	push	ecx
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?SetPoseParameter@CStudioBoneSetup@@QAEMHMAAM@Z ; CStudioBoneSetup::SetPoseParameter
	fstp	ST(0)
$L38034:

; 183  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetPoseParameter@@YAXPAXHMPAM@Z ENDP			; SetPoseParameter
_TEXT	ENDS
PUBLIC	?GetPoseParameter@@YAMPAXHPAM@Z			; GetPoseParameter
PUBLIC	__real@4@00000000000000000000
EXTRN	?GetPoseParameter@CStudioBoneSetup@@QAEMHM@Z:NEAR ; CStudioBoneSetup::GetPoseParameter
;	COMDAT __real@4@00000000000000000000
; File z:\xashxtsrc\server\monsters\animation.cpp
CONST	SEGMENT
__real@4@00000000000000000000 DD 000000000r	; 0
CONST	ENDS
;	COMDAT ?GetPoseParameter@@YAMPAXHPAM@Z
_TEXT	SEGMENT
_pmodel$ = 8
_iParameter$ = 12
_poseparams$ = 16
_pstudiohdr$ = -4
?GetPoseParameter@@YAMPAXHPAM@Z PROC NEAR		; GetPoseParameter, COMDAT

; 186  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 187  : 	studiohdr_t *pstudiohdr;
; 188  : 
; 189  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38045

; 190  : 		return 0.0f;

	fld	DWORD PTR __real@4@00000000000000000000
	jmp	SHORT $L38042
$L38045:

; 191  : 
; 192  : 	g_boneSetup.SetStudioPointers( pstudiohdr, poseparams );

	mov	ecx, DWORD PTR _poseparams$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	push	edx
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?SetStudioPointers@CStudioBoneSetup@@QAEXPAUstudiohdr_t@@PBM@Z ; CStudioBoneSetup::SetStudioPointers

; 193  : 	return g_boneSetup.GetPoseParameter( iParameter, poseparams[iParameter] );

	mov	eax, DWORD PTR _iParameter$[ebp]
	mov	ecx, DWORD PTR _poseparams$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _iParameter$[ebp]
	push	eax
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?GetPoseParameter@CStudioBoneSetup@@QAEMHM@Z ; CStudioBoneSetup::GetPoseParameter
$L38042:

; 194  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPoseParameter@@YAMPAXHPAM@Z ENDP			; GetPoseParameter
_TEXT	ENDS
PUBLIC	?FindHitboxSetByName@@YAHPAXPBD@Z		; FindHitboxSetByName
PUBLIC	?pHitboxSet@CStudioBoneSetup@@QBEPAUmstudiohitboxset_t@@H@Z ; CStudioBoneSetup::pHitboxSet
PUBLIC	?GetNumHitboxSets@CStudioBoneSetup@@QAEHXZ	; CStudioBoneSetup::GetNumHitboxSets
;	COMDAT ?FindHitboxSetByName@@YAHPAXPBD@Z
_TEXT	SEGMENT
_pmodel$ = 8
_name$ = 12
_pstudiohdr$ = -4
_i$ = -8
_set$38057 = -12
?FindHitboxSetByName@@YAHPAXPBD@Z PROC NEAR		; FindHitboxSetByName, COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 198  : 	studiohdr_t *pstudiohdr;
; 199  : 
; 200  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38052

; 201  : 		return -1;

	or	eax, -1
	jmp	SHORT $L38049
$L38052:

; 202  : 
; 203  : 	SetupModelBones( pstudiohdr );

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	push	ecx
	call	?SetupModelBones@@YAXPAUstudiohdr_t@@@Z	; SetupModelBones
	add	esp, 4

; 204  : 
; 205  : 	for( int i = 0; i < g_boneSetup.GetNumHitboxSets(); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L38054
$L38055:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$L38054:
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?GetNumHitboxSets@CStudioBoneSetup@@QAEHXZ ; CStudioBoneSetup::GetNumHitboxSets
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L38056

; 207  : 		mstudiohitboxset_t *set = g_boneSetup.pHitboxSet( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?pHitboxSet@CStudioBoneSetup@@QBEPAUmstudiohitboxset_t@@H@Z ; CStudioBoneSetup::pHitboxSet
	mov	DWORD PTR _set$38057[ebp], eax

; 208  : 
; 209  : 		if( !set ) continue;

	cmp	DWORD PTR _set$38057[ebp], 0
	jne	SHORT $L38058
	jmp	SHORT $L38055
$L38058:

; 210  : 
; 211  : 		if( !Q_stricmp( set->name, name ))

	push	99999					; 0001869fH
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$38057[ebp]
	push	edx
	call	?Q_strnicmp@@YAHPBD0H@Z			; Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L38059

; 212  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $L38049
$L38059:

; 213  : 	}

	jmp	SHORT $L38055
$L38056:

; 214  : 
; 215  : 	return -1;

	or	eax, -1
$L38049:

; 216  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FindHitboxSetByName@@YAHPAXPBD@Z ENDP			; FindHitboxSetByName
_TEXT	ENDS
;	COMDAT ?pHitboxSet@CStudioBoneSetup@@QBEPAUmstudiohitboxset_t@@H@Z
_TEXT	SEGMENT
_i$ = 8
_this$ = -4
_phdr2$ = -8
?pHitboxSet@CStudioBoneSetup@@QBEPAUmstudiohitboxset_t@@H@Z PROC NEAR ; CStudioBoneSetup::pHitboxSet, COMDAT

; 149  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 150  : 		studiohdr2_t *phdr2 = NULL;

	mov	DWORD PTR _phdr2$[ebp], 0

; 151  : 
; 152  : 		if( m_pStudioHeader->studiohdr2index > 0 && m_pStudioHeader->studiohdr2index < m_pStudioHeader->length )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+18968]
	cmp	DWORD PTR [ecx+220], 0
	jle	SHORT $L34501
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+18968]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+18968]
	mov	eax, DWORD PTR [eax+220]
	cmp	eax, DWORD PTR [edx+72]
	jge	SHORT $L34501

; 153  : 			phdr2 = (studiohdr2_t *)((byte *)m_pStudioHeader + m_pStudioHeader->studiohdr2index);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+18968]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+18968]
	add	ecx, DWORD PTR [edx+220]
	mov	DWORD PTR _phdr2$[ebp], ecx
$L34501:

; 154  : 
; 155  : 		if( phdr2 && phdr2->numhitboxsets > i )

	cmp	DWORD PTR _phdr2$[ebp], 0
	je	SHORT $L34504
	mov	edx, DWORD PTR _phdr2$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cmp	eax, DWORD PTR _i$[ebp]
	jle	SHORT $L34504

; 156  : 			return (mstudiohitboxset_t *)((byte *)m_pStudioHeader + phdr2->hitboxsetindex) + i;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+18968]
	mov	edx, DWORD PTR _phdr2$[ebp]
	add	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	add	eax, ecx
	jmp	SHORT $L34499
$L34504:

; 157  : 
; 158  : 		return NULL; // hitbox set is missed 

	xor	eax, eax
$L34499:

; 159  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?pHitboxSet@CStudioBoneSetup@@QBEPAUmstudiohitboxset_t@@H@Z ENDP ; CStudioBoneSetup::pHitboxSet
_TEXT	ENDS
;	COMDAT ?GetNumHitboxSets@CStudioBoneSetup@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
_phdr2$ = -8
?GetNumHitboxSets@CStudioBoneSetup@@QAEHXZ PROC NEAR	; CStudioBoneSetup::GetNumHitboxSets, COMDAT

; 246  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 		studiohdr2_t *phdr2 = NULL;

	mov	DWORD PTR _phdr2$[ebp], 0

; 248  : 
; 249  : 		if( m_pStudioHeader->studiohdr2index > 0 && m_pStudioHeader->studiohdr2index < m_pStudioHeader->length )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+18968]
	cmp	DWORD PTR [ecx+220], 0
	jle	SHORT $L34564
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+18968]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+18968]
	mov	eax, DWORD PTR [eax+220]
	cmp	eax, DWORD PTR [edx+72]
	jge	SHORT $L34564

; 250  : 			phdr2 = (studiohdr2_t *)((byte *)m_pStudioHeader + m_pStudioHeader->studiohdr2index);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+18968]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+18968]
	add	ecx, DWORD PTR [edx+220]
	mov	DWORD PTR _phdr2$[ebp], ecx
$L34564:

; 251  : 
; 252  : 		if( phdr2 && phdr2->numhitboxsets > 0 )

	cmp	DWORD PTR _phdr2$[ebp], 0
	je	SHORT $L34567
	mov	edx, DWORD PTR _phdr2$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jle	SHORT $L34567

; 253  : 			return phdr2->numhitboxsets;

	mov	eax, DWORD PTR _phdr2$[ebp]
	mov	eax, DWORD PTR [eax+32]
	jmp	SHORT $L34562
$L34567:

; 254  : 		return 0; // no hitbox sets

	xor	eax, eax
$L34562:

; 255  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumHitboxSets@CStudioBoneSetup@@QAEHXZ ENDP		; CStudioBoneSetup::GetNumHitboxSets
_TEXT	ENDS
PUBLIC	?ExtractBbox@@YAHPAXHAAVVector@@1@Z		; ExtractBbox
;	COMDAT ?ExtractBbox@@YAHPAXHAAVVector@@1@Z
_TEXT	SEGMENT
_pmodel$ = 8
_sequence$ = 12
_mins$ = 16
_maxs$ = 20
_pstudiohdr$ = -4
_pseqdesc$ = -8
?ExtractBbox@@YAHPAXHAAVVector@@1@Z PROC NEAR		; ExtractBbox, COMDAT

; 219  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 220  : 	studiohdr_t *pstudiohdr;
; 221  : 	
; 222  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38068

; 223  : 		return 0;

	xor	eax, eax
	jmp	SHORT $L38065
$L38068:

; 226  : 
; 227  : 	pseqdesc = (mstudioseqdesc_t *)((byte *)pstudiohdr + pstudiohdr->seqindex);

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	add	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR _pseqdesc$[ebp], edx

; 228  : 	
; 229  : 	mins = pseqdesc[sequence].bbmin;

	mov	eax, DWORD PTR _sequence$[ebp]
	imul	eax, 176				; 000000b0H
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	lea	edx, DWORD PTR [ecx+eax+96]
	mov	eax, DWORD PTR _mins$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 230  : 	maxs = pseqdesc[sequence].bbmax;

	mov	eax, DWORD PTR _sequence$[ebp]
	imul	eax, 176				; 000000b0H
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	lea	edx, DWORD PTR [ecx+eax+108]
	mov	eax, DWORD PTR _maxs$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 231  : 
; 232  : 	return 1;

	mov	eax, 1
$L38065:

; 233  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ExtractBbox@@YAHPAXHAAVVector@@1@Z ENDP		; ExtractBbox
_TEXT	ENDS
PUBLIC	?LookupActivity@@YAHPAXH@Z			; LookupActivity
;	COMDAT ?LookupActivity@@YAHPAXH@Z
_TEXT	SEGMENT
_pmodel$ = 8
_activity$ = 12
_pstudiohdr$ = -4
_pseqdesc$ = -8
_weighttotal$ = -12
_seq$ = -16
_i$ = -20
?LookupActivity@@YAHPAXH@Z PROC NEAR			; LookupActivity, COMDAT

; 236  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 237  : 	studiohdr_t *pstudiohdr;
; 238  : 	
; 239  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38078

; 240  : 		return ACTIVITY_NOT_AVAILABLE;

	or	eax, -1
	jmp	$L38075
$L38078:

; 243  : 
; 244  : 	pseqdesc = (mstudioseqdesc_t *)((byte *)pstudiohdr + pstudiohdr->seqindex);

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	add	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR _pseqdesc$[ebp], edx

; 245  : 
; 246  : 	int weighttotal = 0;

	mov	DWORD PTR _weighttotal$[ebp], 0

; 247  : 	int seq = ACTIVITY_NOT_AVAILABLE;

	mov	DWORD PTR _seq$[ebp], -1

; 248  : 
; 249  : 	for( int i = 0; i < pstudiohdr->numseq; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L38085
$L38086:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L38085:
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+164]
	jge	SHORT $L38087

; 251  : 		if( pseqdesc[i].activity == activity )

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 176				; 000000b0H
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+40]
	cmp	edx, DWORD PTR _activity$[ebp]
	jne	SHORT $L38089

; 253  : 			weighttotal += pseqdesc[i].actweight;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 176				; 000000b0H
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	mov	edx, DWORD PTR _weighttotal$[ebp]
	add	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _weighttotal$[ebp], edx

; 254  : 
; 255  : 			if( !weighttotal || RANDOM_LONG( 0, weighttotal - 1 ) < pseqdesc[i].actweight )

	cmp	DWORD PTR _weighttotal$[ebp], 0
	je	SHORT $L38090
	mov	eax, DWORD PTR _weighttotal$[ebp]
	sub	eax, 1
	push	eax
	push	0
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+360
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 176				; 000000b0H
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	cmp	eax, DWORD PTR [edx+ecx+44]
	jge	SHORT $L38089
$L38090:

; 256  : 				seq = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _seq$[ebp], eax
$L38089:

; 258  : 	}

	jmp	SHORT $L38086
$L38087:

; 259  : 
; 260  : 	return seq;

	mov	eax, DWORD PTR _seq$[ebp]
$L38075:

; 261  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LookupActivity@@YAHPAXH@Z ENDP				; LookupActivity
_TEXT	ENDS
PUBLIC	?LookupActivityHeaviest@@YAHPAXH@Z		; LookupActivityHeaviest
;	COMDAT ?LookupActivityHeaviest@@YAHPAXH@Z
_TEXT	SEGMENT
_pmodel$ = 8
_activity$ = 12
_pstudiohdr$ = -4
_pseqdesc$ = -8
_weight$ = -12
_seq$ = -16
_i$ = -20
?LookupActivityHeaviest@@YAHPAXH@Z PROC NEAR		; LookupActivityHeaviest, COMDAT

; 264  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 265  : 	studiohdr_t *pstudiohdr;
; 266  : 	
; 267  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38097

; 268  : 		return ACTIVITY_NOT_AVAILABLE;

	or	eax, -1
	jmp	$L38094
$L38097:

; 271  : 
; 272  : 	pseqdesc = (mstudioseqdesc_t *)((byte *)pstudiohdr + pstudiohdr->seqindex);

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	add	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR _pseqdesc$[ebp], edx

; 273  : 
; 274  : 	int weight = 0;

	mov	DWORD PTR _weight$[ebp], 0

; 275  : 	int seq = ACTIVITY_NOT_AVAILABLE;

	mov	DWORD PTR _seq$[ebp], -1

; 276  : 
; 277  : 	for( int i = 0; i < pstudiohdr->numseq; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L38104
$L38105:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L38104:
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+164]
	jge	SHORT $L38106

; 279  : 		if( pseqdesc[i].activity == activity )

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 176				; 000000b0H
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+40]
	cmp	edx, DWORD PTR _activity$[ebp]
	jne	SHORT $L38108

; 281  : 			if( pseqdesc[i].actweight > weight )

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 176				; 000000b0H
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+44]
	cmp	edx, DWORD PTR _weight$[ebp]
	jle	SHORT $L38108

; 283  : 				weight = pseqdesc[i].actweight;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 176				; 000000b0H
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	mov	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR _weight$[ebp], edx

; 284  : 				seq = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _seq$[ebp], eax
$L38108:

; 287  : 	}

	jmp	SHORT $L38105
$L38106:

; 288  : 
; 289  : 	return seq;

	mov	eax, DWORD PTR _seq$[ebp]
$L38094:

; 290  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LookupActivityHeaviest@@YAHPAXH@Z ENDP			; LookupActivityHeaviest
_TEXT	ENDS
PUBLIC	?GetEyePosition@@YAHPAXAAVVector@@@Z		; GetEyePosition
;	COMDAT ?GetEyePosition@@YAHPAXAAVVector@@@Z
_TEXT	SEGMENT
_pmodel$ = 8
_vecEyePosition$ = 12
_pstudiohdr$ = -4
?GetEyePosition@@YAHPAXAAVVector@@@Z PROC NEAR		; GetEyePosition, COMDAT

; 293  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 294  : 	studiohdr_t *pstudiohdr;
; 295  : 	
; 296  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38115

; 297  : 		return 0;

	xor	eax, eax
	jmp	SHORT $L38112
$L38115:

; 298  : 
; 299  : 	vecEyePosition = pstudiohdr->eyeposition;

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	add	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _vecEyePosition$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 300  : 
; 301  : 	return 1;

	mov	eax, 1
$L38112:

; 302  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEyePosition@@YAHPAXAAVVector@@@Z ENDP		; GetEyePosition
_TEXT	ENDS
PUBLIC	?LookupSequence@@YAHPAXPBD@Z			; LookupSequence
;	COMDAT ?LookupSequence@@YAHPAXPBD@Z
_TEXT	SEGMENT
_pmodel$ = 8
_label$ = 12
_pstudiohdr$ = -4
_pseqdesc$ = -8
_i$ = -12
?LookupSequence@@YAHPAXPBD@Z PROC NEAR			; LookupSequence, COMDAT

; 305  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 306  : 	studiohdr_t *pstudiohdr;
; 307  : 	
; 308  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38122

; 309  : 		return -1;

	or	eax, -1
	jmp	SHORT $L38119
$L38122:

; 312  : 
; 313  : 	pseqdesc = (mstudioseqdesc_t *)((byte *)pstudiohdr + pstudiohdr->seqindex);

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	add	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR _pseqdesc$[ebp], edx

; 314  : 
; 315  : 	for( int i = 0; i < pstudiohdr->numseq; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L38127
$L38128:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L38127:
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+164]
	jge	SHORT $L38129

; 317  : 		if( !Q_stricmp( pseqdesc[i].label, label ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _label$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 176				; 000000b0H
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	add	edx, ecx
	push	edx
	call	?Q_strnicmp@@YAHPBD0H@Z			; Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L38130

; 318  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $L38119
$L38130:

; 319  : 	}

	jmp	SHORT $L38128
$L38129:

; 320  : 
; 321  : 	return -1;

	or	eax, -1
$L38119:

; 322  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?LookupSequence@@YAHPAXPBD@Z ENDP			; LookupSequence
_TEXT	ENDS
PUBLIC	?IsSoundEvent@@YAHH@Z				; IsSoundEvent
;	COMDAT ?IsSoundEvent@@YAHH@Z
_TEXT	SEGMENT
_eventNumber$ = 8
?IsSoundEvent@@YAHH@Z PROC NEAR				; IsSoundEvent, COMDAT

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 326  : 	if( eventNumber == SCRIPT_EVENT_SOUND || eventNumber == SCRIPT_EVENT_SOUND_VOICE )

	cmp	DWORD PTR _eventNumber$[ebp], 1004	; 000003ecH
	je	SHORT $L38135
	cmp	DWORD PTR _eventNumber$[ebp], 1008	; 000003f0H
	jne	SHORT $L38134
$L38135:

; 327  : 		return 1;

	mov	eax, 1
	jmp	SHORT $L38133
$L38134:

; 328  : 	return 0;

	xor	eax, eax
$L38133:

; 329  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSoundEvent@@YAHH@Z ENDP				; IsSoundEvent
_TEXT	ENDS
PUBLIC	?SequencePrecache@@YAXPAXPBD@Z			; SequencePrecache
PUBLIC	??_C@_0DJ@PPBE@Bad?5sound?5event?5?$CFd?5in?5sequence?5?$CF@ ; `string'
EXTRN	?Q_strlen@@YAHPBD@Z:NEAR			; Q_strlen
;	COMDAT ??_C@_0DJ@PPBE@Bad?5sound?5event?5?$CFd?5in?5sequence?5?$CF@
; File z:\xashxtsrc\server\monsters\animation.cpp
CONST	SEGMENT
??_C@_0DJ@PPBE@Bad?5sound?5event?5?$CFd?5in?5sequence?5?$CF@ DB 'Bad soun'
	DB	'd event %d in sequence %s :: %s (sound is "%s")', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?SequencePrecache@@YAXPAXPBD@Z
_TEXT	SEGMENT
_pmodel$ = 8
_pSequenceName$ = 12
_index$ = -4
_pstudiohdr$38142 = -8
_pseqdesc$38146 = -12
_pevent$38147 = -16
_i$38152 = -20
?SequencePrecache@@YAXPAXPBD@Z PROC NEAR		; SequencePrecache, COMDAT

; 332  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 333  : 	int index = LookupSequence( pmodel, pSequenceName );

	mov	eax, DWORD PTR _pSequenceName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pmodel$[ebp]
	push	ecx
	call	?LookupSequence@@YAHPAXPBD@Z		; LookupSequence
	add	esp, 8
	mov	DWORD PTR _index$[ebp], eax

; 334  : 
; 335  : 	if( index >= 0 )

	cmp	DWORD PTR _index$[ebp], 0
	jl	$L38155

; 337  : 		studiohdr_t *pstudiohdr;
; 338  : 	
; 339  : 		pstudiohdr = (studiohdr_t *)pmodel;

	mov	edx, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$38142[ebp], edx

; 340  : 
; 341  : 		if( !pstudiohdr || index >= pstudiohdr->numseq )

	cmp	DWORD PTR _pstudiohdr$38142[ebp], 0
	je	SHORT $L38145
	mov	eax, DWORD PTR _pstudiohdr$38142[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+164]
	jl	SHORT $L38144
$L38145:

; 342  : 			return;

	jmp	$L38139
$L38144:

; 345  : 		mstudioevent_t *pevent;
; 346  : 
; 347  : 		pseqdesc = (mstudioseqdesc_t *)((byte *)pstudiohdr + pstudiohdr->seqindex) + index;

	mov	edx, DWORD PTR _pstudiohdr$38142[ebp]
	mov	eax, DWORD PTR _pstudiohdr$38142[ebp]
	add	eax, DWORD PTR [edx+168]
	mov	ecx, DWORD PTR _index$[ebp]
	imul	ecx, 176				; 000000b0H
	add	eax, ecx
	mov	DWORD PTR _pseqdesc$38146[ebp], eax

; 348  : 		pevent = (mstudioevent_t *)((byte *)pstudiohdr + pseqdesc->eventindex);

	mov	edx, DWORD PTR _pseqdesc$38146[ebp]
	mov	eax, DWORD PTR _pstudiohdr$38142[ebp]
	add	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _pevent$38147[ebp], eax

; 349  : 
; 350  : 		for( int i = 0; i < pseqdesc->numevents; i++ )

	mov	DWORD PTR _i$38152[ebp], 0
	jmp	SHORT $L38153
$L38154:
	mov	ecx, DWORD PTR _i$38152[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$38152[ebp], ecx
$L38153:
	mov	edx, DWORD PTR _pseqdesc$38146[ebp]
	mov	eax, DWORD PTR _i$38152[ebp]
	cmp	eax, DWORD PTR [edx+48]
	jge	$L38155

; 352  : 			// don't send client-side events to the server AI
; 353  : 			if( pevent[i].event >= EVENT_CLIENT )

	mov	ecx, DWORD PTR _i$38152[ebp]
	imul	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _pevent$38147[ebp]
	cmp	DWORD PTR [edx+ecx+4], 5000		; 00001388H
	jl	SHORT $L38156

; 354  : 				continue;

	jmp	SHORT $L38154
$L38156:

; 355  : 
; 356  : 			if( IsSoundEvent( pevent[i].event ))

	mov	eax, DWORD PTR _i$38152[ebp]
	imul	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _pevent$38147[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	?IsSoundEvent@@YAHH@Z			; IsSoundEvent
	add	esp, 4
	test	eax, eax
	je	SHORT $L38157

; 358  : 				if( !Q_strlen(pevent[i].options ))

	mov	eax, DWORD PTR _i$38152[ebp]
	imul	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _pevent$38147[ebp]
	lea	edx, DWORD PTR [ecx+eax+12]
	push	edx
	call	?Q_strlen@@YAHPBD@Z			; Q_strlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $L38158

; 360  : 					ALERT( at_error, "Bad sound event %d in sequence %s :: %s (sound is \"%s\")\n",
; 361  : 					pevent[i].event, pstudiohdr->name, pSequenceName, pevent[i].options );

	mov	eax, DWORD PTR _i$38152[ebp]
	imul	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _pevent$38147[ebp]
	lea	edx, DWORD PTR [ecx+eax+12]
	push	edx
	mov	eax, DWORD PTR _pSequenceName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstudiohdr$38142[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _i$38152[ebp]
	imul	edx, 76					; 0000004cH
	mov	eax, DWORD PTR _pevent$38147[ebp]
	mov	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	push	OFFSET FLAT:??_C@_0DJ@PPBE@Bad?5sound?5event?5?$CFd?5in?5sequence?5?$CF@ ; `string'
	push	4
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 24					; 00000018H
$L38158:

; 363  : 
; 364  : 				PRECACHE_SOUND( pevent[i].options );

	mov	edx, DWORD PTR _i$38152[ebp]
	imul	edx, 76					; 0000004cH
	mov	eax, DWORD PTR _pevent$38147[ebp]
	lea	ecx, DWORD PTR [eax+edx+12]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4
$L38157:

; 366  : 		}

	jmp	$L38154
$L38155:
$L38139:

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SequencePrecache@@YAXPAXPBD@Z ENDP			; SequencePrecache
_TEXT	ENDS
PUBLIC	?CalcGaitFrame@@YAXPAXAAHAAMM@Z			; CalcGaitFrame
PUBLIC	??BVector@@QAEPAMXZ				; Vector::operator float *
PUBLIC	__real@8@00000000000000000000
EXTRN	_fmod:NEAR
EXTRN	?gpGlobals@@3PAUglobalvars_t@@A:DWORD		; gpGlobals
;	COMDAT __real@8@00000000000000000000
; File z:\xashxtsrc\server\monsters\animation.cpp
CONST	SEGMENT
__real@8@00000000000000000000 DQ 00000000000000000r ; 0
CONST	ENDS
;	COMDAT ?CalcGaitFrame@@YAXPAXAAHAAMM@Z
_TEXT	SEGMENT
_pmodel$ = 8
_gaitsequence$ = 12
_flGaitFrame$ = 16
_flGaitMovement$ = 20
_pstudiohdr$ = -4
_pseqdesc$ = -8
?CalcGaitFrame@@YAXPAXAAHAAMM@Z PROC NEAR		; CalcGaitFrame, COMDAT

; 371  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 372  : 	studiohdr_t *pstudiohdr;
; 373  : 
; 374  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38168

; 375  : 		return;	

	jmp	$L38165
$L38168:

; 378  : 
; 379  : 	if( gaitsequence < 0 || gaitsequence >= pstudiohdr->numseq ) 

	mov	ecx, DWORD PTR _gaitsequence$[ebp]
	cmp	DWORD PTR [ecx], 0
	jl	SHORT $L38171
	mov	edx, DWORD PTR _gaitsequence$[ebp]
	mov	eax, DWORD PTR _pstudiohdr$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+164]
	jl	SHORT $L38170
$L38171:

; 380  : 		gaitsequence = 0;

	mov	edx, DWORD PTR _gaitsequence$[ebp]
	mov	DWORD PTR [edx], 0
$L38170:

; 381  : 
; 382  : 	pseqdesc = (mstudioseqdesc_t *)((byte *)pstudiohdr + pstudiohdr->seqindex) + gaitsequence;

	mov	eax, DWORD PTR _pstudiohdr$[ebp]
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	add	ecx, DWORD PTR [eax+168]
	mov	edx, DWORD PTR _gaitsequence$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 176				; 000000b0H
	add	ecx, eax
	mov	DWORD PTR _pseqdesc$[ebp], ecx

; 383  : 
; 384  : 	// calc gait frame
; 385  : 	if( pseqdesc->linearmovement[0] > 0.0f )

	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	add	ecx, 76					; 0000004cH
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L38174

; 386  : 		flGaitFrame += (flGaitMovement / pseqdesc->linearmovement[0]) * pseqdesc->numframes;

	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	add	ecx, 76					; 0000004cH
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR _flGaitMovement$[ebp]
	fdiv	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	fimul	DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _flGaitFrame$[ebp]
	fadd	DWORD PTR [edx]
	mov	eax, DWORD PTR _flGaitFrame$[ebp]
	fstp	DWORD PTR [eax]

; 387  : 	else flGaitFrame += pseqdesc->fps * gpGlobals->frametime;

	jmp	SHORT $L38175
$L38174:
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	mov	edx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	fld	DWORD PTR [ecx+32]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _flGaitFrame$[ebp]
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _flGaitFrame$[ebp]
	fstp	DWORD PTR [ecx]
$L38175:

; 388  : 
; 389  : 	// do modulo
; 390  : 	flGaitFrame = fmod( flGaitFrame, (float)pseqdesc->numframes ); 

	mov	edx, DWORD PTR _pseqdesc$[ebp]
	fild	DWORD PTR [edx+56]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _flGaitFrame$[ebp]
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_fmod
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _flGaitFrame$[ebp]
	fstp	DWORD PTR [ecx]
$L38178:

; 391  : 	while( flGaitFrame < 0.0 ) flGaitFrame += pseqdesc->numframes;

	mov	edx, DWORD PTR _flGaitFrame$[ebp]
	fld	DWORD PTR [edx]
	fcomp	QWORD PTR __real@8@00000000000000000000
	fnstsw	ax
	test	ah, 1
	je	SHORT $L38179
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	fild	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _flGaitFrame$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _flGaitFrame$[ebp]
	fstp	DWORD PTR [edx]
	jmp	SHORT $L38178
$L38179:
$L38165:

; 392  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CalcGaitFrame@@YAXPAXAAHAAMM@Z ENDP			; CalcGaitFrame
_TEXT	ENDS
;	COMDAT ??BVector@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4
??BVector@@QAEPAMXZ PROC NEAR				; Vector::operator float *, COMDAT

; 228  : 	operator float *()				{ return &x; } // Vectors will now automatically convert to float * when needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector@@QAEPAMXZ ENDP				; Vector::operator float *
_TEXT	ENDS
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
PUBLIC	?GetSequenceInfo@@YAXPAXHPAM1@Z			; GetSequenceInfo
PUBLIC	?Length@Vector@@QBEMXZ				; Vector::Length
PUBLIC	__real@4@40078000000000000000
EXTRN	?SeqMovement@CStudioBoneSetup@@QAE_NHMMAAVVector@@0@Z:NEAR ; CStudioBoneSetup::SeqMovement
;	COMDAT __real@4@40078000000000000000
; File z:\xashxtsrc\server\monsters\animation.cpp
CONST	SEGMENT
__real@4@40078000000000000000 DD 043800000r	; 256
CONST	ENDS
;	COMDAT ?GetSequenceInfo@@YAXPAXHPAM1@Z
_TEXT	SEGMENT
_pmodel$ = 8
_sequence$ = 12
_pflFrameRate$ = 16
_pflGroundSpeed$ = 20
_pstudiohdr$ = -4
_vecMove$ = -16
_vecAngle$ = -28
_pseqdesc$ = -32
?GetSequenceInfo@@YAXPAXHPAM1@Z PROC NEAR		; GetSequenceInfo, COMDAT

; 395  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi

; 396  : 	studiohdr_t *pstudiohdr;
; 397  : 	Vector vecMove, vecAngle;

	lea	ecx, DWORD PTR _vecMove$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _vecAngle$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 398  : 
; 399  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38190

; 400  : 		return;	

	jmp	$L38185
$L38190:

; 401  : 
; 402  : 	SetupModelBones( pstudiohdr );

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	push	ecx
	call	?SetupModelBones@@YAXPAUstudiohdr_t@@@Z	; SetupModelBones
	add	esp, 4

; 403  : 
; 404  : 	mstudioseqdesc_t *pseqdesc;
; 405  : 
; 406  : 	if( sequence >= pstudiohdr->numseq )

	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	mov	eax, DWORD PTR _sequence$[ebp]
	cmp	eax, DWORD PTR [edx+164]
	jl	SHORT $L38192

; 408  : 		*pflFrameRate = 0.0f;

	mov	ecx, DWORD PTR _pflFrameRate$[ebp]
	mov	DWORD PTR [ecx], 0

; 409  : 		*pflGroundSpeed = 0.0f;

	mov	edx, DWORD PTR _pflGroundSpeed$[ebp]
	mov	DWORD PTR [edx], 0

; 410  : 		return;

	jmp	$L38185
$L38192:

; 412  : 
; 413  : 	pseqdesc = (mstudioseqdesc_t *)((byte *)pstudiohdr + pstudiohdr->seqindex) + sequence;

	mov	eax, DWORD PTR _pstudiohdr$[ebp]
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	add	ecx, DWORD PTR [eax+168]
	mov	edx, DWORD PTR _sequence$[ebp]
	imul	edx, 176				; 000000b0H
	add	ecx, edx
	mov	DWORD PTR _pseqdesc$[ebp], ecx

; 414  : 	g_boneSetup.SeqMovement( sequence, 0.0f, 1.0f, vecMove, vecAngle );

	lea	eax, DWORD PTR _vecAngle$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vecMove$[ebp]
	push	ecx
	push	1065353216				; 3f800000H
	push	0
	mov	edx, DWORD PTR _sequence$[ebp]
	push	edx
	mov	ecx, OFFSET FLAT:_g_boneSetup
	call	?SeqMovement@CStudioBoneSetup@@QAE_NHMMAAVVector@@0@Z ; CStudioBoneSetup::SeqMovement

; 415  : 
; 416  : 	if( pseqdesc->numframes > 1 )

	mov	eax, DWORD PTR _pseqdesc$[ebp]
	cmp	DWORD PTR [eax+56], 1
	jle	SHORT $L38195

; 418  : 		*pflFrameRate = 256 * pseqdesc->fps / (pseqdesc->numframes - 1);

	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	fld	DWORD PTR __real@4@40078000000000000000
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR [edx+56]
	sub	eax, 1
	mov	DWORD PTR -36+[ebp], eax
	fidiv	DWORD PTR -36+[ebp]
	mov	ecx, DWORD PTR _pflFrameRate$[ebp]
	fstp	DWORD PTR [ecx]

; 419  : 		*pflGroundSpeed = vecMove.Length();

	lea	ecx, DWORD PTR _vecMove$[ebp]
	call	?Length@Vector@@QBEMXZ			; Vector::Length
	mov	edx, DWORD PTR _pflGroundSpeed$[ebp]
	fstp	DWORD PTR [edx]

; 420  : 		*pflGroundSpeed = *pflGroundSpeed * pseqdesc->fps / (pseqdesc->numframes - 1);

	mov	eax, DWORD PTR _pflGroundSpeed$[ebp]
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR [edx+56]
	sub	eax, 1
	mov	DWORD PTR -40+[ebp], eax
	fidiv	DWORD PTR -40+[ebp]
	mov	ecx, DWORD PTR _pflGroundSpeed$[ebp]
	fstp	DWORD PTR [ecx]

; 422  : 	else

	jmp	SHORT $L38196
$L38195:

; 424  : 		*pflFrameRate = 256.0f;

	mov	edx, DWORD PTR _pflFrameRate$[ebp]
	mov	DWORD PTR [edx], 1132462080		; 43800000H

; 425  : 		*pflGroundSpeed = 0.0f;

	mov	eax, DWORD PTR _pflGroundSpeed$[ebp]
	mov	DWORD PTR [eax], 0
$L38196:
$L38185:

; 427  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSequenceInfo@@YAXPAXHPAM1@Z ENDP			; GetSequenceInfo
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Vector@@QAE@XZ PROC NEAR				; Vector::Vector, COMDAT

; 134  : 	inline Vector(void)				{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
_TEXT	ENDS
EXTRN	_sqrt:NEAR
;	COMDAT ?Length@Vector@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4
?Length@Vector@@QBEMXZ PROC NEAR			; Vector::Length, COMDAT

; 226  : 	inline float Length(void) const		{ return sqrt( x*x + y*y + z*z ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fst	DWORD PTR -8+[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Vector@@QBEMXZ ENDP				; Vector::Length
_TEXT	ENDS
PUBLIC	?GetSequenceFlags@@YAHPAXH@Z			; GetSequenceFlags
;	COMDAT ?GetSequenceFlags@@YAHPAXH@Z
_TEXT	SEGMENT
_pmodel$ = 8
_sequence$ = 12
_pstudiohdr$ = -4
_pseqdesc$ = -8
?GetSequenceFlags@@YAHPAXH@Z PROC NEAR			; GetSequenceFlags, COMDAT

; 430  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 431  : 	studiohdr_t *pstudiohdr;
; 432  : 	
; 433  : 	pstudiohdr = (studiohdr_t *)pmodel;

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax

; 434  : 
; 435  : 	if( !pstudiohdr || sequence >= pstudiohdr->numseq )

	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	je	SHORT $L38204
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _sequence$[ebp]
	cmp	edx, DWORD PTR [ecx+164]
	jl	SHORT $L38203
$L38204:

; 436  : 		return 0;

	xor	eax, eax
	jmp	SHORT $L38200
$L38203:

; 439  : 	pseqdesc = (mstudioseqdesc_t *)((byte *)pstudiohdr + pstudiohdr->seqindex) + sequence;

	mov	eax, DWORD PTR _pstudiohdr$[ebp]
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	add	ecx, DWORD PTR [eax+168]
	mov	edx, DWORD PTR _sequence$[ebp]
	imul	edx, 176				; 000000b0H
	add	ecx, edx
	mov	DWORD PTR _pseqdesc$[ebp], ecx

; 440  : 
; 441  : 	return pseqdesc->flags;

	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR [eax+36]
$L38200:

; 442  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSequenceFlags@@YAHPAXH@Z ENDP			; GetSequenceFlags
_TEXT	ENDS
PUBLIC	?GetAnimationEvent@@YAHPAXHPAUMonsterEvent_t@@MMH@Z ; GetAnimationEvent
PUBLIC	__real@4@3fff8000000000000000
;	COMDAT __real@4@3fff8000000000000000
; File z:\xashxtsrc\server\monsters\animation.cpp
CONST	SEGMENT
__real@4@3fff8000000000000000 DD 03f800000r	; 1
CONST	ENDS
;	COMDAT ?GetAnimationEvent@@YAHPAXHPAUMonsterEvent_t@@MMH@Z
_TEXT	SEGMENT
_pmodel$ = 8
_sequence$ = 12
_pMonsterEvent$ = 16
_flStart$ = 20
_flEnd$ = 24
_index$ = 28
_pstudiohdr$ = -4
_events$ = -8
_pseqdesc$ = -12
_pevent$ = -16
?GetAnimationEvent@@YAHPAXHPAUMonsterEvent_t@@MMH@Z PROC NEAR ; GetAnimationEvent, COMDAT

; 445  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 446  : 	studiohdr_t *pstudiohdr;
; 447  : 	
; 448  : 	pstudiohdr = (studiohdr_t *)pmodel;

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax

; 449  : 
; 450  : 	if( !pstudiohdr || sequence >= pstudiohdr->numseq || !pMonsterEvent )

	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	je	SHORT $L38219
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _sequence$[ebp]
	cmp	edx, DWORD PTR [ecx+164]
	jge	SHORT $L38219
	cmp	DWORD PTR _pMonsterEvent$[ebp], 0
	jne	SHORT $L38218
$L38219:

; 451  : 		return 0;

	xor	eax, eax
	jmp	$L38215
$L38218:

; 452  : 
; 453  : 	int events = 0;

	mov	DWORD PTR _events$[ebp], 0

; 454  : 
; 455  : 	mstudioseqdesc_t *pseqdesc;
; 456  : 	mstudioevent_t *pevent;
; 457  : 
; 458  : 	pseqdesc = (mstudioseqdesc_t *)((byte *)pstudiohdr + pstudiohdr->seqindex) + sequence;

	mov	eax, DWORD PTR _pstudiohdr$[ebp]
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	add	ecx, DWORD PTR [eax+168]
	mov	edx, DWORD PTR _sequence$[ebp]
	imul	edx, 176				; 000000b0H
	add	ecx, edx
	mov	DWORD PTR _pseqdesc$[ebp], ecx

; 459  : 	pevent = (mstudioevent_t *)((byte *)pstudiohdr + pseqdesc->eventindex);

	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	add	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _pevent$[ebp], ecx

; 460  : 
; 461  : 	if( pseqdesc->numevents == 0 || index > pseqdesc->numevents )

	mov	edx, DWORD PTR _pseqdesc$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $L38228
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jle	SHORT $L38227
$L38228:

; 462  : 		return 0;

	xor	eax, eax
	jmp	$L38215
$L38227:

; 463  : 
; 464  : 	if( pseqdesc->numframes > 1 )

	mov	edx, DWORD PTR _pseqdesc$[ebp]
	cmp	DWORD PTR [edx+56], 1
	jle	SHORT $L38229

; 466  : 		flStart *= (pseqdesc->numframes - 1) / 256.0f;

	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	sub	ecx, 1
	mov	DWORD PTR -20+[ebp], ecx
	fild	DWORD PTR -20+[ebp]
	fdiv	DWORD PTR __real@4@40078000000000000000
	fmul	DWORD PTR _flStart$[ebp]
	fstp	DWORD PTR _flStart$[ebp]

; 467  : 		flEnd *= (pseqdesc->numframes - 1) / 256.0f;

	mov	edx, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR [edx+56]
	sub	eax, 1
	mov	DWORD PTR -24+[ebp], eax
	fild	DWORD PTR -24+[ebp]
	fdiv	DWORD PTR __real@4@40078000000000000000
	fmul	DWORD PTR _flEnd$[ebp]
	fstp	DWORD PTR _flEnd$[ebp]

; 469  : 	else

	jmp	SHORT $L38230
$L38229:

; 471  : 		flStart = 0.0f;

	mov	DWORD PTR _flStart$[ebp], 0

; 472  : 		flEnd = 1.0f;

	mov	DWORD PTR _flEnd$[ebp], 1065353216	; 3f800000H
$L38230:

; 474  : 
; 475  : 	for( ; index < pseqdesc->numevents; index++ )

	jmp	SHORT $L38231
$L38232:
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx
$L38231:
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR [edx+48]
	jge	$L38233

; 477  : 		// Don't send client-side events to the server AI
; 478  : 		if( pevent[index].event >= EVENT_CLIENT )

	mov	ecx, DWORD PTR _index$[ebp]
	imul	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _pevent$[ebp]
	cmp	DWORD PTR [edx+ecx+4], 5000		; 00001388H
	jl	SHORT $L38234

; 479  : 			continue;

	jmp	SHORT $L38232
$L38234:

; 480  : 
; 481  : 		if(( pevent[index].frame >= flStart && pevent[index].frame < flEnd ) || ((pseqdesc->flags & STUDIO_LOOPING) && flEnd >= pseqdesc->numframes - 1 && pevent[index].frame < flEnd - pseqdesc->numframes + 1) )

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _pevent$[ebp]
	fild	DWORD PTR [ecx+eax]
	fcomp	DWORD PTR _flStart$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L38237
	mov	edx, DWORD PTR _index$[ebp]
	imul	edx, 76					; 0000004cH
	mov	eax, DWORD PTR _pevent$[ebp]
	fild	DWORD PTR [eax+edx]
	fcomp	DWORD PTR _flEnd$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L38236
$L38237:
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	and	edx, 1
	test	edx, edx
	je	SHORT $L38235
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	sub	ecx, 1
	mov	DWORD PTR -28+[ebp], ecx
	fild	DWORD PTR -28+[ebp]
	fcomp	DWORD PTR _flEnd$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L38235
	mov	edx, DWORD PTR _index$[ebp]
	imul	edx, 76					; 0000004cH
	mov	eax, DWORD PTR _pevent$[ebp]
	fild	DWORD PTR [eax+edx]
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	fild	DWORD PTR [ecx+56]
	fsubr	DWORD PTR _flEnd$[ebp]
	fadd	DWORD PTR __real@4@3fff8000000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L38235
$L38236:

; 483  : 			pMonsterEvent->event = pevent[index].event;

	mov	edx, DWORD PTR _index$[ebp]
	imul	edx, 76					; 0000004cH
	mov	eax, DWORD PTR _pMonsterEvent$[ebp]
	mov	ecx, DWORD PTR _pevent$[ebp]
	mov	edx, DWORD PTR [ecx+edx+4]
	mov	DWORD PTR [eax], edx

; 484  : 			pMonsterEvent->options = pevent[index].options;

	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _pevent$[ebp]
	lea	edx, DWORD PTR [ecx+eax+12]
	mov	eax, DWORD PTR _pMonsterEvent$[ebp]
	mov	DWORD PTR [eax+4], edx

; 485  : 			return index + 1;

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	jmp	SHORT $L38215
$L38235:

; 487  : 	}

	jmp	$L38232
$L38233:

; 488  : 
; 489  : 	return 0;

	xor	eax, eax
$L38215:

; 490  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAnimationEvent@@YAHPAXHPAUMonsterEvent_t@@MMH@Z ENDP ; GetAnimationEvent
_TEXT	ENDS
PUBLIC	__real@4@4007b400000000000000
PUBLIC	__real@4@c007b400000000000000
PUBLIC	__real@4@4006ff00000000000000
PUBLIC	__real@4@3ff78080810000000000
PUBLIC	?SetController@@YAMPAXPAEHM@Z			; SetController
PUBLIC	__real@4@4007b380000000000000
PUBLIC	__real@4@40008000000000000000
PUBLIC	__real@4@4006b400000000000000
EXTRN	__ftol:NEAR
;	COMDAT __real@4@4007b380000000000000
; File z:\xashxtsrc\server\monsters\animation.cpp
CONST	SEGMENT
__real@4@4007b380000000000000 DD 043b38000r	; 359
CONST	ENDS
;	COMDAT __real@4@40008000000000000000
CONST	SEGMENT
__real@4@40008000000000000000 DD 040000000r	; 2
CONST	ENDS
;	COMDAT __real@4@4006b400000000000000
CONST	SEGMENT
__real@4@4006b400000000000000 DD 043340000r	; 180
CONST	ENDS
;	COMDAT __real@4@4007b400000000000000
CONST	SEGMENT
__real@4@4007b400000000000000 DD 043b40000r	; 360
CONST	ENDS
;	COMDAT __real@4@c007b400000000000000
CONST	SEGMENT
__real@4@c007b400000000000000 DD 0c3b40000r	; -360
CONST	ENDS
;	COMDAT __real@4@4006ff00000000000000
CONST	SEGMENT
__real@4@4006ff00000000000000 DD 0437f0000r	; 255
CONST	ENDS
;	COMDAT __real@4@3ff78080810000000000
CONST	SEGMENT
__real@4@3ff78080810000000000 DD 03b808081r	; 0.00392157
CONST	ENDS
;	COMDAT ?SetController@@YAMPAXPAEHM@Z
_TEXT	SEGMENT
_pmodel$ = 8
_controller$ = 12
_iController$ = 16
_flValue$ = 20
_pstudiohdr$ = -4
_pbonecontroller$ = -8
_i$ = -12
_setting$ = -16
?SetController@@YAMPAXPAEHM@Z PROC NEAR			; SetController, COMDAT

; 493  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 494  : 	studiohdr_t *pstudiohdr;
; 495  : 	
; 496  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38246

; 497  : 		return flValue;

	fld	DWORD PTR _flValue$[ebp]
	jmp	$L38243
$L38246:

; 498  : 
; 499  : 	mstudiobonecontroller_t *pbonecontroller = (mstudiobonecontroller_t *)((byte *)pstudiohdr + pstudiohdr->bonecontrollerindex);

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	add	edx, DWORD PTR [ecx+152]
	mov	DWORD PTR _pbonecontroller$[ebp], edx

; 500  : 
; 501  : 	// find first controller that matches the index
; 502  : 	for( int i = 0; i < pstudiohdr->numbonecontrollers; i++, pbonecontroller++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L38251
$L38252:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pbonecontroller$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _pbonecontroller$[ebp], ecx
$L38251:
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+148]
	jge	SHORT $L38253

; 504  : 		if( pbonecontroller->index == iController )

	mov	ecx, DWORD PTR _pbonecontroller$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _iController$[ebp]
	jne	SHORT $L38254

; 505  : 			break;

	jmp	SHORT $L38253
$L38254:

; 506  : 	}

	jmp	SHORT $L38252
$L38253:

; 507  : 
; 508  : 	if( i >= pstudiohdr->numbonecontrollers )

	mov	eax, DWORD PTR _pstudiohdr$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+148]
	jl	SHORT $L38255

; 509  : 		return flValue;

	fld	DWORD PTR _flValue$[ebp]
	jmp	$L38243
$L38255:

; 510  : 
; 511  : 	// wrap 0..360 if it's a rotational controller
; 512  : 	if( pbonecontroller->type & ( STUDIO_XR|STUDIO_YR|STUDIO_ZR ))

	mov	edx, DWORD PTR _pbonecontroller$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 56					; 00000038H
	test	eax, eax
	je	$L38265

; 514  : 		// ugly hack, invert value if end < start
; 515  : 		if( pbonecontroller->end < pbonecontroller->start )

	mov	ecx, DWORD PTR _pbonecontroller$[ebp]
	mov	edx, DWORD PTR _pbonecontroller$[ebp]
	fld	DWORD PTR [ecx+12]
	fcomp	DWORD PTR [edx+8]
	fnstsw	ax
	test	ah, 1
	je	SHORT $L38257

; 516  : 			flValue = -flValue;

	fld	DWORD PTR _flValue$[ebp]
	fchs
	fstp	DWORD PTR _flValue$[ebp]
$L38257:

; 517  : 
; 518  : 		// does the controller not wrap?
; 519  : 		if( pbonecontroller->start + 359.0f >= pbonecontroller->end )

	mov	eax, DWORD PTR _pbonecontroller$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR __real@4@4007b380000000000000
	mov	ecx, DWORD PTR _pbonecontroller$[ebp]
	fcomp	DWORD PTR [ecx+12]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L38258

; 521  : 			if( flValue > (( pbonecontroller->start + pbonecontroller->end ) / 2.0f ) + 180 )

	mov	edx, DWORD PTR _pbonecontroller$[ebp]
	mov	eax, DWORD PTR _pbonecontroller$[ebp]
	fld	DWORD PTR [edx+8]
	fadd	DWORD PTR [eax+12]
	fdiv	DWORD PTR __real@4@40008000000000000000
	fadd	DWORD PTR __real@4@4006b400000000000000
	fcomp	DWORD PTR _flValue$[ebp]
	fnstsw	ax
	test	ah, 1
	je	SHORT $L38259

; 522  : 				flValue = flValue - 360;

	fld	DWORD PTR _flValue$[ebp]
	fsub	DWORD PTR __real@4@4007b400000000000000
	fstp	DWORD PTR _flValue$[ebp]
$L38259:

; 523  : 			if( flValue < (( pbonecontroller->start + pbonecontroller->end ) / 2.0f ) - 180 )

	mov	ecx, DWORD PTR _pbonecontroller$[ebp]
	mov	edx, DWORD PTR _pbonecontroller$[ebp]
	fld	DWORD PTR [ecx+8]
	fadd	DWORD PTR [edx+12]
	fdiv	DWORD PTR __real@4@40008000000000000000
	fsub	DWORD PTR __real@4@4006b400000000000000
	fcomp	DWORD PTR _flValue$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L38260

; 524  : 				flValue = flValue + 360;

	fld	DWORD PTR _flValue$[ebp]
	fadd	DWORD PTR __real@4@4007b400000000000000
	fstp	DWORD PTR _flValue$[ebp]
$L38260:

; 526  : 		else

	jmp	SHORT $L38265
$L38258:

; 528  : 			if( flValue > 360.0f )

	fld	DWORD PTR _flValue$[ebp]
	fcomp	DWORD PTR __real@4@4007b400000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L38262

; 529  : 				flValue = flValue - (int)(flValue / 360.0f) * 360.0f;

	fld	DWORD PTR _flValue$[ebp]
	fdiv	DWORD PTR __real@4@4007b400000000000000
	call	__ftol
	mov	DWORD PTR -20+[ebp], eax
	fild	DWORD PTR -20+[ebp]
	fmul	DWORD PTR __real@4@4007b400000000000000
	fsubr	DWORD PTR _flValue$[ebp]
	fstp	DWORD PTR _flValue$[ebp]

; 530  : 			else if( flValue < 0.0f )

	jmp	SHORT $L38265
$L38262:
	fld	DWORD PTR _flValue$[ebp]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 1
	je	SHORT $L38265

; 531  : 				flValue = flValue + (int)((flValue / -360.0f) + 1.0f) * 360.0f;

	fld	DWORD PTR _flValue$[ebp]
	fdiv	DWORD PTR __real@4@c007b400000000000000
	fadd	DWORD PTR __real@4@3fff8000000000000000
	call	__ftol
	mov	DWORD PTR -24+[ebp], eax
	fild	DWORD PTR -24+[ebp]
	fmul	DWORD PTR __real@4@4007b400000000000000
	fadd	DWORD PTR _flValue$[ebp]
	fstp	DWORD PTR _flValue$[ebp]
$L38265:

; 534  : 
; 535  : 	int setting = 255 * (flValue - pbonecontroller->start) / (pbonecontroller->end - pbonecontroller->start);

	mov	eax, DWORD PTR _pbonecontroller$[ebp]
	fld	DWORD PTR _flValue$[ebp]
	fsub	DWORD PTR [eax+8]
	fmul	DWORD PTR __real@4@4006ff00000000000000
	mov	ecx, DWORD PTR _pbonecontroller$[ebp]
	mov	edx, DWORD PTR _pbonecontroller$[ebp]
	fld	DWORD PTR [ecx+12]
	fsub	DWORD PTR [edx+8]
	fdivp	ST(1), ST(0)
	call	__ftol
	mov	DWORD PTR _setting$[ebp], eax

; 536  : 
; 537  : 	setting = bound( 0, setting, 255 );

	cmp	DWORD PTR _setting$[ebp], 0
	jl	SHORT $L38903
	cmp	DWORD PTR _setting$[ebp], 255		; 000000ffH
	jge	SHORT $L38901
	mov	eax, DWORD PTR _setting$[ebp]
	mov	DWORD PTR -28+[ebp], eax
	jmp	SHORT $L38902
$L38901:
	mov	DWORD PTR -28+[ebp], 255		; 000000ffH
$L38902:
	mov	ecx, DWORD PTR -28+[ebp]
	mov	DWORD PTR -32+[ebp], ecx
	jmp	SHORT $L38904
$L38903:
	mov	DWORD PTR -32+[ebp], 0
$L38904:
	mov	edx, DWORD PTR -32+[ebp]
	mov	DWORD PTR _setting$[ebp], edx

; 538  : 	controller[iController] = setting;

	mov	eax, DWORD PTR _controller$[ebp]
	add	eax, DWORD PTR _iController$[ebp]
	mov	cl, BYTE PTR _setting$[ebp]
	mov	BYTE PTR [eax], cl

; 539  : 
; 540  : 	return setting * (1.0f / 255.0f) * (pbonecontroller->end - pbonecontroller->start) + pbonecontroller->start;

	fild	DWORD PTR _setting$[ebp]
	fmul	DWORD PTR __real@4@3ff78080810000000000
	mov	edx, DWORD PTR _pbonecontroller$[ebp]
	mov	eax, DWORD PTR _pbonecontroller$[ebp]
	fld	DWORD PTR [edx+12]
	fsub	DWORD PTR [eax+8]
	fmulp	ST(1), ST(0)
	mov	ecx, DWORD PTR _pbonecontroller$[ebp]
	fadd	DWORD PTR [ecx+8]
$L38243:

; 541  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetController@@YAMPAXPAEHM@Z ENDP			; SetController
_TEXT	ENDS
PUBLIC	?SetBlending@@YAMPAXHPAEHM@Z			; SetBlending
;	COMDAT ?SetBlending@@YAMPAXHPAEHM@Z
_TEXT	SEGMENT
_pmodel$ = 8
_sequence$ = 12
_blending$ = 16
_iBlender$ = 20
_flValue$ = 24
_pstudiohdr$ = -4
_pseqdesc$ = -8
_setting$ = -12
?SetBlending@@YAMPAXHPAEHM@Z PROC NEAR			; SetBlending, COMDAT

; 544  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 545  : 	studiohdr_t *pstudiohdr;
; 546  : 	
; 547  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38277

; 548  : 		return flValue;

	fld	DWORD PTR _flValue$[ebp]
	jmp	$L38274
$L38277:

; 551  : 
; 552  : 	pseqdesc = (mstudioseqdesc_t *)((byte *)pstudiohdr + pstudiohdr->seqindex) + sequence;

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	add	edx, DWORD PTR [ecx+168]
	mov	eax, DWORD PTR _sequence$[ebp]
	imul	eax, 176				; 000000b0H
	add	edx, eax
	mov	DWORD PTR _pseqdesc$[ebp], edx

; 553  : 
; 554  : 	if( pseqdesc->blendtype[iBlender] == 0 )

	mov	ecx, DWORD PTR _iBlender$[ebp]
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	cmp	DWORD PTR [edx+ecx*4+128], 0
	jne	SHORT $L38281

; 555  : 		return flValue;

	fld	DWORD PTR _flValue$[ebp]
	jmp	$L38274
$L38281:

; 556  : 
; 557  : 	if( pseqdesc->blendtype[iBlender] & ( STUDIO_XR|STUDIO_YR|STUDIO_ZR ))

	mov	eax, DWORD PTR _iBlender$[ebp]
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+128]
	and	edx, 56					; 00000038H
	test	edx, edx
	je	$L38286

; 559  : 		// ugly hack, invert value if end < start
; 560  : 		if( pseqdesc->blendend[iBlender] < pseqdesc->blendstart[iBlender] )

	mov	eax, DWORD PTR _iBlender$[ebp]
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	mov	edx, DWORD PTR _iBlender$[ebp]
	mov	esi, DWORD PTR _pseqdesc$[ebp]
	fld	DWORD PTR [ecx+eax*4+144]
	fcomp	DWORD PTR [esi+edx*4+136]
	fnstsw	ax
	test	ah, 1
	je	SHORT $L38283

; 561  : 			flValue = -flValue;

	fld	DWORD PTR _flValue$[ebp]
	fchs
	fstp	DWORD PTR _flValue$[ebp]
$L38283:

; 562  : 
; 563  : 		// does the controller not wrap?
; 564  : 		if( pseqdesc->blendstart[iBlender] + 359.0f >= pseqdesc->blendend[iBlender] )

	mov	eax, DWORD PTR _iBlender$[ebp]
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	fld	DWORD PTR [ecx+eax*4+136]
	fadd	DWORD PTR __real@4@4007b380000000000000
	mov	edx, DWORD PTR _iBlender$[ebp]
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	fcomp	DWORD PTR [eax+edx*4+144]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L38286

; 566  : 			if( flValue > (( pseqdesc->blendstart[iBlender] + pseqdesc->blendend[iBlender] ) / 2.0f ) + 180.0f )

	mov	ecx, DWORD PTR _iBlender$[ebp]
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR _iBlender$[ebp]
	mov	esi, DWORD PTR _pseqdesc$[ebp]
	fld	DWORD PTR [edx+ecx*4+136]
	fadd	DWORD PTR [esi+eax*4+144]
	fdiv	DWORD PTR __real@4@40008000000000000000
	fadd	DWORD PTR __real@4@4006b400000000000000
	fcomp	DWORD PTR _flValue$[ebp]
	fnstsw	ax
	test	ah, 1
	je	SHORT $L38285

; 567  : 				flValue = flValue - 360.0f;

	fld	DWORD PTR _flValue$[ebp]
	fsub	DWORD PTR __real@4@4007b400000000000000
	fstp	DWORD PTR _flValue$[ebp]
$L38285:

; 568  : 			if( flValue < (( pseqdesc->blendstart[iBlender] + pseqdesc->blendend[iBlender] ) / 2.0f ) - 180.0f )

	mov	ecx, DWORD PTR _iBlender$[ebp]
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR _iBlender$[ebp]
	mov	esi, DWORD PTR _pseqdesc$[ebp]
	fld	DWORD PTR [edx+ecx*4+136]
	fadd	DWORD PTR [esi+eax*4+144]
	fdiv	DWORD PTR __real@4@40008000000000000000
	fsub	DWORD PTR __real@4@4006b400000000000000
	fcomp	DWORD PTR _flValue$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L38286

; 569  : 				flValue = flValue + 360.0f;

	fld	DWORD PTR _flValue$[ebp]
	fadd	DWORD PTR __real@4@4007b400000000000000
	fstp	DWORD PTR _flValue$[ebp]
$L38286:

; 572  : 
; 573  : 	int setting = 255 * (flValue - pseqdesc->blendstart[iBlender]) / (pseqdesc->blendend[iBlender] - pseqdesc->blendstart[iBlender]);

	mov	ecx, DWORD PTR _iBlender$[ebp]
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	fld	DWORD PTR _flValue$[ebp]
	fsub	DWORD PTR [edx+ecx*4+136]
	fmul	DWORD PTR __real@4@4006ff00000000000000
	mov	eax, DWORD PTR _iBlender$[ebp]
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	mov	edx, DWORD PTR _iBlender$[ebp]
	mov	esi, DWORD PTR _pseqdesc$[ebp]
	fld	DWORD PTR [ecx+eax*4+144]
	fsub	DWORD PTR [esi+edx*4+136]
	fdivp	ST(1), ST(0)
	call	__ftol
	mov	DWORD PTR _setting$[ebp], eax

; 574  : 
; 575  : 	setting = bound( 0, setting, 255 );

	cmp	DWORD PTR _setting$[ebp], 0
	jl	SHORT $L38924
	cmp	DWORD PTR _setting$[ebp], 255		; 000000ffH
	jge	SHORT $L38922
	mov	eax, DWORD PTR _setting$[ebp]
	mov	DWORD PTR -16+[ebp], eax
	jmp	SHORT $L38923
$L38922:
	mov	DWORD PTR -16+[ebp], 255		; 000000ffH
$L38923:
	mov	ecx, DWORD PTR -16+[ebp]
	mov	DWORD PTR -20+[ebp], ecx
	jmp	SHORT $L38925
$L38924:
	mov	DWORD PTR -20+[ebp], 0
$L38925:
	mov	edx, DWORD PTR -20+[ebp]
	mov	DWORD PTR _setting$[ebp], edx

; 576  : 	blending[iBlender] = setting;

	mov	eax, DWORD PTR _blending$[ebp]
	add	eax, DWORD PTR _iBlender$[ebp]
	mov	cl, BYTE PTR _setting$[ebp]
	mov	BYTE PTR [eax], cl

; 577  : 
; 578  : 	return setting * (1.0f / 255.0f) * (pseqdesc->blendend[iBlender] - pseqdesc->blendstart[iBlender]) + pseqdesc->blendstart[iBlender];

	fild	DWORD PTR _setting$[ebp]
	fmul	DWORD PTR __real@4@3ff78080810000000000
	mov	edx, DWORD PTR _iBlender$[ebp]
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR _iBlender$[ebp]
	mov	esi, DWORD PTR _pseqdesc$[ebp]
	fld	DWORD PTR [eax+edx*4+144]
	fsub	DWORD PTR [esi+ecx*4+136]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _iBlender$[ebp]
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	fadd	DWORD PTR [eax+edx*4+136]
$L38274:

; 579  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetBlending@@YAMPAXHPAEHM@Z ENDP			; SetBlending
_TEXT	ENDS
PUBLIC	?FindTransition@@YAHPAXHHPAH@Z			; FindTransition
PUBLIC	??_C@_0BK@DMEH@error?5in?5transition?5graph?$AA@ ; `string'
;	COMDAT ??_C@_0BK@DMEH@error?5in?5transition?5graph?$AA@
; File z:\xashxtsrc\server\monsters\animation.cpp
CONST	SEGMENT
??_C@_0BK@DMEH@error?5in?5transition?5graph?$AA@ DB 'error in transition '
	DB	'graph', 00H					; `string'
CONST	ENDS
;	COMDAT ?FindTransition@@YAHPAXHHPAH@Z
_TEXT	SEGMENT
_pmodel$ = 8
_iEndingAnim$ = 12
_iGoalAnim$ = 16
_piDir$ = 20
_pstudiohdr$ = -4
_pseqdesc$ = -8
_iEndNode$ = -12
_pTransition$ = -16
_iInternNode$ = -20
_i$ = -24
?FindTransition@@YAHPAXHHPAH@Z PROC NEAR		; FindTransition, COMDAT

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 583  : 	studiohdr_t *pstudiohdr;
; 584  : 	
; 585  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38296

; 586  : 		return iGoalAnim;

	mov	eax, DWORD PTR _iGoalAnim$[ebp]
	jmp	$L38293
$L38296:

; 589  : 	pseqdesc = (mstudioseqdesc_t *)((byte *)pstudiohdr + pstudiohdr->seqindex);

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	add	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR _pseqdesc$[ebp], edx

; 590  : 
; 591  : 	// bail if we're going to or from a node 0
; 592  : 	if( pseqdesc[iEndingAnim].entrynode == 0 || pseqdesc[iGoalAnim].entrynode == 0 )

	mov	eax, DWORD PTR _iEndingAnim$[ebp]
	imul	eax, 176				; 000000b0H
	mov	ecx, DWORD PTR _pseqdesc$[ebp]
	cmp	DWORD PTR [ecx+eax+160], 0
	je	SHORT $L38301
	mov	edx, DWORD PTR _iGoalAnim$[ebp]
	imul	edx, 176				; 000000b0H
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	cmp	DWORD PTR [eax+edx+160], 0
	jne	SHORT $L38300
$L38301:

; 594  : 		return iGoalAnim;

	mov	eax, DWORD PTR _iGoalAnim$[ebp]
	jmp	$L38293
$L38300:

; 598  : 
; 599  : 	// ALERT( at_console, "from %d to %d: ", pEndNode->iEndNode, pGoalNode->iStartNode );
; 600  : 
; 601  : 	if( *piDir > 0 )

	mov	ecx, DWORD PTR _piDir$[ebp]
	cmp	DWORD PTR [ecx], 0
	jle	SHORT $L38303

; 603  : 		iEndNode = pseqdesc[iEndingAnim].exitnode;

	mov	edx, DWORD PTR _iEndingAnim$[ebp]
	imul	edx, 176				; 000000b0H
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR [eax+edx+164]
	mov	DWORD PTR _iEndNode$[ebp], ecx

; 605  : 	else

	jmp	SHORT $L38304
$L38303:

; 607  : 		iEndNode = pseqdesc[iEndingAnim].entrynode;

	mov	edx, DWORD PTR _iEndingAnim$[ebp]
	imul	edx, 176				; 000000b0H
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR [eax+edx+160]
	mov	DWORD PTR _iEndNode$[ebp], ecx
$L38304:

; 609  : 
; 610  : 	if( iEndNode == pseqdesc[iGoalAnim].entrynode )

	mov	edx, DWORD PTR _iGoalAnim$[ebp]
	imul	edx, 176				; 000000b0H
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR _iEndNode$[ebp]
	cmp	ecx, DWORD PTR [eax+edx+160]
	jne	SHORT $L38305

; 612  : 		*piDir = 1;

	mov	edx, DWORD PTR _piDir$[ebp]
	mov	DWORD PTR [edx], 1

; 613  : 		return iGoalAnim;

	mov	eax, DWORD PTR _iGoalAnim$[ebp]
	jmp	$L38293
$L38305:

; 615  : 
; 616  : 	byte *pTransition = ((byte *)pstudiohdr + pstudiohdr->transitionindex);

	mov	eax, DWORD PTR _pstudiohdr$[ebp]
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	add	ecx, DWORD PTR [eax+240]
	mov	DWORD PTR _pTransition$[ebp], ecx

; 617  : 
; 618  : 	int iInternNode = pTransition[(iEndNode-1)*pstudiohdr->numtransitions + (pseqdesc[iGoalAnim].entrynode-1)];

	mov	edx, DWORD PTR _iEndNode$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _pstudiohdr$[ebp]
	imul	edx, DWORD PTR [eax+236]
	mov	ecx, DWORD PTR _iGoalAnim$[ebp]
	imul	ecx, 176				; 000000b0H
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+160]
	add	ecx, DWORD PTR _pTransition$[ebp]
	xor	eax, eax
	mov	al, BYTE PTR [ecx+edx-1]
	mov	DWORD PTR _iInternNode$[ebp], eax

; 619  : 
; 620  : 	if( iInternNode == 0 )

	cmp	DWORD PTR _iInternNode$[ebp], 0
	jne	SHORT $L38309

; 621  : 		return iGoalAnim;

	mov	eax, DWORD PTR _iGoalAnim$[ebp]
	jmp	$L38293
$L38309:

; 622  : 
; 623  : 	// look for someone going
; 624  : 	for( int i = 0; i < pstudiohdr->numseq; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L38311
$L38312:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$L38311:
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+164]
	jge	$L38313

; 626  : 		if( pseqdesc[i].entrynode == iEndNode && pseqdesc[i].exitnode == iInternNode )

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 176				; 000000b0H
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR [edx+ecx+160]
	cmp	eax, DWORD PTR _iEndNode$[ebp]
	jne	SHORT $L38314
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 176				; 000000b0H
	mov	edx, DWORD PTR _pseqdesc$[ebp]
	mov	eax, DWORD PTR [edx+ecx+164]
	cmp	eax, DWORD PTR _iInternNode$[ebp]
	jne	SHORT $L38314

; 628  : 			*piDir = 1;

	mov	ecx, DWORD PTR _piDir$[ebp]
	mov	DWORD PTR [ecx], 1

; 629  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $L38293
$L38314:

; 631  : 
; 632  : 		if( pseqdesc[i].nodeflags )

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 176				; 000000b0H
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+edx+168]
	test	ecx, ecx
	je	SHORT $L38316

; 634  : 			if( pseqdesc[i].exitnode == iEndNode && pseqdesc[i].entrynode == iInternNode )

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 176				; 000000b0H
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR [eax+edx+164]
	cmp	ecx, DWORD PTR _iEndNode$[ebp]
	jne	SHORT $L38316
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 176				; 000000b0H
	mov	eax, DWORD PTR _pseqdesc$[ebp]
	mov	ecx, DWORD PTR [eax+edx+160]
	cmp	ecx, DWORD PTR _iInternNode$[ebp]
	jne	SHORT $L38316

; 636  : 				*piDir = -1;

	mov	edx, DWORD PTR _piDir$[ebp]
	mov	DWORD PTR [edx], -1

; 637  : 				return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $L38293
$L38316:

; 640  : 	}

	jmp	$L38312
$L38313:

; 641  : 
; 642  : 	ALERT( at_console, "error in transition graph" );

	push	OFFSET FLAT:??_C@_0BK@DMEH@error?5in?5transition?5graph?$AA@ ; `string'
	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 8

; 643  : 
; 644  : 	return iGoalAnim;

	mov	eax, DWORD PTR _iGoalAnim$[ebp]
$L38293:

; 645  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FindTransition@@YAHPAXHHPAH@Z ENDP			; FindTransition
_TEXT	ENDS
PUBLIC	?SetBodygroup@@YAXPAXAAHHH@Z			; SetBodygroup
;	COMDAT ?SetBodygroup@@YAXPAXAAHHH@Z
_TEXT	SEGMENT
_pmodel$ = 8
_iBody$ = 12
_iGroup$ = 16
_iValue$ = 20
_pstudiohdr$ = -4
_pbodypart$ = -8
_iCurrent$ = -12
?SetBodygroup@@YAXPAXAAHHH@Z PROC NEAR			; SetBodygroup, COMDAT

; 648  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 649  : 	studiohdr_t *pstudiohdr;
; 650  : 	
; 651  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38326

; 652  : 		return;

	jmp	SHORT $L38323
$L38326:

; 653  : 
; 654  : 	if( iGroup > pstudiohdr->numbodyparts )

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _iGroup$[ebp]
	cmp	edx, DWORD PTR [ecx+204]
	jle	SHORT $L38327

; 655  : 		return;

	jmp	SHORT $L38323
$L38327:

; 656  : 
; 657  : 	mstudiobodyparts_t *pbodypart = (mstudiobodyparts_t *)((byte *)pstudiohdr + pstudiohdr->bodypartindex) + iGroup;

	mov	eax, DWORD PTR _pstudiohdr$[ebp]
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	add	ecx, DWORD PTR [eax+208]
	mov	edx, DWORD PTR _iGroup$[ebp]
	imul	edx, 76					; 0000004cH
	add	ecx, edx
	mov	DWORD PTR _pbodypart$[ebp], ecx

; 658  : 
; 659  : 	if( iValue >= pbodypart->nummodels )

	mov	eax, DWORD PTR _pbodypart$[ebp]
	mov	ecx, DWORD PTR _iValue$[ebp]
	cmp	ecx, DWORD PTR [eax+64]
	jl	SHORT $L38331

; 660  : 		return;

	jmp	SHORT $L38323
$L38331:

; 661  : 
; 662  : 	int iCurrent = (iBody / pbodypart->base) % pbodypart->nummodels;

	mov	edx, DWORD PTR _iBody$[ebp]
	mov	ecx, DWORD PTR _pbodypart$[ebp]
	mov	eax, DWORD PTR [edx]
	cdq
	idiv	DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _pbodypart$[ebp]
	cdq
	idiv	DWORD PTR [ecx+64]
	mov	DWORD PTR _iCurrent$[ebp], edx

; 663  : 	iBody = (iBody - (iCurrent * pbodypart->base) + (iValue * pbodypart->base));

	mov	edx, DWORD PTR _pbodypart$[ebp]
	mov	eax, DWORD PTR _iCurrent$[ebp]
	imul	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _iBody$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	eax, DWORD PTR _pbodypart$[ebp]
	mov	ecx, DWORD PTR _iValue$[ebp]
	imul	ecx, DWORD PTR [eax+68]
	add	edx, ecx
	mov	eax, DWORD PTR _iBody$[ebp]
	mov	DWORD PTR [eax], edx
$L38323:

; 664  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetBodygroup@@YAXPAXAAHHH@Z ENDP			; SetBodygroup
_TEXT	ENDS
PUBLIC	?GetBodygroup@@YAHPAXHH@Z			; GetBodygroup
;	COMDAT ?GetBodygroup@@YAHPAXHH@Z
_TEXT	SEGMENT
_pmodel$ = 8
_iBody$ = 12
_iGroup$ = 16
_pstudiohdr$ = -4
_pbodypart$ = -8
_iCurrent$ = -12
?GetBodygroup@@YAHPAXHH@Z PROC NEAR			; GetBodygroup, COMDAT

; 667  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 668  : 	studiohdr_t *pstudiohdr;
; 669  : 	
; 670  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38340

; 671  : 		return 0;

	xor	eax, eax
	jmp	SHORT $L38337
$L38340:

; 672  : 
; 673  : 	if( iGroup > pstudiohdr->numbodyparts )

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _iGroup$[ebp]
	cmp	edx, DWORD PTR [ecx+204]
	jle	SHORT $L38341

; 674  : 		return 0;

	xor	eax, eax
	jmp	SHORT $L38337
$L38341:

; 675  : 
; 676  : 	mstudiobodyparts_t *pbodypart = (mstudiobodyparts_t *)((byte *)pstudiohdr + pstudiohdr->bodypartindex) + iGroup;

	mov	eax, DWORD PTR _pstudiohdr$[ebp]
	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	add	ecx, DWORD PTR [eax+208]
	mov	edx, DWORD PTR _iGroup$[ebp]
	imul	edx, 76					; 0000004cH
	add	ecx, edx
	mov	DWORD PTR _pbodypart$[ebp], ecx

; 677  : 	if( pbodypart->nummodels <= 1 )

	mov	eax, DWORD PTR _pbodypart$[ebp]
	cmp	DWORD PTR [eax+64], 1
	jg	SHORT $L38345

; 678  : 		return 0;

	xor	eax, eax
	jmp	SHORT $L38337
$L38345:

; 679  : 
; 680  : 	int iCurrent = (iBody / pbodypart->base) % pbodypart->nummodels;

	mov	ecx, DWORD PTR _pbodypart$[ebp]
	mov	eax, DWORD PTR _iBody$[ebp]
	cdq
	idiv	DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _pbodypart$[ebp]
	cdq
	idiv	DWORD PTR [ecx+64]
	mov	DWORD PTR _iCurrent$[ebp], edx

; 681  : 
; 682  : 	return iCurrent;

	mov	eax, DWORD PTR _iCurrent$[ebp]
$L38337:

; 683  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBodygroup@@YAHPAXHH@Z ENDP				; GetBodygroup
_TEXT	ENDS
PUBLIC	?FindAttachmentByName@@YAHPAXPBD@Z		; FindAttachmentByName
;	COMDAT ?FindAttachmentByName@@YAHPAXPBD@Z
_TEXT	SEGMENT
_pmodel$ = 8
_pName$ = 12
_pstudiohdr$ = -4
_i$ = -8
_pattachment$38358 = -12
?FindAttachmentByName@@YAHPAXPBD@Z PROC NEAR		; FindAttachmentByName, COMDAT

; 686  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 687  : 	studiohdr_t *pstudiohdr;
; 688  : 	
; 689  : 	if( !( pstudiohdr = (studiohdr_t *)pmodel ))

	mov	eax, DWORD PTR _pmodel$[ebp]
	mov	DWORD PTR _pstudiohdr$[ebp], eax
	cmp	DWORD PTR _pstudiohdr$[ebp], 0
	jne	SHORT $L38353

; 690  : 		return 0;

	xor	eax, eax
	jmp	SHORT $L38350
$L38353:

; 691  : 
; 692  : 	for( int i = 0; i < pstudiohdr->numattachments; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L38355
$L38356:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$L38355:
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+212]
	jge	SHORT $L38357

; 694  : 		mstudioattachment_t	*pattachment = (mstudioattachment_t *) ((byte *)pstudiohdr + pstudiohdr->attachmentindex);

	mov	ecx, DWORD PTR _pstudiohdr$[ebp]
	mov	edx, DWORD PTR _pstudiohdr$[ebp]
	add	edx, DWORD PTR [ecx+216]
	mov	DWORD PTR _pattachment$38358[ebp], edx

; 695  : 
; 696  : 		if( !Q_stricmp( pattachment[i].name, pName ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _pattachment$38358[ebp]
	add	edx, ecx
	push	edx
	call	?Q_strnicmp@@YAHPBD0H@Z			; Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L38361

; 697  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $L38350
$L38361:

; 698  : 
; 699  : 	}

	jmp	SHORT $L38356
$L38357:

; 700  : 
; 701  : 	return -1;

	or	eax, -1
$L38350:

; 702  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FindAttachmentByName@@YAHPAXPBD@Z ENDP			; FindAttachmentByName
_TEXT	ENDS
END
