	TITLE	Z:\XashXTSRC\server\client.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_04NHIK@?$CFs?3?3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JDJH@classname?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@PMO@targetname?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06CCPD@target?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@KILF@Bad?5ent?5in?5OFFSET?$CI?$CJ?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@BH@Bad?5pev?5in?5OFFSET?$CI?$CJ?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04GOCP@null?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FOPF@parent?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08IDGH@movewith?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@FCIN@parentflags?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05JCDO@style?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MCHI@reflection?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@DCCA@vlight_cache?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_00A@?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@JICI@FUNCTION?5NOT?5IN?5TABLE?$CB?3?5?$CFs?3?$CFs?5?$CI?$CF@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09OKKL@Half?9Life?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGEN@AnimateUntilDead?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@KHDH@SUB_Remove?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@DMHA@models?1player?4mdl?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@DGKA@?9?5?$CFs?5has?5left?5the?5game?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07MPIK@reload?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03NJAM@say?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PAEI@say_team?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05JKGE@?$CFs?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@NGBO@?$CFc?$CITEAM?$CJ?5?$CFs?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06OFNJ@?$CFc?$CFs?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06MNOE@player?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LHJL@model?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@GHLF@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFs?$DO?$CC?5?$CFs?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@NJM@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFi?$DO?$CC?5?$CFs?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MGFB@fullupdate?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04JEOP@give?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04OLBH@fire?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@PEOE@Fired?5?$CFs?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04NMBB@drop?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03CBNM@fov?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@IPBG@?$CCfov?$CC?5is?5?$CC?$CFd?$CC?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03CFBD@use?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07BHGE@weapon_?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07DIEC@lastinv?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08CLAP@spectate?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@KFFO@VModEnable?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IECC@Unknown?5command?3?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04OPJK@name?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@POAB@?$CK?5?$CFs?5changed?5name?5to?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@DKLD@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFs?$DO?$CC?5changed?5name?5to@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@JKCP@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFi?$DO?$CC?5changed?5name?5to@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@KJPN@Can?8t?5instance?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@NACB@player?1sprayer?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@CGOH@player?1pl_fallpain2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@IGMC@player?1pl_fallpain3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@DAFA@player?1pl_step1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@NADP@player?1pl_step2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@HABK@player?1pl_step3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@BAOA@player?1pl_step4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IIKC@common?1npc_step1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@GIMN@common?1npc_step2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@MIOI@common?1npc_step3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@KIBC@common?1npc_step4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@LBED@player?1pl_metal1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@FBCM@player?1pl_metal2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@PBAJ@player?1pl_metal3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@JBPD@player?1pl_metal4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@IGBB@player?1pl_dirt1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GGHO@player?1pl_dirt2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@MGFL@player?1pl_dirt3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@KGKB@player?1pl_dirt4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@KCPJ@player?1pl_duct1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@ECJG@player?1pl_duct2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@OCLD@player?1pl_duct3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@ICEJ@player?1pl_duct4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@BEOK@player?1pl_grate1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@PEIF@player?1pl_grate2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@FEKA@player?1pl_grate3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@DEFK@player?1pl_grate4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@DKOO@player?1pl_slosh1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@NKIB@player?1pl_slosh2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@HKKE@player?1pl_slosh3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@BKFO@player?1pl_slosh4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@BHLL@player?1pl_tile1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@PHNE@player?1pl_tile2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@FHPB@player?1pl_tile3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@DHAL@player?1pl_tile4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@JHCO@player?1pl_tile5?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@BCPL@player?1pl_swim1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@PCJE@player?1pl_swim2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@FCLB@player?1pl_swim3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@DCEL@player?1pl_swim4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@JJNA@player?1pl_ladder1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@HJLP@player?1pl_ladder2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@NJJK@player?1pl_ladder3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@LJGA@player?1pl_ladder4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GELK@player?1pl_wade1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@IENF@player?1pl_wade2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@CEPA@player?1pl_wade3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@EEAK@player?1pl_wade4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@MAKG@debris?1wood1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@CAMJ@debris?1wood2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@IAOM@debris?1wood3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOEM@plats?1train_use1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GNEE@buttons?1spark5?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@INCL@buttons?1spark6?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@JOHE@debris?1glass1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@HOBL@debris?1glass2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@NODO@debris?1glass3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@BKIG@items?1flashlight1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@CHLM@common?1bodysplat?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@DIKC@player?1pl_pain2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@PIHN@player?1pl_pain4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@FIFI@player?1pl_pain5?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@LIDH@player?1pl_pain6?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@BIBC@player?1pl_pain7?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@BNOJ@common?1wpn_hudoff?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@DDKC@common?1wpn_hudon?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@MLCN@common?1wpn_moveselect?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@MCNG@common?1wpn_select?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@KHAC@common?1wpn_denyselect?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@ECPD@player?1geiger6?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@KCJM@player?1geiger5?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@CLJ@player?1geiger4?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GCED@player?1geiger3?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@MCGG@player?1geiger2?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@CCAJ@player?1geiger1?4wav?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@HADJ@monster_human_grunt?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@IDDB@gameinfo?4txt?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04DDGE@Xash?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LHJG@title?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07BPOH@version?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CM@LAGP@PlayerCustomization?3?5?5Couldn?8t?5g@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CL@NEEH@PlayerCustomization?3?5?5NULL?5custo@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DD@LMCP@PlayerCustomization?3?5?5Unknown?5cu@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@FEBM@info_intermission?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MNKI@Entity_Encode?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@FIBN@Custom_Encode?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@HPNM@Player_Encode?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@BIBE@mp_consistency?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@KDL@Server?5is?5enforcing?5file?5consist@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@EGBJ@z?3?2xashxtsrc?2game_shared?2utlarra@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EF@KBFD@?$CIBase?$CI?$CJ?5?$DN?$DN?5NULL?$CJ?5?$HM?$HM?5?$CI?$CGsrc?5?$DM?5Base@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@IOBG@?$CIelem?5?$DN?$DN?5Count?$CI?$CJ?$CJ?5?$HM?$HM?5IsValidInde@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@KIKJ@z?3?2xashxtsrc?2game_shared?2utlmemo@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@MOH@nGrowSize?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@KBCN@?$CBIsReadOnly?$CI?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MLLF@IsIdxValid?$CIi?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DG@DBGD@IsValidIndex?$CIelem?$CJ?5?$HM?$HM?5?$CI?5m_Size?5?$DN@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07BGLK@num?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01PLJA@0?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JCKE@m_pMemory?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?SinCos@@YAXMPAM0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector2D@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector2D@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DVector2D@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector2D@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Vector@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9Vector@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DVector@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector@@QAEPAMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QAEPAMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QBE?BVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector4D@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Vector4D@@QBE_NABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Radian@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BRadian@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Radian@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x3@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix3x3@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix3x3@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix3x3@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x3@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x4@@QAE@MMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix3x4@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix3x4@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix3x4@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x4@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix4x4@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix4x4@@QAE@ABVVector@@0M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix4x4@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix4x4@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix4x4@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix4x4@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SimpleSpline@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GET_PRIVATE@@YAPAXPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UtlMemory_CalcNewAllocationCount@@YAHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLessThan@@YA_NABQBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ENT@@YAPAUedict_s@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OFFSET@@YAHPBUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OFFSET@@YAHPAUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ENTINDEX@@YAHPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MESSAGE_BEGIN@@YAXHHPBMPAUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FNullEnt@@YAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FNullEnt@@YAHPBUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FNullEnt@@YAHPAUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FStrEq@@YAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FClassnameIs@@YAHPAUentvars_s@@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Get@EHANDLE@@QAEPAUedict_s@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BEHANDLE@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CEHANDLE@@QAEPAVCBaseEntity@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassname@CBaseEntity@@QAEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTargetname@CBaseEntity@@QAEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Spawn@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Precache@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KeyValue@CBaseEntity@@UAEXPAUKeyValueData_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ObjectCaps@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Activate@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnChangeLevel@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnTeleport@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PortalSleep@CBaseEntity@@UAEXM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPosition@CBaseEntity@@UAEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnChangeParent@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnClearParent@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnRemove@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Classify@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsRigidBody@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetState@CBaseEntity@@UAE?AW4STATE@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BloodColor@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetVehicleDriver@CBaseEntity@@UAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetToggleState@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddPoints@CBaseEntity@@UAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddPointsToTeam@CBaseEntity@@UAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GiveAmmo@CBaseEntity@@UAEHHPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDelay@CBaseEntity@@UAEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsMoving@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OverrideReset@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TransferReset@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetToggleState@CBaseEntity@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StartSneaking@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StopSneaking@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnControls@CBaseEntity@@UAEHPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSneaking@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsAlive@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsBSPModel@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsCustomModel@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReflectGauss@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HasTarget@CBaseEntity@@UAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPlayer@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsNetClient@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsMonster@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPushable@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsProjectile@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsFuncScreen@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPortal@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsTank@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsMover@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsBreakable@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TeamID@CBaseEntity@@UAEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Think@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Touch@CBaseEntity@@UAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Blocked@CBaseEntity@@UAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveDone@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CBaseEntity@@SAPAXIPAUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CBaseEntity@@SAXPAXPAUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Respawn@CBaseEntity@@UAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FunctionCheck@CBaseEntity@@QAEXPAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ThinkSet@CBaseEntity@@QAEP81@AEXXZP81@AEXXZPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearGroundEntity@CBaseEntity@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetModelType@CBaseEntity@@QAE?AW4modtype_t@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateOwner@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FBecomeProne@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?edict@CBaseEntity@@QAEPAUedict_s@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?entindex@CBaseEntity@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Center@CBaseEntity@@UAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPointSized@CBaseEntity@@UBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Illumination@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EntityToWorldTransform@CBaseEntity@@QBEABVmatrix4x4@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLocalTime@CBaseEntity@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ObjectCaps@CPointEntity@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetState@CBaseDelay@@UAE?AW4STATE@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HandleAnimEvent@CBaseAnimating@@UAEXPAUMonsterEvent_t@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetToggleState@CBaseToggle@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDelay@CBaseToggle@@UAEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Classify@CBaseMonster@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BloodColor@CBaseMonster@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MyMonsterPointer@CBaseMonster@@UAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsAlive@CBaseMonster@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStoppedActivity@CBaseMonster@@UAE?AW4Activity@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Stop@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScheduleChange@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanPlaySentence@CBaseMonster@@UAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetYawSpeed@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FValidateCover@CBaseMonster@@UAEHABVVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CoverRadius@CBaseMonster@@UAEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckAmmo@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetConditions@CBaseMonster@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HasConditions@CBaseMonster@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HearingSensitivity@CBaseMonster@@UAEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrescheduleThink@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BodyTarget@CBaseMonster@@UAE?AVVector@@ABV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsMoving@CBaseMonster@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeathSound@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AlertSound@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IdleSound@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PainSound@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StopFollowing@CBaseMonster@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BodyTarget@CBasePlayer@@UAE?AVVector@@ABV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StartSneaking@CBasePlayer@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StopSneaking@CBasePlayer@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSneaking@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsAlive@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShouldFadeOnDeath@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPlayer@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsNetClient@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ObjectCaps@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_suicide_frame@@YAXPAUentvars_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClientConnect@@YAHPAUedict_s@@PBD1QAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClientDisconnect@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?respawn@@YAXPAVCBaseEntity@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClientKill@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClientPutInServer@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Host_Say@@YAXPAUedict_s@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClientCommand@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0gametrace_s@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClientUserInfoChanged@@YAXPAUedict_s@@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ServerDeactivate@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ServerActivate@@YAXPAUedict_s@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PlayerPreThink@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PlayerPostThink@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ParmsNewLevel@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ParmsChangeLevel@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StartFrame@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndFrame@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClientPrecache@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetGameDescription@@YAPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Sys_Error@@YAXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PlayerCustomization@@YAXPAUedict_s@@PAUcustomization_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SpectatorConnect@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SpectatorDisconnect@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SpectatorThink@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetupVisibility@@YAXPAUedict_s@@0PAPAE1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddToFullPack@@YAHPAUentity_state_s@@HPAUedict_s@@1HHPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateBaseline@@YAXHHPAUentity_state_s@@PAUedict_s@@HVVector@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Entity_FieldInit@@YAXPAUdelta_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Entity_Encode@@YAXPAUdelta_s@@PBE1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Player_FieldInit@@YAXPAUdelta_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Player_Encode@@YAXPAUdelta_s@@PBE1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Custom_Entity_FieldInit@@YAXPAUdelta_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Custom_Encode@@YAXPAUdelta_s@@PBE1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterEncoders@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWeaponData@@YAHPAUedict_s@@PAUweapon_data_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateClientData@@YAXPBUedict_s@@HPAUclientdata_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CmdStart@@YAXPBUedict_s@@PBUusercmd_s@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CmdEnd@@YAXPBUedict_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConnectionlessPacket@@YAHPBUnetadr_s@@PBDPADPAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHullBounds@@YAHHPAM0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateInstancedBaselines@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0entity_state_s@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InconsistentFile@@YAHPBUedict_s@@PBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllowLagCompensation@@YAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShouldCollide@@YAHPAUedict_s@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Count@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddToTail@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEHABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBasePlayer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBaseMonster@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBaseMonster@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBaseToggle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBaseToggle@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WayPoint_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBaseAnimating@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBaseAnimating@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBaseDelay@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBaseDelay@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBaseEntity@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBaseEntity@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Base@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEPAPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetDbgInfo@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertBefore@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEHHABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Purge@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CUtlMemory@PADH@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CUtlMemory@PADH@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CUtlMemory@PADH@@QAEAAPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Base@?$CUtlMemory@PADH@@QAEPAPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ValidateGrowSize@?$CUtlMemory@PADH@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Element@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEAAPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValidIndex@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QBE_NH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GrowVector@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShiftElementsRight@?$CUtlArray@PADV?$CUtlMemory@PADH@@@@IAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyConstruct@@YAXPAPADABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsIdxValid@?$CUtlMemory@PADH@@QBE_NH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Purge@?$CUtlMemory@PADH@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsReadOnly@?$CUtlMemory@PADH@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NumAllocated@?$CUtlMemory@PADH@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Grow@?$CUtlMemory@PADH@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsExternallyAllocated@?$CUtlMemory@PADH@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Destruct@@YAXPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBasePlayer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CBaseEntity@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CBaseAnimating@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CBaseDelay@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CBaseMonster@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CBaseToggle@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?custom_entity_field_alias@@3PAUentity_field_alias_t@@A ; custom_entity_field_alias
_BSS	SEGMENT
_g_serveractive DD 01H DUP (?)
_?initialized@?1??Entity_Encode@@YAXPAUdelta_s@@PBE1@Z@4HA DD 01H DUP (?)
_?initialized@?1??Player_Encode@@YAXPAUdelta_s@@PBE1@Z@4HA DD 01H DUP (?)
_?initialized@?1??Custom_Encode@@YAXPAUdelta_s@@PBE1@Z@4HA DD 01H DUP (?)
_?requestID@?1??ClientCommand@@YAXPAUedict_s@@@Z@4HA DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_entity_field_alias DB 'origin[0]', 00H
	ORG $+22
	DD	00H
	DB	'origin[1]', 00H
	ORG $+22
	DD	00H
	DB	'origin[2]', 00H
	ORG $+22
	DD	00H
	DB	'angles[0]', 00H
	ORG $+22
	DD	00H
	DB	'angles[1]', 00H
	ORG $+22
	DD	00H
	DB	'angles[2]', 00H
	ORG $+22
	DD	00H
_player_field_alias DB 'origin[0]', 00H
	ORG $+22
	DD	00H
	DB	'origin[1]', 00H
	ORG $+22
	DD	00H
	DB	'origin[2]', 00H
	ORG $+22
	DD	00H
	ORG $+4
?custom_entity_field_alias@@3PAUentity_field_alias_t@@A DB 'origin[0]', 00H ; custom_entity_field_alias
	ORG $+22
	DD	00H
	DB	'origin[1]', 00H
	ORG $+22
	DD	00H
	DB	'origin[2]', 00H
	ORG $+22
	DD	00H
	DB	'angles[0]', 00H
	ORG $+22
	DD	00H
	DB	'angles[1]', 00H
	ORG $+22
	DD	00H
	DB	'angles[2]', 00H
	ORG $+22
	DD	00H
	DB	'skin', 00H
	ORG $+27
	DD	00H
	DB	'sequence', 00H
	ORG $+23
	DD	00H
	DB	'animtime', 00H
	ORG $+23
	DD	00H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EX0@Z@Z				; `vector constructor iterator'
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_H@YGXPAXIHP6EX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$L25385:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	cmp	DWORD PTR ___n$[ebp], 0
	jl	SHORT $L25386
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $L25385
$L25386:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?set_suicide_frame@@YAXPAUentvars_s@@@Z		; set_suicide_frame
PUBLIC	??_C@_0BC@DMHA@models?1player?4mdl?$AA@		; `string'
PUBLIC	?FStrEq@@YAHPBD0@Z				; FStrEq
EXTRN	__fltused:NEAR
EXTRN	?g_engfuncs@@3Uenginefuncs_s@@A:BYTE		; g_engfuncs
;	COMDAT ??_C@_0BC@DMHA@models?1player?4mdl?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_0BC@DMHA@models?1player?4mdl?$AA@ DB 'models/player.mdl', 00H ; `string'
CONST	ENDS
;	COMDAT ?set_suicide_frame@@YAXPAUentvars_s@@@Z
_TEXT	SEGMENT
_pev$ = 8
?set_suicide_frame@@YAXPAUentvars_s@@@Z PROC NEAR	; set_suicide_frame, COMDAT

; 58   : {       

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 59   : 	if (!FStrEq(STRING(pev->model), "models/player.mdl"))

	push	OFFSET FLAT:??_C@_0BC@DMHA@models?1player?4mdl?$AA@ ; `string'
	mov	eax, DWORD PTR _pev$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	jne	SHORT $L38681

; 60   : 		return; // allready gibbed

	jmp	SHORT $L38680
$L38681:

; 61   : 
; 62   : //	pev->frame		= $deatha11;
; 63   : 	pev->solid		= SOLID_NOT;

	mov	edx, DWORD PTR _pev$[ebp]
	mov	DWORD PTR [edx+268], 0

; 64   : 	pev->movetype	= MOVETYPE_TOSS;

	mov	eax, DWORD PTR _pev$[ebp]
	mov	DWORD PTR [eax+264], 6

; 65   : 	pev->deadflag	= DEAD_DEAD;

	mov	ecx, DWORD PTR _pev$[ebp]
	mov	DWORD PTR [ecx+368], 2

; 66   : 	pev->nextthink	= -1;

	mov	edx, DWORD PTR _pev$[ebp]
	mov	DWORD PTR [edx+260], -1082130432	; bf800000H
$L38680:

; 67   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?set_suicide_frame@@YAXPAUentvars_s@@@Z ENDP		; set_suicide_frame
_TEXT	ENDS
EXTRN	?Q_strncmp@@YAHPBD0H@Z:NEAR			; Q_strncmp
;	COMDAT ?FStrEq@@YAHPBD0@Z
_TEXT	SEGMENT
_sz1$ = 8
_sz2$ = 12
?FStrEq@@YAHPBD0@Z PROC NEAR				; FStrEq, COMDAT

; 286  : 	{ return (Q_strcmp( sz1, sz2 ) == 0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	99999					; 0001869fH
	mov	eax, DWORD PTR _sz2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz1$[ebp]
	push	ecx
	call	?Q_strncmp@@YAHPBD0H@Z			; Q_strncmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	inc	eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FStrEq@@YAHPBD0@Z ENDP					; FStrEq
_TEXT	ENDS
PUBLIC	?ClientConnect@@YAHPAUedict_s@@PBD1QAD@Z	; ClientConnect
EXTRN	?g_pGameRules@@3PAVCGameRules@@A:DWORD		; g_pGameRules
;	COMDAT ?ClientConnect@@YAHPAUedict_s@@PBD1QAD@Z
_TEXT	SEGMENT
_pEntity$ = 8
_pszName$ = 12
_pszAddress$ = 16
_szRejectReason$ = 20
?ClientConnect@@YAHPAUedict_s@@PBD1QAD@Z PROC NEAR	; ClientConnect, COMDAT

; 78   : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 79   : 	return g_pGameRules->ClientConnected( pEntity, pszName, pszAddress, szRejectReason );

	mov	eax, DWORD PTR _szRejectReason$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszAddress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszName$[ebp]
	push	edx
	mov	eax, DWORD PTR _pEntity$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	call	DWORD PTR [edx+44]

; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClientConnect@@YAHPAUedict_s@@PBD1QAD@Z ENDP		; ClientConnect
_TEXT	ENDS
PUBLIC	?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z		; MESSAGE_BEGIN
PUBLIC	??_C@_0BI@DGKA@?9?5?$CFs?5has?5left?5the?5game?6?$AA@ ; `string'
PUBLIC	?ClientDisconnect@@YAXPAUedict_s@@@Z		; ClientDisconnect
PUBLIC	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z	; CBaseEntity::Instance
PUBLIC	?entindex@CBaseEntity@@QAEHXZ			; CBaseEntity::entindex
EXTRN	?Reset@CSound@@QAEXXZ:NEAR			; CSound::Reset
EXTRN	?SoundPointerForIndex@CSoundEnt@@SAPAVCSound@@H@Z:NEAR ; CSoundEnt::SoundPointerForIndex
EXTRN	?ClientSoundIndex@CSoundEnt@@SAHPAUedict_s@@@Z:NEAR ; CSoundEnt::ClientSoundIndex
EXTRN	?Q_snprintf@@YAHPADIPBDZZ:NEAR			; Q_snprintf
EXTRN	?g_fGameOver@@3HA:DWORD				; g_fGameOver
EXTRN	?gmsgSayText@@3HA:DWORD				; gmsgSayText
EXTRN	?RelinkEntity@CBaseEntity@@QAEXHPBVVector@@H@Z:NEAR ; CBaseEntity::RelinkEntity
;	COMDAT ??_C@_0BI@DGKA@?9?5?$CFs?5has?5left?5the?5game?6?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_0BI@DGKA@?9?5?$CFs?5has?5left?5the?5game?6?$AA@ DB '- %s has left t'
	DB	'he game', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ?ClientDisconnect@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT
_pEdict$ = 8
_pEntity$ = -4
_text$ = -260
_pSound$ = -264
?ClientDisconnect@@YAXPAUedict_s@@@Z PROC NEAR		; ClientDisconnect, COMDAT

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi

; 94   : 	if (g_fGameOver)

	cmp	DWORD PTR ?g_fGameOver@@3HA, 0		; g_fGameOver
	je	SHORT $L38692

; 95   : 		return;

	jmp	$L38691
$L38692:

; 96   : 
; 97   : 	CBaseEntity *pEntity = (CBaseEntity *)CBaseEntity::Instance( pEdict );

	mov	eax, DWORD PTR _pEdict$[ebp]
	push	eax
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pEntity$[ebp], eax

; 98   : 
; 99   : 	char text[256];
; 100  : 	Q_snprintf( text, sizeof( text ), "- %s has left the game\n", STRING( pEntity->pev->netname ));

	mov	ecx, DWORD PTR _pEntity$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+464]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_0BI@DGKA@?9?5?$CFs?5has?5left?5the?5game?6?$AA@ ; `string'
	push	256					; 00000100H
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	?Q_snprintf@@YAHPADIPBDZZ		; Q_snprintf
	add	esp, 16					; 00000010H

; 101  : 
; 102  : 	MESSAGE_BEGIN( MSG_ALL, gmsgSayText, NULL );

	push	0
	push	0
	mov	edx, DWORD PTR ?gmsgSayText@@3HA	; gmsgSayText
	push	edx
	push	2
	call	?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z	; MESSAGE_BEGIN
	add	esp, 16					; 00000010H

; 103  : 		WRITE_BYTE( pEntity->entindex() );

	mov	ecx, DWORD PTR _pEntity$[ebp]
	call	?entindex@CBaseEntity@@QAEHXZ		; CBaseEntity::entindex
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+192
	add	esp, 4

; 104  : 		WRITE_STRING( text );

	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+216
	add	esp, 4

; 105  : 	MESSAGE_END();

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+188

; 106  : 
; 107  : 	CSound *pSound;
; 108  : 	pSound = CSoundEnt::SoundPointerForIndex( CSoundEnt::ClientSoundIndex( pEdict ));

	mov	ecx, DWORD PTR _pEdict$[ebp]
	push	ecx
	call	?ClientSoundIndex@CSoundEnt@@SAHPAUedict_s@@@Z ; CSoundEnt::ClientSoundIndex
	add	esp, 4
	push	eax
	call	?SoundPointerForIndex@CSoundEnt@@SAPAVCSound@@H@Z ; CSoundEnt::SoundPointerForIndex
	add	esp, 4
	mov	DWORD PTR _pSound$[ebp], eax

; 110  : 		// since this client isn't around to think anymore, reset their sound. 
; 111  : 		if ( pSound )

	cmp	DWORD PTR _pSound$[ebp], 0
	je	SHORT $L38698

; 113  : 			pSound->Reset();

	mov	ecx, DWORD PTR _pSound$[ebp]
	call	?Reset@CSound@@QAEXXZ			; CSound::Reset
$L38698:

; 116  : 
; 117  : 	// since the edict doesn't get deleted, fix it so it doesn't interfere.
; 118  : 	pEntity->pev->takedamage = DAMAGE_NO;// don't attract autoaim

	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+364], 0

; 119  : 	pEntity->pev->solid = SOLID_NOT;// nonsolid

	mov	ecx, DWORD PTR _pEntity$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+268], 0

; 120  : 	pEntity->RelinkEntity( TRUE );

	push	0
	push	0
	push	1
	mov	ecx, DWORD PTR _pEntity$[ebp]
	call	?RelinkEntity@CBaseEntity@@QAEXHPBVVector@@H@Z ; CBaseEntity::RelinkEntity

; 121  : 
; 122  : 	g_pGameRules->ClientDisconnected( pEdict );

	mov	eax, DWORD PTR _pEdict$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	call	DWORD PTR [edx+52]
$L38691:

; 123  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClientDisconnect@@YAXPAUedict_s@@@Z ENDP		; ClientDisconnect
_TEXT	ENDS
;	COMDAT ?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z
_TEXT	SEGMENT
_msg_dest$ = 8
_msg_type$ = 12
_pOrigin$ = 16
_ed$ = 20
?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z PROC NEAR	; MESSAGE_BEGIN, COMDAT

; 72   : inline void MESSAGE_BEGIN( int msg_dest, int msg_type, const float *pOrigin = NULL, edict_t *ed = NULL ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 73   : 	(*g_engfuncs.pfnMessageBegin)(msg_dest, msg_type, pOrigin, ed);

	mov	eax, DWORD PTR _ed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOrigin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg_type$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg_dest$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+184
	add	esp, 16					; 00000010H

; 74   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z ENDP		; MESSAGE_BEGIN
_TEXT	ENDS
PUBLIC	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z		; GET_PRIVATE
PUBLIC	?ENT@@YAPAUedict_s@@H@Z				; ENT
;	COMDAT ?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z
_TEXT	SEGMENT
_pEnt$ = -4
_pent$ = 8
?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z PROC NEAR	; CBaseEntity::Instance, COMDAT

; 526  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 527  : 		if ( !pent )

	cmp	DWORD PTR _pent$[ebp], 0
	jne	SHORT $L35031

; 528  : 			pent = ENT(0);

	push	0
	call	?ENT@@YAPAUedict_s@@H@Z			; ENT
	add	esp, 4
	mov	DWORD PTR _pent$[ebp], eax
$L35031:

; 529  : 		CBaseEntity *pEnt = (CBaseEntity *)GET_PRIVATE(pent); 

	mov	eax, DWORD PTR _pent$[ebp]
	push	eax
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4
	mov	DWORD PTR _pEnt$[ebp], eax

; 530  : 		return pEnt; 

	mov	eax, DWORD PTR _pEnt$[ebp]

; 531  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ENDP	; CBaseEntity::Instance
_TEXT	ENDS
;	COMDAT ?GET_PRIVATE@@YAPAXPAUedict_s@@@Z
_TEXT	SEGMENT
_pent$ = 8
?GET_PRIVATE@@YAPAXPAUedict_s@@@Z PROC NEAR		; GET_PRIVATE, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 102  : 	if ( pent )

	cmp	DWORD PTR _pent$[ebp], 0
	je	SHORT $L28281

; 103  : 		return pent->pvPrivateData;

	mov	eax, DWORD PTR _pent$[ebp]
	mov	eax, DWORD PTR [eax+124]
	jmp	SHORT $L28280
$L28281:

; 104  : 	return NULL;

	xor	eax, eax
$L28280:

; 105  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GET_PRIVATE@@YAPAXPAUedict_s@@@Z ENDP			; GET_PRIVATE
_TEXT	ENDS
;	COMDAT ?ENT@@YAPAUedict_s@@H@Z
_TEXT	SEGMENT
_eoffset$ = 8
?ENT@@YAPAUedict_s@@H@Z PROC NEAR			; ENT, COMDAT

; 157  : inline edict_t *ENT(EOFFSET eoffset)			{ return (*g_engfuncs.pfnPEntityOfEntOffset)(eoffset); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _eoffset$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+276
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ENT@@YAPAUedict_s@@H@Z ENDP				; ENT
_TEXT	ENDS
PUBLIC	?ENTINDEX@@YAHPAUedict_s@@@Z			; ENTINDEX
PUBLIC	?edict@CBaseEntity@@QAEPAUedict_s@@XZ		; CBaseEntity::edict
;	COMDAT ?entindex@CBaseEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
?entindex@CBaseEntity@@QAEHXZ PROC NEAR			; CBaseEntity::entindex, COMDAT

; 712  : 	int entindex( ) { return ENTINDEX( edict() ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	call	?ENTINDEX@@YAHPAUedict_s@@@Z		; ENTINDEX
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?entindex@CBaseEntity@@QAEHXZ ENDP			; CBaseEntity::entindex
_TEXT	ENDS
;	COMDAT ?ENTINDEX@@YAHPAUedict_s@@@Z
_TEXT	SEGMENT
_pEdict$ = 8
?ENTINDEX@@YAHPAUedict_s@@@Z PROC NEAR			; ENTINDEX, COMDAT

; 186  : inline int	  ENTINDEX(edict_t *pEdict)			{ return (*g_engfuncs.pfnIndexOfEdict)(pEdict); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _pEdict$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+284
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ENTINDEX@@YAHPAUedict_s@@@Z ENDP			; ENTINDEX
_TEXT	ENDS
PUBLIC	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z		; ENT
;	COMDAT ?edict@CBaseEntity@@QAEPAUedict_s@@XZ
_TEXT	SEGMENT
_this$ = -4
?edict@CBaseEntity@@QAEPAUedict_s@@XZ PROC NEAR		; CBaseEntity::edict, COMDAT

; 710  : 	edict_t *edict() { return ENT( pev ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?edict@CBaseEntity@@QAEPAUedict_s@@XZ ENDP		; CBaseEntity::edict
_TEXT	ENDS
EXTRN	?DBG_EntOfVars@@YAPAUedict_s@@PBUentvars_s@@@Z:NEAR ; DBG_EntOfVars
;	COMDAT ?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z
_TEXT	SEGMENT
_pev$ = 8
?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z PROC NEAR		; ENT, COMDAT

; 151  : 	inline edict_t *ENT(const entvars_t *pev)	{ return DBG_EntOfVars(pev); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?DBG_EntOfVars@@YAPAUedict_s@@PBUentvars_s@@@Z ; DBG_EntOfVars
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z ENDP		; ENT
_TEXT	ENDS
PUBLIC	__real@4@00000000000000000000
PUBLIC	??_C@_07MPIK@reload?6?$AA@			; `string'
PUBLIC	?respawn@@YAXPAVCBaseEntity@@H@Z		; respawn
EXTRN	?gpGlobals@@3PAUglobalvars_t@@A:DWORD		; gpGlobals
EXTRN	?CopyToBodyQue@@YAXPAVCBaseEntity@@@Z:NEAR	; CopyToBodyQue
;	COMDAT ??_C@_07MPIK@reload?6?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_07MPIK@reload?6?$AA@ DB 'reload', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT __real@4@00000000000000000000
CONST	SEGMENT
__real@4@00000000000000000000 DD 000000000r	; 0
CONST	ENDS
;	COMDAT ?respawn@@YAXPAVCBaseEntity@@H@Z
_TEXT	SEGMENT
_pClient$ = 8
_fCopyCorpse$ = 12
?respawn@@YAXPAVCBaseEntity@@H@Z PROC NEAR		; respawn, COMDAT

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 129  : 	if (gpGlobals->coop || gpGlobals->deathmatch)

	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	fld	DWORD PTR [eax+24]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	je	SHORT $L38704
	mov	ecx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	fld	DWORD PTR [ecx+20]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L38703
$L38704:

; 131  : 		if ( fCopyCorpse )

	cmp	DWORD PTR _fCopyCorpse$[ebp], 0
	je	SHORT $L38705

; 133  : 			// make a copy of the dead body for appearances sake
; 134  : 			CopyToBodyQue( pClient );

	mov	edx, DWORD PTR _pClient$[ebp]
	push	edx
	call	?CopyToBodyQue@@YAXPAVCBaseEntity@@@Z	; CopyToBodyQue
	add	esp, 4
$L38705:

; 136  : 
; 137  : 		// respawn player
; 138  : 		pClient->Spawn( );

	mov	eax, DWORD PTR _pClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pClient$[ebp]
	call	DWORD PTR [edx+4]

; 140  : 	else

	jmp	SHORT $L38706
$L38703:

; 142  : 		SERVER_COMMAND("reload\n");

	push	OFFSET FLAT:??_C@_07MPIK@reload?6?$AA@	; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+156
	add	esp, 4
$L38706:

; 144  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?respawn@@YAXPAVCBaseEntity@@H@Z ENDP			; respawn
_TEXT	ENDS
PUBLIC	__real@4@3fff8000000000000000
PUBLIC	?ClientKill@@YAXPAUedict_s@@@Z			; ClientKill
PUBLIC	?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z	; CBaseEntity::Instance
;	COMDAT __real@4@3fff8000000000000000
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
__real@4@3fff8000000000000000 DD 03f800000r	; 1
CONST	ENDS
;	COMDAT ?ClientKill@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT
_pEntity$ = 8
_pev$ = -4
_pl$ = -8
?ClientKill@@YAXPAUedict_s@@@Z PROC NEAR		; ClientKill, COMDAT

; 156  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 157  : 	entvars_t *pev = &pEntity->v;

	mov	eax, DWORD PTR _pEntity$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], eax

; 158  : 
; 159  : 	CBasePlayer *pl = (CBasePlayer*) CBasePlayer::Instance( pev );

	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pl$[ebp], eax

; 160  : 
; 161  : 	if ( pl->m_fNextSuicideTime > gpGlobals->time )

	mov	edx, DWORD PTR _pl$[ebp]
	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	fld	DWORD PTR [edx+2492]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L38714

; 162  : 		return;  // prevent suiciding too ofter

	jmp	SHORT $L38710
$L38714:

; 163  : 
; 164  : 	pl->m_fNextSuicideTime = gpGlobals->time + 1;  // don't let them suicide for 5 seconds after suiciding

	mov	ecx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	fld	DWORD PTR [ecx]
	fadd	DWORD PTR __real@4@3fff8000000000000000
	mov	edx, DWORD PTR _pl$[ebp]
	fstp	DWORD PTR [edx+2492]

; 165  : 
; 166  : 	// have the player kill themself
; 167  : 	pev->health = 0;

	mov	eax, DWORD PTR _pev$[ebp]
	mov	DWORD PTR [eax+352], 0

; 168  : 	pl->Killed( pev, GIB_NEVER );

	push	1
	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pl$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pl$[ebp]
	call	DWORD PTR [eax+108]
$L38710:

; 169  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClientKill@@YAXPAUedict_s@@@Z ENDP			; ClientKill
_TEXT	ENDS
;	COMDAT ?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z
_TEXT	SEGMENT
_pev$ = 8
?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z PROC NEAR ; CBaseEntity::Instance, COMDAT

; 533  : 	static CBaseEntity *Instance( entvars_t *pev ) { return Instance( ENT( pev ) ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z ENDP	; CBaseEntity::Instance
_TEXT	ENDS
PUBLIC	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z		; GetClassPtr
PUBLIC	?ClientPutInServer@@YAXPAUedict_s@@@Z		; ClientPutInServer
EXTRN	?SetCustomDecalFrames@CBasePlayer@@QAEXH@Z:NEAR	; CBasePlayer::SetCustomDecalFrames
;	COMDAT ?ClientPutInServer@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT
_pEntity$ = 8
_pPlayer$ = -4
_pev$ = -8
?ClientPutInServer@@YAXPAUedict_s@@@Z PROC NEAR		; ClientPutInServer, COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 180  : 	CBasePlayer *pPlayer;
; 181  : 
; 182  : 	entvars_t *pev = &pEntity->v;

	mov	eax, DWORD PTR _pEntity$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], eax

; 183  : 
; 184  : 	pPlayer = GetClassPtr((CBasePlayer *)pev);

	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	mov	DWORD PTR _pPlayer$[ebp], eax

; 185  : 	pPlayer->SetCustomDecalFrames(-1); // Assume none;

	push	-1
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?SetCustomDecalFrames@CBasePlayer@@QAEXH@Z ; CBasePlayer::SetCustomDecalFrames

; 186  : 
; 187  : 	// Allocate a CBasePlayer for pev, and call spawn
; 188  : 	pPlayer->Spawn() ;

	mov	edx, DWORD PTR _pPlayer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	DWORD PTR [eax+4]

; 189  : 
; 190  : 	// Reset interpolation during first frame
; 191  : 	pPlayer->pev->effects |= EF_NOINTERP;

	mov	ecx, DWORD PTR _pPlayer$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+280]
	or	al, 32					; 00000020H
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+280], eax

; 192  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClientPutInServer@@YAXPAUedict_s@@@Z ENDP		; ClientPutInServer
_TEXT	ENDS
PUBLIC	?MESSAGE_BEGIN@@YAXHHPBMPAUentvars_s@@@Z	; MESSAGE_BEGIN
PUBLIC	?FNullEnt@@YAHPBUedict_s@@@Z			; FNullEnt
PUBLIC	?Host_Say@@YAXPAUedict_s@@H@Z			; Host_Say
PUBLIC	??_C@_03NJAM@say?$AA@				; `string'
PUBLIC	??_C@_08PAEI@say_team?$AA@			; `string'
PUBLIC	??_C@_05JKGE@?$CFs?5?$CFs?$AA@			; `string'
PUBLIC	??_C@_02DILL@?$CFs?$AA@				; `string'
PUBLIC	??_C@_0O@NGBO@?$CFc?$CITEAM?$CJ?5?$CFs?3?5?$AA@	; `string'
PUBLIC	??_C@_06OFNJ@?$CFc?$CFs?3?5?$AA@		; `string'
PUBLIC	??_C@_01BJG@?6?$AA@				; `string'
PUBLIC	??_C@_06MNOE@player?$AA@			; `string'
PUBLIC	??_C@_05LHJL@model?$AA@				; `string'
PUBLIC	??_C@_0BK@GHLF@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFs?$DO?$CC?5?$CFs?5?$CC?$CFs?$CC?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@NJM@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFi?$DO?$CC?5?$CFs?5?$CC?$CFs?$CC?6?$AA@ ; `string'
EXTRN	?UTIL_LogPrintf@@YAXPADZZ:NEAR			; UTIL_LogPrintf
EXTRN	_isspace:NEAR
EXTRN	?g_teamplay@@3HA:DWORD				; g_teamplay
EXTRN	_strcat:NEAR
EXTRN	_strlen:NEAR
EXTRN	?UTIL_FindEntityByClassname@@YAPAVCBaseEntity@@PAV1@PBD@Z:NEAR ; UTIL_FindEntityByClassname
EXTRN	_stricmp:NEAR
EXTRN	_sprintf:NEAR
;	COMDAT ??_C@_03NJAM@say?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_03NJAM@say?$AA@ DB 'say', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PAEI@say_team?$AA@
CONST	SEGMENT
??_C@_08PAEI@say_team?$AA@ DB 'say_team', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JKGE@?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_05JKGE@?$CFs?5?$CFs?$AA@ DB '%s %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DILL@?$CFs?$AA@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NGBO@?$CFc?$CITEAM?$CJ?5?$CFs?3?5?$AA@
CONST	SEGMENT
??_C@_0O@NGBO@?$CFc?$CITEAM?$CJ?5?$CFs?3?5?$AA@ DB '%c(TEAM) %s: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFNJ@?$CFc?$CFs?3?5?$AA@
CONST	SEGMENT
??_C@_06OFNJ@?$CFc?$CFs?3?5?$AA@ DB '%c%s: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJG@?6?$AA@
CONST	SEGMENT
??_C@_01BJG@?6?$AA@ DB 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNOE@player?$AA@
CONST	SEGMENT
??_C@_06MNOE@player?$AA@ DB 'player', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LHJL@model?$AA@
CONST	SEGMENT
??_C@_05LHJL@model?$AA@ DB 'model', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GHLF@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFs?$DO?$CC?5?$CFs?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT
??_C@_0BK@GHLF@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFs?$DO?$CC?5?$CFs?5?$CC?$CFs?$CC?6?$AA@ DB '"'
	DB	'%s<%i><%s><%s>" %s "%s"', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NJM@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFi?$DO?$CC?5?$CFs?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT
??_C@_0BK@NJM@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFi?$DO?$CC?5?$CFs?5?$CC?$CFs?$CC?6?$AA@ DB '"'
	DB	'%s<%i><%s><%i>" %s "%s"', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ?Host_Say@@YAXPAUedict_s@@H@Z
_TEXT	SEGMENT
_pEntity$ = 8
_teamonly$ = 12
_client$ = -4
_j$ = -8
_p$ = -12
_text$ = -140
_szTemp$ = -396
_cpSay$ = -400
_cpSayTeam$ = -404
_pcmd$ = -408
_pev$ = -412
_player$ = -416
_pc$ = -420
_temp$ = -424
?Host_Say@@YAXPAUedict_s@@H@Z PROC NEAR			; Host_Say, COMDAT

; 201  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 488				; 000001e8H
	push	ebx
	push	esi
	push	edi

; 202  : 	CBasePlayer *client;
; 203  : 	int		j;
; 204  : 	char	*p;
; 205  : 	char	text[128];
; 206  : 	char    szTemp[256];
; 207  : 	const char *cpSay = "say";

	mov	DWORD PTR _cpSay$[ebp], OFFSET FLAT:??_C@_03NJAM@say?$AA@ ; `string'

; 208  : 	const char *cpSayTeam = "say_team";

	mov	DWORD PTR _cpSayTeam$[ebp], OFFSET FLAT:??_C@_08PAEI@say_team?$AA@ ; `string'

; 209  : 	const char *pcmd = CMD_ARGV(0);

	push	0
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+332
	add	esp, 4
	mov	DWORD PTR _pcmd$[ebp], eax

; 210  : 
; 211  : 	// We can get a raw string now, without the "say " prepended
; 212  : 	if ( CMD_ARGC() == 0 )

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+336
	test	eax, eax
	jne	SHORT $L38739

; 213  : 		return;

	jmp	$L38728
$L38739:

; 214  : 
; 215  : 	entvars_t *pev = &pEntity->v;

	mov	eax, DWORD PTR _pEntity$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], eax

; 216  : 	CBasePlayer* player = GetClassPtr((CBasePlayer *)pev);

	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	mov	DWORD PTR _player$[ebp], eax

; 217  : 
; 218  : 	//Not yet.
; 219  : 	if ( player->m_flNextChatTime > gpGlobals->time )

	mov	edx, DWORD PTR _player$[ebp]
	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	fld	DWORD PTR [edx+4132]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L38746

; 220  : 		 return;

	jmp	$L38728
$L38746:

; 221  : 
; 222  : 	if ( !stricmp( pcmd, cpSay) || !stricmp( pcmd, cpSayTeam ) )

	mov	ecx, DWORD PTR _cpSay$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcmd$[ebp]
	push	edx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	je	SHORT $L38748
	mov	eax, DWORD PTR _cpSayTeam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcmd$[ebp]
	push	ecx
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L38747
$L38748:

; 224  : 		if ( CMD_ARGC() >= 2 )

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+336
	cmp	eax, 2
	jl	SHORT $L38749

; 226  : 			p = (char *)CMD_ARGS();

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+328
	mov	DWORD PTR _p$[ebp], eax

; 228  : 		else

	jmp	SHORT $L38751
$L38749:

; 230  : 			// say with a blank message, nothing to do
; 231  : 			return;

	jmp	$L38728
$L38751:

; 234  : 	else  // Raw text, need to prepend argv[0]

	jmp	SHORT $L38752
$L38747:

; 236  : 		if ( CMD_ARGC() >= 2 )

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+336
	cmp	eax, 2
	jl	SHORT $L38753

; 238  : 			sprintf( szTemp, "%s %s", ( char * )pcmd, (char *)CMD_ARGS() );

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+328
	push	eax
	mov	edx, DWORD PTR _pcmd$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_05JKGE@?$CFs?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 240  : 		else

	jmp	SHORT $L38757
$L38753:

; 242  : 			// Just a one word command, use the first word...sigh
; 243  : 			sprintf( szTemp, "%s", ( char * )pcmd );

	mov	ecx, DWORD PTR _pcmd$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_02DILL@?$CFs?$AA@	; `string'
	lea	edx, DWORD PTR _szTemp$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
$L38757:

; 245  : 		p = szTemp;

	lea	eax, DWORD PTR _szTemp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$L38752:

; 247  : 
; 248  : // remove quotes if present
; 249  : 	if (*p == '"')

	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 34					; 00000022H
	jne	SHORT $L38760

; 251  : 		p++;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 252  : 		p[strlen(p)-1] = 0;

	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+eax-1], 0
$L38760:

; 254  : 
; 255  : // make sure the text has content
; 256  : 	for ( char *pc = p; pc != NULL && *pc != 0; pc++ )

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pc$[ebp], eax
	jmp	SHORT $L38762
$L38763:
	mov	ecx, DWORD PTR _pc$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pc$[ebp], ecx
$L38762:
	cmp	DWORD PTR _pc$[ebp], 0
	je	SHORT $L38764
	mov	edx, DWORD PTR _pc$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $L38764

; 258  : 		if ( !isspace( *pc ) )

	mov	ecx, DWORD PTR _pc$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $L38765

; 260  : 			pc = NULL;	// we've found an alphanumeric character,  so text is valid

	mov	DWORD PTR _pc$[ebp], 0

; 261  : 			break;

	jmp	SHORT $L38764
$L38765:

; 263  : 	}

	jmp	SHORT $L38763
$L38764:

; 264  : 	if ( pc != NULL )

	cmp	DWORD PTR _pc$[ebp], 0
	je	SHORT $L38766

; 265  : 		return;  // no character found, so say nothing

	jmp	$L38728
$L38766:

; 266  : 
; 267  : // turn on color set 2  (color on,  no sound)
; 268  : 	if ( teamonly )

	cmp	DWORD PTR _teamonly$[ebp], 0
	je	SHORT $L38767

; 269  : 		sprintf( text, "%c(TEAM) %s: ", 2, STRING( pEntity->v.netname ) );

	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+592]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	push	2
	push	OFFSET FLAT:??_C@_0O@NGBO@?$CFc?$CITEAM?$CJ?5?$CFs?3?5?$AA@ ; `string'
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 270  : 	else

	jmp	SHORT $L38769
$L38767:

; 271  : 		sprintf( text, "%c%s: ", 2, STRING( pEntity->v.netname ) );

	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+592]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	push	2
	push	OFFSET FLAT:??_C@_06OFNJ@?$CFc?$CFs?3?5?$AA@ ; `string'
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$L38769:

; 272  : 
; 273  : 	j = sizeof(text) - 2 - strlen(text);  // -2 for /n and null terminator

	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 126				; 0000007eH
	sub	ecx, eax
	mov	DWORD PTR _j$[ebp], ecx

; 274  : 	if ( (int)strlen(p) > j )

	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	cmp	eax, DWORD PTR _j$[ebp]
	jle	SHORT $L38772

; 275  : 		p[j] = 0;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	BYTE PTR [eax], 0
$L38772:

; 276  : 
; 277  : 	strcat( text, p );

	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 278  : 	strcat( text, "\n" );

	push	OFFSET FLAT:??_C@_01BJG@?6?$AA@		; `string'
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 279  : 
; 280  : 
; 281  : 	player->m_flNextChatTime = gpGlobals->time + CHAT_INTERVAL;

	mov	ecx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	fld	DWORD PTR [ecx]
	fadd	DWORD PTR __real@4@3fff8000000000000000
	mov	edx, DWORD PTR _player$[ebp]
	fstp	DWORD PTR [edx+4132]

; 282  : 
; 283  : 	// loop through all players
; 284  : 	// Start with the first player.
; 285  : 	// This may return the world in single player if the client types something between levels or during spawn
; 286  : 	// so check it, or it will infinite loop
; 287  : 
; 288  : 	client = NULL;

	mov	DWORD PTR _client$[ebp], 0
$L38775:

; 289  : 	while ( ((client = (CBasePlayer*)UTIL_FindEntityByClassname( client, "player" )) != NULL) && (!FNullEnt(client->edict())) ) 

	push	OFFSET FLAT:??_C@_06MNOE@player?$AA@	; `string'
	mov	eax, DWORD PTR _client$[ebp]
	push	eax
	call	?UTIL_FindEntityByClassname@@YAPAVCBaseEntity@@PAV1@PBD@Z ; UTIL_FindEntityByClassname
	add	esp, 8
	mov	DWORD PTR _client$[ebp], eax
	cmp	DWORD PTR _client$[ebp], 0
	je	$L38776
	mov	ecx, DWORD PTR _client$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	push	eax
	call	?FNullEnt@@YAHPBUedict_s@@@Z		; FNullEnt
	add	esp, 4
	test	eax, eax
	jne	$L38776

; 291  : 		if ( !client->pev )

	mov	ecx, DWORD PTR _client$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $L38779

; 292  : 			continue;

	jmp	SHORT $L38775
$L38779:

; 293  : 		
; 294  : 		if ( client->edict() == pEntity )

	mov	ecx, DWORD PTR _client$[ebp]
	call	?edict@CBaseEntity@@QAEPAUedict_s@@XZ	; CBaseEntity::edict
	cmp	eax, DWORD PTR _pEntity$[ebp]
	jne	SHORT $L38780

; 295  : 			continue;

	jmp	SHORT $L38775
$L38780:

; 296  : 
; 297  : 		if ( !(client->IsNetClient()) )	// Not a client ? (should never be true)

	mov	edx, DWORD PTR _client$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _client$[ebp]
	call	DWORD PTR [eax+228]
	test	eax, eax
	jne	SHORT $L38781

; 298  : 			continue;

	jmp	SHORT $L38775
$L38781:

; 299  : 
; 300  : 		if ( teamonly && g_pGameRules->PlayerRelationship(client, CBaseEntity::Instance(pEntity)) != GR_TEAMMATE )

	cmp	DWORD PTR _teamonly$[ebp], 0
	je	SHORT $L38782
	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _client$[ebp]
	push	edx
	mov	eax, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	call	DWORD PTR [edx+200]
	cmp	eax, 1
	je	SHORT $L38782

; 301  : 			continue;

	jmp	$L38775
$L38782:

; 302  : 
; 303  : 		MESSAGE_BEGIN( MSG_ONE, gmsgSayText, NULL, client->pev );

	mov	eax, DWORD PTR _client$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	0
	mov	edx, DWORD PTR ?gmsgSayText@@3HA	; gmsgSayText
	push	edx
	push	1
	call	?MESSAGE_BEGIN@@YAXHHPBMPAUentvars_s@@@Z ; MESSAGE_BEGIN
	add	esp, 16					; 00000010H

; 304  : 			WRITE_BYTE( ENTINDEX(pEntity) );

	mov	eax, DWORD PTR _pEntity$[ebp]
	push	eax
	call	?ENTINDEX@@YAHPAUedict_s@@@Z		; ENTINDEX
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+192
	add	esp, 4

; 305  : 			WRITE_STRING( text );

	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+216
	add	esp, 4

; 306  : 		MESSAGE_END();

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+188

; 307  : 
; 308  : 	}

	jmp	$L38775
$L38776:

; 309  : 
; 310  : 	// print to the sending client
; 311  : 	MESSAGE_BEGIN( MSG_ONE, gmsgSayText, NULL, &pEntity->v );

	mov	edx, DWORD PTR _pEntity$[ebp]
	add	edx, 128				; 00000080H
	push	edx
	push	0
	mov	eax, DWORD PTR ?gmsgSayText@@3HA	; gmsgSayText
	push	eax
	push	1
	call	?MESSAGE_BEGIN@@YAXHHPBMPAUentvars_s@@@Z ; MESSAGE_BEGIN
	add	esp, 16					; 00000010H

; 312  : 		WRITE_BYTE( ENTINDEX(pEntity) );

	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	?ENTINDEX@@YAHPAUedict_s@@@Z		; ENTINDEX
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+192
	add	esp, 4

; 313  : 		WRITE_STRING( text );

	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+216
	add	esp, 4

; 314  : 	MESSAGE_END();

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+188

; 315  : 
; 316  : 	// echo to server console
; 317  : 	g_engfuncs.pfnServerPrint( text );

	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+324
	add	esp, 4

; 318  : 
; 319  : 	char * temp;
; 320  : 	if ( teamonly )

	cmp	DWORD PTR _teamonly$[ebp], 0
	je	SHORT $L38784

; 321  : 		temp = "say_team";

	mov	DWORD PTR _temp$[ebp], OFFSET FLAT:??_C@_08PAEI@say_team?$AA@ ; `string'

; 322  : 	else

	jmp	SHORT $L38785
$L38784:

; 323  : 		temp = "say";

	mov	DWORD PTR _temp$[ebp], OFFSET FLAT:??_C@_03NJAM@say?$AA@ ; `string'
$L38785:

; 324  : 	
; 325  : 	// team match?
; 326  : 	if ( g_teamplay )

	cmp	DWORD PTR ?g_teamplay@@3HA, 0		; g_teamplay
	je	SHORT $L38786

; 328  : 		UTIL_LogPrintf( "\"%s<%i><%s><%s>\" %s \"%s\"\n", 
; 329  : 			STRING( pEntity->v.netname ), 
; 330  : 			GETPLAYERUSERID( pEntity ),
; 331  : 			GETPLAYERAUTHID( pEntity ),
; 332  : 			g_engfuncs.pfnInfoKeyValue( g_engfuncs.pfnGetInfoKeyBuffer( pEntity ), "model" ),
; 333  : 			temp,
; 334  : 			p );

	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _temp$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_05LHJL@model?$AA@	; `string'
	mov	eax, DWORD PTR _pEntity$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+424
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+428
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+572
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _pEntity$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+452
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+592]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_0BK@GHLF@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFs?$DO?$CC?5?$CFs?5?$CC?$CFs?$CC?6?$AA@ ; `string'
	call	?UTIL_LogPrintf@@YAXPADZZ		; UTIL_LogPrintf
	add	esp, 28					; 0000001cH

; 336  : 	else

	jmp	SHORT $L38789
$L38786:

; 338  : 		UTIL_LogPrintf( "\"%s<%i><%s><%i>\" %s \"%s\"\n", 
; 339  : 			STRING( pEntity->v.netname ), 
; 340  : 			GETPLAYERUSERID( pEntity ),
; 341  : 			GETPLAYERAUTHID( pEntity ),
; 342  : 			GETPLAYERUSERID( pEntity ),
; 343  : 			temp,
; 344  : 			p );

	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+452
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _pEntity$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+572
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pEntity$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+452
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pEntity$[ebp]
	mov	edx, DWORD PTR [ecx+592]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_0BK@NJM@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFi?$DO?$CC?5?$CFs?5?$CC?$CFs?$CC?6?$AA@ ; `string'
	call	?UTIL_LogPrintf@@YAXPADZZ		; UTIL_LogPrintf
	add	esp, 28					; 0000001cH
$L38789:
$L38728:

; 346  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Host_Say@@YAXPAUedict_s@@H@Z ENDP			; Host_Say
_TEXT	ENDS
;	COMDAT ?MESSAGE_BEGIN@@YAXHHPBMPAUentvars_s@@@Z
_TEXT	SEGMENT
_msg_dest$ = 8
_msg_type$ = 12
_pOrigin$ = 16
_ent$ = 20
?MESSAGE_BEGIN@@YAXHHPBMPAUentvars_s@@@Z PROC NEAR	; MESSAGE_BEGIN, COMDAT

; 188  : inline void MESSAGE_BEGIN( int msg_dest, int msg_type, const float *pOrigin, entvars_t *ent ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 189  : 	(*g_engfuncs.pfnMessageBegin)(msg_dest, msg_type, pOrigin, ENT(ent));

	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pOrigin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg_type$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg_dest$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+184
	add	esp, 16					; 00000010H

; 190  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MESSAGE_BEGIN@@YAXHHPBMPAUentvars_s@@@Z ENDP		; MESSAGE_BEGIN
_TEXT	ENDS
PUBLIC	?OFFSET@@YAHPBUedict_s@@@Z			; OFFSET
PUBLIC	?FNullEnt@@YAHH@Z				; FNullEnt
;	COMDAT ?FNullEnt@@YAHPBUedict_s@@@Z
_TEXT	SEGMENT
_pent$ = 8
?FNullEnt@@YAHPBUedict_s@@@Z PROC NEAR			; FNullEnt, COMDAT

; 195  : inline BOOL FNullEnt(const edict_t* pent)	{ return pent == NULL || FNullEnt(OFFSET(pent)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cmp	DWORD PTR _pent$[ebp], 0
	je	SHORT $L40220
	mov	eax, DWORD PTR _pent$[ebp]
	push	eax
	call	?OFFSET@@YAHPBUedict_s@@@Z		; OFFSET
	add	esp, 4
	push	eax
	call	?FNullEnt@@YAHH@Z			; FNullEnt
	add	esp, 4
	test	eax, eax
	jne	SHORT $L40220
	mov	DWORD PTR -4+[ebp], 0
	jmp	SHORT $L40221
$L40220:
	mov	DWORD PTR -4+[ebp], 1
$L40221:
	mov	eax, DWORD PTR -4+[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FNullEnt@@YAHPBUedict_s@@@Z ENDP			; FNullEnt
_TEXT	ENDS
PUBLIC	??_C@_0BF@KILF@Bad?5ent?5in?5OFFSET?$CI?$CJ?6?$AA@ ; `string'
;	COMDAT ??_C@_0BF@KILF@Bad?5ent?5in?5OFFSET?$CI?$CJ?6?$AA@
; File z:\xashxtsrc\server\util.h
CONST	SEGMENT
??_C@_0BF@KILF@Bad?5ent?5in?5OFFSET?$CI?$CJ?6?$AA@ DB 'Bad ent in OFFSET('
	DB	')', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ?OFFSET@@YAHPBUedict_s@@@Z
_TEXT	SEGMENT
_pent$ = 8
?OFFSET@@YAHPBUedict_s@@@Z PROC NEAR			; OFFSET, COMDAT

; 160  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 161  : #if _DEBUG
; 162  : 	if ( !pent )

	cmp	DWORD PTR _pent$[ebp], 0
	jne	SHORT $L32433

; 163  : 		ALERT( at_error, "Bad ent in OFFSET()\n" );

	push	OFFSET FLAT:??_C@_0BF@KILF@Bad?5ent?5in?5OFFSET?$CI?$CJ?6?$AA@ ; `string'
	push	4
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 8
$L32433:

; 164  : #endif
; 165  : 	return (*g_engfuncs.pfnEntOffsetOfPEntity)(pent); 

	mov	eax, DWORD PTR _pent$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+280
	add	esp, 4

; 166  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OFFSET@@YAHPBUedict_s@@@Z ENDP				; OFFSET
_TEXT	ENDS
;	COMDAT ?FNullEnt@@YAHH@Z
_TEXT	SEGMENT
_eoffset$ = 8
?FNullEnt@@YAHH@Z PROC NEAR				; FNullEnt, COMDAT

; 194  : inline BOOL FNullEnt(EOFFSET eoffset)			{ return eoffset == 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	xor	eax, eax
	cmp	DWORD PTR _eoffset$[ebp], 0
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FNullEnt@@YAHH@Z ENDP					; FNullEnt
_TEXT	ENDS
PUBLIC	??0Vector@@QAE@ABV0@@Z				; Vector::Vector
PUBLIC	??HVector@@QBE?AV0@ABV0@@Z			; Vector::operator+
PUBLIC	??DVector@@QBE?AV0@M@Z				; Vector::operator*
PUBLIC	__real@8@00000000000000000000
PUBLIC	??0gametrace_s@@QAE@XZ				; gametrace_s::gametrace_s
PUBLIC	?ClientCommand@@YAXPAUedict_s@@@Z		; ClientCommand
PUBLIC	??_C@_0L@MGFB@fullupdate?$AA@			; `string'
PUBLIC	??_C@_04JEOP@give?$AA@				; `string'
PUBLIC	??_C@_04OLBH@fire?$AA@				; `string'
PUBLIC	??_C@_0P@PEOE@Fired?5?$CFs?5?$CC?$CFs?$CC?6?$AA@ ; `string'
PUBLIC	??_C@_04NMBB@drop?$AA@				; `string'
PUBLIC	??_C@_03CBNM@fov?$AA@				; `string'
PUBLIC	??_C@_0P@IPBG@?$CCfov?$CC?5is?5?$CC?$CFd?$CC?6?$AA@ ; `string'
PUBLIC	??_C@_03CFBD@use?$AA@				; `string'
PUBLIC	??_C@_07BHGE@weapon_?$AA@			; `string'
PUBLIC	??_C@_07DIEC@lastinv?$AA@			; `string'
PUBLIC	??_C@_08CLAP@spectate?$AA@			; `string'
PUBLIC	??_C@_0L@KFFO@VModEnable?$AA@			; `string'
PUBLIC	??_C@_0BF@IECC@Unknown?5command?3?5?$CFs?6?$AA@	; `string'
EXTRN	?UTIL_VarArgs@@YAPADPADZZ:NEAR			; UTIL_VarArgs
EXTRN	?ClientPrint@@YAXPAUentvars_s@@HPBD1111@Z:NEAR	; ClientPrint
EXTRN	_atoi:NEAR
EXTRN	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ:NEAR ; CBaseEntity::GetAbsOrigin
EXTRN	?GetAbsAngles@CBaseEntity@@QBEABVVector@@XZ:NEAR ; CBaseEntity::GetAbsAngles
EXTRN	?StartObserver@CBasePlayer@@QAEXVVector@@0@Z:NEAR ; CBasePlayer::StartObserver
EXTRN	?DropPlayerItem@CBasePlayer@@QAEXPAD@Z:NEAR	; CBasePlayer::DropPlayerItem
EXTRN	?SelectLastItem@CBasePlayer@@QAEXXZ:NEAR	; CBasePlayer::SelectLastItem
EXTRN	?SelectItem@CBasePlayer@@QAEXPBD@Z:NEAR		; CBasePlayer::SelectItem
EXTRN	?GiveNamedItem@CBasePlayer@@QAEXPBD@Z:NEAR	; CBasePlayer::GiveNamedItem
EXTRN	?ForceClientDllUpdate@CBasePlayer@@QAEXXZ:NEAR	; CBasePlayer::ForceClientDllUpdate
EXTRN	_strncpy:NEAR
EXTRN	?UTIL_MakeVectors@@YAXABVVector@@@Z:NEAR	; UTIL_MakeVectors
EXTRN	_strstr:NEAR
EXTRN	?g_flWeaponCheat@@3MA:DWORD			; g_flWeaponCheat
EXTRN	?UTIL_FireTargets@@YAXPBDPAVCBaseEntity@@1W4USE_TYPE@@M@Z:NEAR ; UTIL_FireTargets
EXTRN	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z:NEAR ; UTIL_TraceLine
;	COMDAT ??_C@_0L@MGFB@fullupdate?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_0L@MGFB@fullupdate?$AA@ DB 'fullupdate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JEOP@give?$AA@
CONST	SEGMENT
??_C@_04JEOP@give?$AA@ DB 'give', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OLBH@fire?$AA@
CONST	SEGMENT
??_C@_04OLBH@fire?$AA@ DB 'fire', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PEOE@Fired?5?$CFs?5?$CC?$CFs?$CC?6?$AA@
CONST	SEGMENT
??_C@_0P@PEOE@Fired?5?$CFs?5?$CC?$CFs?$CC?6?$AA@ DB 'Fired %s "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NMBB@drop?$AA@
CONST	SEGMENT
??_C@_04NMBB@drop?$AA@ DB 'drop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CBNM@fov?$AA@
CONST	SEGMENT
??_C@_03CBNM@fov?$AA@ DB 'fov', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IPBG@?$CCfov?$CC?5is?5?$CC?$CFd?$CC?6?$AA@
CONST	SEGMENT
??_C@_0P@IPBG@?$CCfov?$CC?5is?5?$CC?$CFd?$CC?6?$AA@ DB '"fov" is "%d"', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFBD@use?$AA@
CONST	SEGMENT
??_C@_03CFBD@use?$AA@ DB 'use', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07BHGE@weapon_?$AA@
CONST	SEGMENT
??_C@_07BHGE@weapon_?$AA@ DB 'weapon_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIEC@lastinv?$AA@
CONST	SEGMENT
??_C@_07DIEC@lastinv?$AA@ DB 'lastinv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CLAP@spectate?$AA@
CONST	SEGMENT
??_C@_08CLAP@spectate?$AA@ DB 'spectate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KFFO@VModEnable?$AA@
CONST	SEGMENT
??_C@_0L@KFFO@VModEnable?$AA@ DB 'VModEnable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IECC@Unknown?5command?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BF@IECC@Unknown?5command?3?5?$CFs?6?$AA@ DB 'Unknown command: %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __real@8@00000000000000000000
CONST	SEGMENT
__real@8@00000000000000000000 DQ 00000000000000000r ; 0
CONST	ENDS
;	COMDAT ?ClientCommand@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT
$T40228 = -232
$T40229 = -244
$T40230 = -256
$T40231 = -268
_pEntity$ = 8
_pcmd$ = -4
_pstr$ = -8
_pev$ = -12
_iszItem$38815 = -16
_pPlayer$38824 = -20
_tr$38827 = -76
_pHitEnt$38833 = -80
_pPlayer$38884 = -84
_pentSpawnSpot$38889 = -88
_pSpawnSpot$38890 = -92
_command$38903 = -220
?ClientCommand@@YAXPAUedict_s@@@Z PROC NEAR		; ClientCommand, COMDAT

; 359  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi

; 360  : 	static int requestID = 0;
; 361  : 	const char *pcmd = CMD_ARGV(0);

	push	0
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+332
	add	esp, 4
	mov	DWORD PTR _pcmd$[ebp], eax

; 362  : 	const char *pstr;
; 363  : 
; 364  : 	// Is the client spawned yet?
; 365  : 	if ( !pEntity->pvPrivateData )

	mov	eax, DWORD PTR _pEntity$[ebp]
	cmp	DWORD PTR [eax+124], 0
	jne	SHORT $L38799

; 366  : 		return;

	jmp	$L38794
$L38799:

; 367  : 
; 368  : 	entvars_t *pev = &pEntity->v;

	mov	ecx, DWORD PTR _pEntity$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], ecx

; 369  : 
; 370  : 	if ( FStrEq(pcmd, "say" ) )

	push	OFFSET FLAT:??_C@_03NJAM@say?$AA@	; `string'
	mov	edx, DWORD PTR _pcmd$[ebp]
	push	edx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L38801

; 372  : 		Host_Say( pEntity, 0 );

	push	0
	mov	eax, DWORD PTR _pEntity$[ebp]
	push	eax
	call	?Host_Say@@YAXPAUedict_s@@H@Z		; Host_Say
	add	esp, 8

; 374  : 	else if ( FStrEq(pcmd, "say_team" ) )

	jmp	$L38902
$L38801:
	push	OFFSET FLAT:??_C@_08PAEI@say_team?$AA@	; `string'
	mov	ecx, DWORD PTR _pcmd$[ebp]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L38803

; 376  : 		Host_Say( pEntity, 1 );

	push	1
	mov	edx, DWORD PTR _pEntity$[ebp]
	push	edx
	call	?Host_Say@@YAXPAUedict_s@@H@Z		; Host_Say
	add	esp, 8

; 378  : 	else if ( FStrEq(pcmd, "fullupdate" ) )

	jmp	$L38902
$L38803:
	push	OFFSET FLAT:??_C@_0L@MGFB@fullupdate?$AA@ ; `string'
	mov	eax, DWORD PTR _pcmd$[ebp]
	push	eax
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L38805

; 380  : 		GetClassPtr((CBasePlayer *)pev)->ForceClientDllUpdate(); 

	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	mov	ecx, eax
	call	?ForceClientDllUpdate@CBasePlayer@@QAEXXZ ; CBasePlayer::ForceClientDllUpdate

; 382  : /*
; 383  : 	else if ( FStrEq(pcmd, "querycvar" ) )
; 384  : 	{
; 385  : 		QUERY_CLIENT_CVAR_VALUE( pEntity, CMD_ARGV(1));
; 386  : 	}
; 387  : 	else if ( FStrEq(pcmd, "querycvar2" ) )
; 388  : 	{
; 389  : 		QUERY_CLIENT_CVAR_VALUE2( pEntity, CMD_ARGV(1), requestID++ );
; 390  : 	}
; 391  : */
; 392  : 	else if ( FStrEq(pcmd, "give" ) )

	jmp	$L38902
$L38805:
	push	OFFSET FLAT:??_C@_04JEOP@give?$AA@	; `string'
	mov	edx, DWORD PTR _pcmd$[ebp]
	push	edx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L38812

; 394  : 		if ( g_flWeaponCheat != 0.0)

	fld	DWORD PTR ?g_flWeaponCheat@@3MA		; g_flWeaponCheat
	fcomp	QWORD PTR __real@8@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L38814

; 396  : 			int iszItem = ALLOC_STRING( CMD_ARGV(1) );	// Make a copy of the classname

	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+332
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+268
	add	esp, 4
	mov	DWORD PTR _iszItem$38815[ebp], eax

; 397  : 			GetClassPtr((CBasePlayer *)pev)->GiveNamedItem( STRING(iszItem) );

	mov	eax, DWORD PTR _iszItem$38815[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	mov	ecx, eax
	call	?GiveNamedItem@CBasePlayer@@QAEXPBD@Z	; CBasePlayer::GiveNamedItem
$L38814:

; 400  : 	else if ( FStrEq(pcmd, "fire") )

	jmp	$L38902
$L38812:
	push	OFFSET FLAT:??_C@_04OLBH@fire?$AA@	; `string'
	mov	edx, DWORD PTR _pcmd$[ebp]
	push	edx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	$L38821

; 402  : 		if ( g_flWeaponCheat != 0.0)

	fld	DWORD PTR ?g_flWeaponCheat@@3MA		; g_flWeaponCheat
	fcomp	QWORD PTR __real@8@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	$L38834

; 404  : 			CBaseEntity *pPlayer = CBaseEntity::Instance(pEntity);

	mov	eax, DWORD PTR _pEntity$[ebp]
	push	eax
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pPlayer$38824[ebp], eax

; 405  : 			if (CMD_ARGC() > 1)

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+336
	cmp	eax, 1
	jle	SHORT $L38825

; 407  : 				UTIL_FireTargets(CMD_ARGV(1), pPlayer, pPlayer, USE_TOGGLE, 0);

	push	0
	push	3
	mov	ecx, DWORD PTR _pPlayer$38824[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPlayer$38824[ebp]
	push	edx
	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+332
	add	esp, 4
	push	eax
	call	?UTIL_FireTargets@@YAXPBDPAVCBaseEntity@@1W4USE_TYPE@@M@Z ; UTIL_FireTargets
	add	esp, 20					; 00000014H

; 409  : 			else

	jmp	$L38834
$L38825:

; 411  : 				TraceResult tr;

	lea	ecx, DWORD PTR _tr$38827[ebp]
	call	??0gametrace_s@@QAE@XZ			; gametrace_s::gametrace_s

; 412  : 				UTIL_MakeVectors(pev->v_angle);

	mov	eax, DWORD PTR _pev$[ebp]
	add	eax, 116				; 00000074H
	push	eax
	call	?UTIL_MakeVectors@@YAXABVVector@@@Z	; UTIL_MakeVectors
	add	esp, 4

; 413  : 				UTIL_TraceLine(
; 414  : 					pPlayer->EyePosition(),
; 415  : 					pPlayer->EyePosition() + gpGlobals->v_forward * 1024,
; 416  : 					dont_ignore_monsters, pEntity, &tr
; 417  : 				);

	lea	ecx, DWORD PTR _tr$38827[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEntity$[ebp]
	push	edx
	push	0
	push	1149239296				; 44800000H
	lea	eax, DWORD PTR $T40229[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	add	ecx, 40					; 00000028H
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T40230[ebp]
	push	ecx
	lea	edx, DWORD PTR $T40228[ebp]
	push	edx
	mov	eax, DWORD PTR _pPlayer$38824[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pPlayer$38824[ebp]
	call	DWORD PTR [edx+308]
	mov	ecx, eax
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	lea	eax, DWORD PTR $T40231[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayer$38824[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pPlayer$38824[ebp]
	call	DWORD PTR [edx+308]
	push	eax
	call	?UTIL_TraceLine@@YAXABVVector@@0W4IGNORE_MONSTERS@@PAUedict_s@@PAUgametrace_s@@@Z ; UTIL_TraceLine
	add	esp, 20					; 00000014H

; 418  : 
; 419  : 				if (tr.pHit)

	cmp	DWORD PTR _tr$38827[ebp+48], 0
	je	SHORT $L38834

; 421  : 					CBaseEntity *pHitEnt = CBaseEntity::Instance(tr.pHit);

	mov	eax, DWORD PTR _tr$38827[ebp+48]
	push	eax
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pHitEnt$38833[ebp], eax

; 422  : 					if (pHitEnt)

	cmp	DWORD PTR _pHitEnt$38833[ebp], 0
	je	SHORT $L38834

; 424  : 						pHitEnt->Use(pPlayer, pPlayer, USE_TOGGLE, 0);

	push	0
	push	3
	mov	ecx, DWORD PTR _pPlayer$38824[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPlayer$38824[ebp]
	push	edx
	mov	eax, DWORD PTR _pHitEnt$38833[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pHitEnt$38833[ebp]
	call	DWORD PTR [edx+276]

; 425  : 						ClientPrint( pev, HUD_PRINTCONSOLE, UTIL_VarArgs( "Fired %s \"%s\"\n", STRING(pHitEnt->pev->classname), STRING(pHitEnt->pev->targetname) ) );

	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _pHitEnt$38833[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+460]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pHitEnt$38833[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_0P@PEOE@Fired?5?$CFs?5?$CC?$CFs?$CC?6?$AA@ ; `string'
	call	?UTIL_VarArgs@@YAPADPADZZ		; UTIL_VarArgs
	add	esp, 12					; 0000000cH
	push	eax
	push	2
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?ClientPrint@@YAXPAUentvars_s@@HPBD1111@Z ; ClientPrint
	add	esp, 28					; 0000001cH
$L38834:

; 431  : 	else if ( FStrEq(pcmd, "drop" ) )

	jmp	$L38902
$L38821:
	push	OFFSET FLAT:??_C@_04NMBB@drop?$AA@	; `string'
	mov	ecx, DWORD PTR _pcmd$[ebp]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L38837

; 433  : 		// player is dropping an item. 
; 434  : 		GetClassPtr((CBasePlayer *)pev)->DropPlayerItem((char *)CMD_ARGV(1));

	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+332
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _pev$[ebp]
	push	edx
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	mov	ecx, eax
	call	?DropPlayerItem@CBasePlayer@@QAEXPAD@Z	; CBasePlayer::DropPlayerItem

; 436  : 	else if ( FStrEq(pcmd, "fov" ) )

	jmp	$L38902
$L38837:
	push	OFFSET FLAT:??_C@_03CBNM@fov?$AA@	; `string'
	mov	eax, DWORD PTR _pcmd$[ebp]
	push	eax
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L38845

; 438  : 		if ( g_flWeaponCheat && CMD_ARGC() > 1)

	fld	DWORD PTR ?g_flWeaponCheat@@3MA		; g_flWeaponCheat
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L38847
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+336
	cmp	eax, 1
	jle	SHORT $L38847

; 440  : 			GetClassPtr((CBasePlayer *)pev)->m_iFOV = atoi( CMD_ARGV(1) );

	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+332
	add	esp, 4
	push	eax
	call	_atoi
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	mov	DWORD PTR [eax+2936], esi

; 442  : 		else

	jmp	SHORT $L38852
$L38847:

; 444  : 			CLIENT_PRINTF( pEntity, print_console, UTIL_VarArgs( "\"fov\" is \"%d\"\n", (int)GetClassPtr((CBasePlayer *)pev)->m_iFOV ) );

	mov	edx, DWORD PTR _pev$[ebp]
	push	edx
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	mov	eax, DWORD PTR [eax+2936]
	push	eax
	push	OFFSET FLAT:??_C@_0P@IPBG@?$CCfov?$CC?5is?5?$CC?$CFd?$CC?6?$AA@ ; `string'
	call	?UTIL_VarArgs@@YAPADPADZZ		; UTIL_VarArgs
	add	esp, 8
	push	eax
	push	0
	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+320
	add	esp, 12					; 0000000cH
$L38852:

; 447  : 	else if ( FStrEq(pcmd, "use" ) )

	jmp	$L38902
$L38845:
	push	OFFSET FLAT:??_C@_03CFBD@use?$AA@	; `string'
	mov	edx, DWORD PTR _pcmd$[ebp]
	push	edx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L38860

; 449  : 		GetClassPtr((CBasePlayer *)pev)->SelectItem((char *)CMD_ARGV(1));

	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+332
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	mov	ecx, eax
	call	?SelectItem@CBasePlayer@@QAEXPBD@Z	; CBasePlayer::SelectItem

; 451  : 	else if (((pstr = strstr(pcmd, "weapon_")) != NULL)  && (pstr == pcmd))

	jmp	$L38902
$L38860:
	push	OFFSET FLAT:??_C@_07BHGE@weapon_?$AA@	; `string'
	mov	ecx, DWORD PTR _pcmd$[ebp]
	push	ecx
	call	_strstr
	add	esp, 8
	mov	DWORD PTR _pstr$[ebp], eax
	cmp	DWORD PTR _pstr$[ebp], 0
	je	SHORT $L38868
	mov	edx, DWORD PTR _pstr$[ebp]
	cmp	edx, DWORD PTR _pcmd$[ebp]
	jne	SHORT $L38868

; 453  : 		GetClassPtr((CBasePlayer *)pev)->SelectItem(pcmd);

	mov	eax, DWORD PTR _pcmd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	mov	ecx, eax
	call	?SelectItem@CBasePlayer@@QAEXPBD@Z	; CBasePlayer::SelectItem

; 455  : 	else if (FStrEq(pcmd, "lastinv" ))

	jmp	$L38902
$L38868:
	push	OFFSET FLAT:??_C@_07DIEC@lastinv?$AA@	; `string'
	mov	edx, DWORD PTR _pcmd$[ebp]
	push	edx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L38875

; 457  : 		GetClassPtr((CBasePlayer *)pev)->SelectLastItem();

	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	mov	ecx, eax
	call	?SelectLastItem@CBasePlayer@@QAEXXZ	; CBasePlayer::SelectLastItem

; 459  : 	else if ( FStrEq( pcmd, "spectate" ) && (pev->flags & FL_PROXY) )	// added for proxy support

	jmp	$L38902
$L38875:
	push	OFFSET FLAT:??_C@_08CLAP@spectate?$AA@	; `string'
	mov	ecx, DWORD PTR _pcmd$[ebp]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L38882
	mov	edx, DWORD PTR _pev$[ebp]
	mov	eax, DWORD PTR [edx+420]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $L38882

; 461  : 		CBasePlayer * pPlayer = GetClassPtr((CBasePlayer *)pev);

	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	mov	DWORD PTR _pPlayer$38884[ebp], eax

; 462  : 
; 463  : 		edict_t *pentSpawnSpot = g_pGameRules->GetPlayerSpawnSpot( pPlayer );

	mov	edx, DWORD PTR _pPlayer$38884[ebp]
	push	edx
	mov	eax, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	call	DWORD PTR [edx+88]
	mov	DWORD PTR _pentSpawnSpot$38889[ebp], eax

; 464  : 		CBaseEntity *pSpawnSpot = CBaseEntity::Instance( pentSpawnSpot );

	mov	eax, DWORD PTR _pentSpawnSpot$38889[ebp]
	push	eax
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pSpawnSpot$38890[ebp], eax

; 465  : 		pPlayer->StartObserver( pSpawnSpot->GetAbsOrigin(), pSpawnSpot->GetAbsAngles());

	mov	ecx, DWORD PTR _pSpawnSpot$38890[ebp]
	call	?GetAbsAngles@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsAngles
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	push	eax
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	ecx, DWORD PTR _pSpawnSpot$38890[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	push	eax
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	ecx, DWORD PTR _pPlayer$38884[ebp]
	call	?StartObserver@CBasePlayer@@QAEXVVector@@0@Z ; CBasePlayer::StartObserver

; 467  : 	else if ( g_pGameRules->ClientCommand( GetClassPtr((CBasePlayer *)pev), pcmd ) )

	jmp	$L38902
$L38882:
	mov	ecx, DWORD PTR _pcmd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pev$[ebp]
	push	edx
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	call	DWORD PTR [edx+96]
	test	eax, eax
	je	SHORT $L38898

; 471  : 	else if ( FStrEq(pcmd, "VModEnable") )

	jmp	SHORT $L38902
$L38898:
	push	OFFSET FLAT:??_C@_0L@KFFO@VModEnable?$AA@ ; `string'
	mov	eax, DWORD PTR _pcmd$[ebp]
	push	eax
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L38900

; 473  : 		// clear 'Unknown command: VModEnable' in singleplayer
; 474  : 		return;

	jmp	SHORT $L38794
$L38900:

; 478  : 		// tell the user they entered an unknown command
; 479  : 		char command[128];
; 480  : 
; 481  : 		// check the length of the command (prevents crash)
; 482  : 		// max total length is 192 ...and we're adding a string below ("Unknown command: %s\n")
; 483  : 		strncpy( command, pcmd, 127 );

	push	127					; 0000007fH
	mov	ecx, DWORD PTR _pcmd$[ebp]
	push	ecx
	lea	edx, DWORD PTR _command$38903[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 484  : 		command[127] = '\0';

	mov	BYTE PTR _command$38903[ebp+127], 0

; 485  : 
; 486  : 		// tell the user they entered an unknown command
; 487  : 		ClientPrint( &pEntity->v, HUD_PRINTCONSOLE, UTIL_VarArgs( "Unknown command: %s\n", command ) );

	push	0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _command$38903[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BF@IECC@Unknown?5command?3?5?$CFs?6?$AA@ ; `string'
	call	?UTIL_VarArgs@@YAPADPADZZ		; UTIL_VarArgs
	add	esp, 8
	push	eax
	push	2
	mov	ecx, DWORD PTR _pEntity$[ebp]
	add	ecx, 128				; 00000080H
	push	ecx
	call	?ClientPrint@@YAXPAUentvars_s@@HPBD1111@Z ; ClientPrint
	add	esp, 28					; 0000001cH
$L38902:
$L38794:

; 489  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClientCommand@@YAXPAUedict_s@@@Z ENDP			; ClientCommand
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8
_this$ = -4
??0Vector@@QAE@ABV0@@Z PROC NEAR			; Vector::Vector, COMDAT

; 136  : 	inline Vector(const Vector& v)		{ x = v.x; y = v.y; z = v.z;		   }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector@@QAE@ABV0@@Z ENDP				; Vector::Vector
_TEXT	ENDS
PUBLIC	??0Vector@@QAE@MMM@Z				; Vector::Vector
;	COMDAT ??HVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
_v$ = 12
___$ReturnUdt$ = 8
_this$ = -4
$T40240 = -16
??HVector@@QBE?AV0@ABV0@@Z PROC NEAR			; Vector::operator+, COMDAT

; 149  : 	inline Vector operator+(const Vector& v) const	{ return Vector(x+v.x, y+v.y, z+v.z);	   }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+8]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fadd	DWORD PTR [eax+4]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fadd	DWORD PTR [edx]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T40240[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??HVector@@QBE?AV0@ABV0@@Z ENDP				; Vector::operator+
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT
_X$ = 8
_Y$ = 12
_Z$ = 16
_this$ = -4
??0Vector@@QAE@MMM@Z PROC NEAR				; Vector::Vector, COMDAT

; 135  : 	inline Vector(float X, float Y, float Z)	{ x = X; y = Y; z = Z;                     }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _X$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _Y$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _Z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector@@QAE@MMM@Z ENDP				; Vector::Vector
_TEXT	ENDS
;	COMDAT ??DVector@@QBE?AV0@M@Z
_TEXT	SEGMENT
_fl$ = 12
___$ReturnUdt$ = 8
_this$ = -4
$T40245 = -16
??DVector@@QBE?AV0@M@Z PROC NEAR			; Vector::operator*, COMDAT

; 153  : 	inline Vector operator*(float fl) const		{ return Vector(x*fl, y*fl, z*fl);	   }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fl$[ebp]
	fmul	DWORD PTR [eax+8]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fl$[ebp]
	fmul	DWORD PTR [ecx+4]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fl$[ebp]
	fmul	DWORD PTR [edx]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T40245[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??DVector@@QBE?AV0@M@Z ENDP				; Vector::operator*
_TEXT	ENDS
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
;	COMDAT ??0gametrace_s@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0gametrace_s@@QAE@XZ PROC NEAR			; gametrace_s::gametrace_s, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0gametrace_s@@QAE@XZ ENDP				; gametrace_s::gametrace_s
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Vector@@QAE@XZ PROC NEAR				; Vector::Vector, COMDAT

; 134  : 	inline Vector(void)				{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
_TEXT	ENDS
PUBLIC	??_C@_04OPJK@name?$AA@				; `string'
PUBLIC	??_C@_0BJ@POAB@?$CK?5?$CFs?5changed?5name?5to?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0CH@DKLD@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFs?$DO?$CC?5changed?5name?5to@ ; `string'
PUBLIC	??_C@_0CH@JKCP@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFi?$DO?$CC?5changed?5name?5to@ ; `string'
PUBLIC	?ClientUserInfoChanged@@YAXPAUedict_s@@PAD@Z	; ClientUserInfoChanged
;	COMDAT ??_C@_04OPJK@name?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_04OPJK@name?$AA@ DB 'name', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@POAB@?$CK?5?$CFs?5changed?5name?5to?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BJ@POAB@?$CK?5?$CFs?5changed?5name?5to?5?$CFs?6?$AA@ DB '* %s chan'
	DB	'ged name to %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DKLD@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFs?$DO?$CC?5changed?5name?5to@
CONST	SEGMENT
??_C@_0CH@DKLD@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFs?$DO?$CC?5changed?5name?5to@ DB '"'
	DB	'%s<%i><%s><%s>" changed name to "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JKCP@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFi?$DO?$CC?5changed?5name?5to@
CONST	SEGMENT
??_C@_0CH@JKCP@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFi?$DO?$CC?5changed?5name?5to@ DB '"'
	DB	'%s<%i><%s><%i>" changed name to "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?ClientUserInfoChanged@@YAXPAUedict_s@@PAD@Z
_TEXT	SEGMENT
_sName$38914 = -256
_pName$38915 = -260
_pApersand$38916 = -264
_text$38921 = -520
_pEntity$ = 8
_infobuffer$ = 12
?ClientUserInfoChanged@@YAXPAUedict_s@@PAD@Z PROC NEAR	; ClientUserInfoChanged, COMDAT

; 502  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 584				; 00000248H
	push	ebx
	push	esi
	push	edi

; 503  : 	// Is the client spawned yet?
; 504  : 	if ( !pEntity->pvPrivateData )

	mov	eax, DWORD PTR _pEntity$[ebp]
	cmp	DWORD PTR [eax+124], 0
	jne	SHORT $L38911

; 505  : 		return;

	jmp	$L38910
$L38911:

; 506  : 
; 507  : 	// msg everyone if someone changes their name,  and it isn't the first time (changing no name to current name)
; 508  : 	if ( pEntity->v.netname && STRING(pEntity->v.netname)[0] != 0 && !FStrEq( STRING(pEntity->v.netname), g_engfuncs.pfnInfoKeyValue( infobuffer, "name" )) )

	mov	ecx, DWORD PTR _pEntity$[ebp]
	cmp	DWORD PTR [ecx+592], 0
	je	$L38925
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+592]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$L38925
	push	OFFSET FLAT:??_C@_04OPJK@name?$AA@	; `string'
	mov	edx, DWORD PTR _infobuffer$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+428
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+592]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	jne	$L38925

; 510  : 		char sName[256];
; 511  : 		char *pName = g_engfuncs.pfnInfoKeyValue( infobuffer, "name" );

	push	OFFSET FLAT:??_C@_04OPJK@name?$AA@	; `string'
	mov	edx, DWORD PTR _infobuffer$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+428
	add	esp, 8
	mov	DWORD PTR _pName$38915[ebp], eax

; 512  : 		strncpy( sName, pName, sizeof(sName) - 1 );

	push	255					; 000000ffH
	mov	eax, DWORD PTR _pName$38915[ebp]
	push	eax
	lea	ecx, DWORD PTR _sName$38914[ebp]
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 513  : 		sName[ sizeof(sName) - 1 ] = '\0';

	mov	BYTE PTR _sName$38914[ebp+255], 0

; 514  : 
; 515  : 		// First parse the name and remove any %'s
; 516  : 		for ( char *pApersand = sName; pApersand != NULL && *pApersand != 0; pApersand++ )

	lea	edx, DWORD PTR _sName$38914[ebp]
	mov	DWORD PTR _pApersand$38916[ebp], edx
	jmp	SHORT $L38917
$L38918:
	mov	eax, DWORD PTR _pApersand$38916[ebp]
	add	eax, 1
	mov	DWORD PTR _pApersand$38916[ebp], eax
$L38917:
	cmp	DWORD PTR _pApersand$38916[ebp], 0
	je	SHORT $L38919
	mov	ecx, DWORD PTR _pApersand$38916[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $L38919

; 518  : 			// Replace it with a space
; 519  : 			if ( *pApersand == '%' )

	mov	eax, DWORD PTR _pApersand$38916[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 37					; 00000025H
	jne	SHORT $L38920

; 520  : 				*pApersand = ' ';

	mov	edx, DWORD PTR _pApersand$38916[ebp]
	mov	BYTE PTR [edx], 32			; 00000020H
$L38920:

; 521  : 		}

	jmp	SHORT $L38918
$L38919:

; 522  : 
; 523  : 		// Set the name
; 524  : 		g_engfuncs.pfnSetClientKeyValue( ENTINDEX(pEntity), infobuffer, "name", sName );

	lea	eax, DWORD PTR _sName$38914[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_04OPJK@name?$AA@	; `string'
	mov	ecx, DWORD PTR _infobuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEntity$[ebp]
	push	edx
	call	?ENTINDEX@@YAHPAUedict_s@@@Z		; ENTINDEX
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+436
	add	esp, 16					; 00000010H

; 525  : 
; 526  : 		char text[256];
; 527  : 		sprintf( text, "* %s changed name to %s\n", STRING(pEntity->v.netname), g_engfuncs.pfnInfoKeyValue( infobuffer, "name" ) );

	push	OFFSET FLAT:??_C@_04OPJK@name?$AA@	; `string'
	mov	eax, DWORD PTR _infobuffer$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+428
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _pEntity$[ebp]
	mov	edx, DWORD PTR [ecx+592]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_0BJ@POAB@?$CK?5?$CFs?5changed?5name?5to?5?$CFs?6?$AA@ ; `string'
	lea	eax, DWORD PTR _text$38921[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 528  : 		MESSAGE_BEGIN( MSG_ALL, gmsgSayText, NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR ?gmsgSayText@@3HA	; gmsgSayText
	push	ecx
	push	2
	call	?MESSAGE_BEGIN@@YAXHHPBMPAUedict_s@@@Z	; MESSAGE_BEGIN
	add	esp, 16					; 00000010H

; 529  : 			WRITE_BYTE( ENTINDEX(pEntity) );

	mov	edx, DWORD PTR _pEntity$[ebp]
	push	edx
	call	?ENTINDEX@@YAHPAUedict_s@@@Z		; ENTINDEX
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+192
	add	esp, 4

; 530  : 			WRITE_STRING( text );

	lea	eax, DWORD PTR _text$38921[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+216
	add	esp, 4

; 531  : 		MESSAGE_END();

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+188

; 532  : 
; 533  : 		// team match?
; 534  : 		if ( g_teamplay )

	cmp	DWORD PTR ?g_teamplay@@3HA, 0		; g_teamplay
	je	SHORT $L38923

; 536  : 			UTIL_LogPrintf( "\"%s<%i><%s><%s>\" changed name to \"%s\"\n", 
; 537  : 				STRING( pEntity->v.netname ), 
; 538  : 				GETPLAYERUSERID( pEntity ), 
; 539  : 				GETPLAYERAUTHID( pEntity ),
; 540  : 				g_engfuncs.pfnInfoKeyValue( infobuffer, "model" ), 
; 541  : 				g_engfuncs.pfnInfoKeyValue( infobuffer, "name" ) );

	push	OFFSET FLAT:??_C@_04OPJK@name?$AA@	; `string'
	mov	ecx, DWORD PTR _infobuffer$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+428
	add	esp, 8
	push	eax
	push	OFFSET FLAT:??_C@_05LHJL@model?$AA@	; `string'
	mov	edx, DWORD PTR _infobuffer$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+428
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _pEntity$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+572
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+452
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+592]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_0CH@DKLD@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFs?$DO?$CC?5changed?5name?5to@ ; `string'
	call	?UTIL_LogPrintf@@YAXPADZZ		; UTIL_LogPrintf
	add	esp, 24					; 00000018H

; 543  : 		else

	jmp	SHORT $L38925
$L38923:

; 545  : 			UTIL_LogPrintf( "\"%s<%i><%s><%i>\" changed name to \"%s\"\n", 
; 546  : 				STRING( pEntity->v.netname ), 
; 547  : 				GETPLAYERUSERID( pEntity ), 
; 548  : 				GETPLAYERAUTHID( pEntity ),
; 549  : 				GETPLAYERUSERID( pEntity ), 
; 550  : 				g_engfuncs.pfnInfoKeyValue( infobuffer, "name" ) );

	push	OFFSET FLAT:??_C@_04OPJK@name?$AA@	; `string'
	mov	ecx, DWORD PTR _infobuffer$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+428
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _pEntity$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+452
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pEntity$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+572
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+452
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+592]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_0CH@JKCP@?$CC?$CFs?$DM?$CFi?$DO?$DM?$CFs?$DO?$DM?$CFi?$DO?$CC?5changed?5name?5to@ ; `string'
	call	?UTIL_LogPrintf@@YAXPADZZ		; UTIL_LogPrintf
	add	esp, 24					; 00000018H
$L38925:

; 553  : 
; 554  : 	g_pGameRules->ClientUserInfoChanged( GetClassPtr((CBasePlayer *)&pEntity->v), infobuffer );

	mov	ecx, DWORD PTR _infobuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEntity$[ebp]
	add	edx, 128				; 00000080H
	push	edx
	call	?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z	; GetClassPtr
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	call	DWORD PTR [edx+100]
$L38910:

; 555  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClientUserInfoChanged@@YAXPAUedict_s@@PAD@Z ENDP	; ClientUserInfoChanged
_TEXT	ENDS
PUBLIC	?ServerDeactivate@@YAXXZ			; ServerDeactivate
EXTRN	?MakeEmptyString@CStringPool@@QAEXXZ:NEAR	; CStringPool::MakeEmptyString
EXTRN	?FreeAll@CStringPool@@QAEXXZ:NEAR		; CStringPool::FreeAll
EXTRN	?WorldPhysic@@3PAVIPhysicLayer@@A:DWORD		; WorldPhysic
EXTRN	?g_GameStringPool@@3VCStringPool@@A:BYTE	; g_GameStringPool
;	COMDAT ?ServerDeactivate@@YAXXZ
_TEXT	SEGMENT
?ServerDeactivate@@YAXXZ PROC NEAR			; ServerDeactivate, COMDAT

; 560  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 561  : //	ALERT( at_console, "ServerDeactivate()\n" );
; 562  : 
; 563  : 	// It's possible that the engine will call this function more times than is necessary
; 564  : 	//  Therefore, only run it one time for each call to ServerActivate 
; 565  : 	if ( g_serveractive != 1 )

	cmp	DWORD PTR _g_serveractive, 1
	je	SHORT $L38935

; 567  : 		return;

	jmp	SHORT $L38934
$L38935:

; 569  : 
; 570  : 	g_serveractive = 0;

	mov	DWORD PTR _g_serveractive, 0

; 571  : 
; 572  : 	// Peform any shutdown operations here...
; 573  : 	WorldPhysic->FreeAllBodies();

	mov	eax, DWORD PTR ?WorldPhysic@@3PAVIPhysicLayer@@A ; WorldPhysic
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?WorldPhysic@@3PAVIPhysicLayer@@A ; WorldPhysic
	call	DWORD PTR [edx+140]

; 574  : 
; 575  : 	// purge all strings
; 576  : 	g_GameStringPool.FreeAll();

	mov	ecx, OFFSET FLAT:?g_GameStringPool@@3VCStringPool@@A
	call	?FreeAll@CStringPool@@QAEXXZ		; CStringPool::FreeAll

; 577  : 	g_GameStringPool.MakeEmptyString();

	mov	ecx, OFFSET FLAT:?g_GameStringPool@@3VCStringPool@@A
	call	?MakeEmptyString@CStringPool@@QAEXXZ	; CStringPool::MakeEmptyString
$L38934:

; 578  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ServerDeactivate@@YAXXZ ENDP				; ServerDeactivate
_TEXT	ENDS
PUBLIC	??_C@_0BD@KJPN@Can?8t?5instance?5?$CFs?6?$AA@	; `string'
PUBLIC	?ServerActivate@@YAXPAUedict_s@@HH@Z		; ServerActivate
EXTRN	?LinkUserMessages@@YAXXZ:NEAR			; LinkUserMessages
;	COMDAT ??_C@_0BD@KJPN@Can?8t?5instance?5?$CFs?6?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_0BD@KJPN@Can?8t?5instance?5?$CFs?6?$AA@ DB 'Can''t instance %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?ServerActivate@@YAXPAUedict_s@@HH@Z
_TEXT	SEGMENT
_pEdictList$ = 8
_edictCount$ = 12
_clientMax$ = 16
_i$ = -4
_pClass$ = -8
?ServerActivate@@YAXPAUedict_s@@HH@Z PROC NEAR		; ServerActivate, COMDAT

; 581  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 582  : 	int				i;
; 583  : 	CBaseEntity		*pClass;
; 584  : 
; 585  : //	ALERT( at_console, "ServerActivate()\n" );
; 586  : 
; 587  : 	// Every call to ServerActivate should be matched by a call to ServerDeactivate
; 588  : 	g_serveractive = 1;

	mov	DWORD PTR _g_serveractive, 1

; 589  : 
; 590  : 	LinkUserMessages ();

	call	?LinkUserMessages@@YAXXZ		; LinkUserMessages

; 591  : 
; 592  : 	// Clients have not been initialized yet
; 593  : 	for ( i = 0; i < edictCount; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L38943
$L38944:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L38943:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _edictCount$[ebp]
	jge	$L38945

; 595  : 		if ( pEdictList[i].free )

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 804				; 00000324H
	mov	eax, DWORD PTR _pEdictList$[ebp]
	cmp	DWORD PTR [eax+edx], 0
	je	SHORT $L38946

; 596  : 			continue;

	jmp	SHORT $L38944
$L38946:

; 597  : 		
; 598  : 		// Clients aren't necessarily initialized until ClientPutInServer()
; 599  : 		if ( i < clientMax || !pEdictList[i].pvPrivateData )

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _clientMax$[ebp]
	jl	SHORT $L38948
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 804				; 00000324H
	mov	eax, DWORD PTR _pEdictList$[ebp]
	cmp	DWORD PTR [eax+edx+124], 0
	jne	SHORT $L38947
$L38948:

; 600  : 			continue;

	jmp	SHORT $L38944
$L38947:

; 601  : 
; 602  : 		pClass = CBaseEntity::Instance( &pEdictList[i] );

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 804				; 00000324H
	mov	edx, DWORD PTR _pEdictList$[ebp]
	add	edx, ecx
	push	edx
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pClass$[ebp], eax

; 603  : 		// Activate this entity if it's got a class & isn't dormant
; 604  : 		if ( pClass && !(pClass->pev->flags & FL_DORMANT) )

	cmp	DWORD PTR _pClass$[ebp], 0
	je	SHORT $L38949
	mov	eax, DWORD PTR _pClass$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+420]
	and	edx, -2147483648			; 80000000H
	test	edx, edx
	jne	SHORT $L38949

; 606  : 			pClass->Activate();

	mov	eax, DWORD PTR _pClass$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pClass$[ebp]
	call	DWORD PTR [edx+28]

; 608  : 		else

	jmp	SHORT $L38950
$L38949:

; 610  : 			ALERT( at_console, "Can't instance %s\n", STRING(pEdictList[i].v.classname) );

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 804				; 00000324H
	mov	ecx, DWORD PTR _pEdictList$[ebp]
	mov	edx, DWORD PTR [ecx+eax+128]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_0BD@KJPN@Can?8t?5instance?5?$CFs?6?$AA@ ; `string'
	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 12					; 0000000cH
$L38950:

; 612  : 	}

	jmp	$L38944
$L38945:

; 613  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ServerActivate@@YAXPAUedict_s@@HH@Z ENDP		; ServerActivate
_TEXT	ENDS
PUBLIC	?PlayerPreThink@@YAXPAUedict_s@@@Z		; PlayerPreThink
;	COMDAT ?PlayerPreThink@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT
_pEntity$ = 8
_pev$ = -4
_pPlayer$ = -8
?PlayerPreThink@@YAXPAUedict_s@@@Z PROC NEAR		; PlayerPreThink, COMDAT

; 624  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 625  : //	ALERT( at_console, "PreThink( %g, frametime %g )\n", gpGlobals->time, gpGlobals->frametime );
; 626  : 
; 627  : 	entvars_t *pev = &pEntity->v;

	mov	eax, DWORD PTR _pEntity$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], eax

; 628  : 	CBasePlayer *pPlayer = (CBasePlayer *)GET_PRIVATE(pEntity);

	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4
	mov	DWORD PTR _pPlayer$[ebp], eax

; 629  : 
; 630  : 	if (pPlayer)

	cmp	DWORD PTR _pPlayer$[ebp], 0
	je	SHORT $L38958

; 631  : 		pPlayer->PreThink( );

	mov	edx, DWORD PTR _pPlayer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	DWORD PTR [eax+624]
$L38958:

; 632  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PlayerPreThink@@YAXPAUedict_s@@@Z ENDP			; PlayerPreThink
_TEXT	ENDS
PUBLIC	?PlayerPostThink@@YAXPAUedict_s@@@Z		; PlayerPostThink
;	COMDAT ?PlayerPostThink@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT
_pEntity$ = 8
_pev$ = -4
_pPlayer$ = -8
?PlayerPostThink@@YAXPAUedict_s@@@Z PROC NEAR		; PlayerPostThink, COMDAT

; 642  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 643  : //	ALERT( at_console, "PostThink( %g, frametime %g )\n", gpGlobals->time, gpGlobals->frametime );
; 644  : 
; 645  : 	entvars_t *pev = &pEntity->v;

	mov	eax, DWORD PTR _pEntity$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], eax

; 646  : 	CBasePlayer *pPlayer = (CBasePlayer *)GET_PRIVATE(pEntity);

	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4
	mov	DWORD PTR _pPlayer$[ebp], eax

; 647  : 
; 648  : 	if (pPlayer)

	cmp	DWORD PTR _pPlayer$[ebp], 0
	je	SHORT $L38965

; 649  : 		pPlayer->PostThink( );

	mov	edx, DWORD PTR _pPlayer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	DWORD PTR [eax+628]
$L38965:

; 650  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PlayerPostThink@@YAXPAUedict_s@@@Z ENDP		; PlayerPostThink
_TEXT	ENDS
PUBLIC	?ParmsNewLevel@@YAXXZ				; ParmsNewLevel
;	COMDAT ?ParmsNewLevel@@YAXXZ
_TEXT	SEGMENT
?ParmsNewLevel@@YAXXZ PROC NEAR				; ParmsNewLevel, COMDAT

; 655  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 656  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ParmsNewLevel@@YAXXZ ENDP				; ParmsNewLevel
_TEXT	ENDS
PUBLIC	?ParmsChangeLevel@@YAXXZ			; ParmsChangeLevel
EXTRN	?BuildChangeList@@YAHPAULEVELLIST@@H@Z:NEAR	; BuildChangeList
;	COMDAT ?ParmsChangeLevel@@YAXXZ
_TEXT	SEGMENT
_pSaveData$ = -4
?ParmsChangeLevel@@YAXXZ PROC NEAR			; ParmsChangeLevel, COMDAT

; 660  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 661  : 	// retrieve the pointer to the save data
; 662  : 	SAVERESTOREDATA *pSaveData = (SAVERESTOREDATA *)gpGlobals->pSaveData;

	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR _pSaveData$[ebp], ecx

; 663  : 
; 664  : 	if ( pSaveData )

	cmp	DWORD PTR _pSaveData$[ebp], 0
	je	SHORT $L38974

; 665  : 		pSaveData->connectionCount = BuildChangeList( pSaveData->levelList, MAX_LEVEL_CONNECTIONS );

	push	16					; 00000010H
	mov	edx, DWORD PTR _pSaveData$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	call	?BuildChangeList@@YAHPAULEVELLIST@@H@Z	; BuildChangeList
	add	esp, 8
	mov	ecx, DWORD PTR _pSaveData$[ebp]
	mov	DWORD PTR [ecx+36], eax
$L38974:

; 666  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ParmsChangeLevel@@YAXXZ ENDP				; ParmsChangeLevel
_TEXT	ENDS
PUBLIC	?StartFrame@@YAXXZ				; StartFrame
EXTRN	?g_ulFrameCount@@3KA:DWORD			; g_ulFrameCount
EXTRN	?teamplay@@3Ucvar_s@@A:BYTE			; teamplay
;	COMDAT ?StartFrame@@YAXXZ
_TEXT	SEGMENT
?StartFrame@@YAXXZ PROC NEAR				; StartFrame, COMDAT

; 673  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 674  : //	ALERT( at_console, "SV_Physics( %g, frametime %g )\n", gpGlobals->time, gpGlobals->frametime );
; 675  : 
; 676  : 	if ( g_pGameRules )

	cmp	DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A, 0 ; g_pGameRules
	je	SHORT $L38978

; 677  : 		g_pGameRules->Think();

	mov	eax, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?g_pGameRules@@3PAVCGameRules@@A ; g_pGameRules
	call	DWORD PTR [edx+4]
$L38978:

; 678  : 
; 679  : 	if ( g_fGameOver )

	cmp	DWORD PTR ?g_fGameOver@@3HA, 0		; g_fGameOver
	je	SHORT $L38979

; 680  : 		return;

	jmp	SHORT $L38977
$L38979:

; 681  : 
; 682  : 	gpGlobals->teamplay = teamplay.value;

	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	ecx, DWORD PTR ?teamplay@@3Ucvar_s@@A+12
	mov	DWORD PTR [eax+28], ecx

; 683  : 	g_ulFrameCount++;

	mov	edx, DWORD PTR ?g_ulFrameCount@@3KA	; g_ulFrameCount
	add	edx, 1
	mov	DWORD PTR ?g_ulFrameCount@@3KA, edx	; g_ulFrameCount
$L38977:

; 684  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?StartFrame@@YAXXZ ENDP					; StartFrame
_TEXT	ENDS
PUBLIC	?EndFrame@@YAXXZ				; EndFrame
;	COMDAT ?EndFrame@@YAXXZ
_TEXT	SEGMENT
?EndFrame@@YAXXZ PROC NEAR				; EndFrame, COMDAT

; 687  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 688  : 	if ( g_fGameOver )

	cmp	DWORD PTR ?g_fGameOver@@3HA, 0		; g_fGameOver
	je	SHORT $L38983

; 689  : 		return;

	jmp	SHORT $L38982
$L38983:

; 690  : 
; 691  : 	// update physic step
; 692  : 	WorldPhysic->Update( gpGlobals->frametime );

	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR ?WorldPhysic@@3PAVIPhysicLayer@@A ; WorldPhysic
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?WorldPhysic@@3PAVIPhysicLayer@@A ; WorldPhysic
	call	DWORD PTR [eax+8]
$L38982:

; 693  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?EndFrame@@YAXXZ ENDP					; EndFrame
_TEXT	ENDS
PUBLIC	??_C@_0BD@NACB@player?1sprayer?4wav?$AA@	; `string'
PUBLIC	??_C@_0BI@CGOH@player?1pl_fallpain2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BI@IGMC@player?1pl_fallpain3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@DAFA@player?1pl_step1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@NADP@player?1pl_step2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@HABK@player?1pl_step3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@BAOA@player?1pl_step4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@IIKC@common?1npc_step1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@GIMN@common?1npc_step2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@MIOI@common?1npc_step3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@KIBC@common?1npc_step4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@LBED@player?1pl_metal1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@FBCM@player?1pl_metal2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@PBAJ@player?1pl_metal3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@JBPD@player?1pl_metal4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@IGBB@player?1pl_dirt1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@GGHO@player?1pl_dirt2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@MGFL@player?1pl_dirt3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@KGKB@player?1pl_dirt4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@KCPJ@player?1pl_duct1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@ECJG@player?1pl_duct2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@OCLD@player?1pl_duct3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@ICEJ@player?1pl_duct4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@BEOK@player?1pl_grate1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@PEIF@player?1pl_grate2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@FEKA@player?1pl_grate3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@DEFK@player?1pl_grate4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@DKOO@player?1pl_slosh1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@NKIB@player?1pl_slosh2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@HKKE@player?1pl_slosh3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@BKFO@player?1pl_slosh4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@BHLL@player?1pl_tile1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@PHNE@player?1pl_tile2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@FHPB@player?1pl_tile3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@DHAL@player?1pl_tile4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@JHCO@player?1pl_tile5?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@BCPL@player?1pl_swim1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@PCJE@player?1pl_swim2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@FCLB@player?1pl_swim3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@DCEL@player?1pl_swim4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BG@JJNA@player?1pl_ladder1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BG@HJLP@player?1pl_ladder2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BG@NJJK@player?1pl_ladder3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BG@LJGA@player?1pl_ladder4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@GELK@player?1pl_wade1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@IENF@player?1pl_wade2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@CEPA@player?1pl_wade3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@EEAK@player?1pl_wade4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BB@MAKG@debris?1wood1?4wav?$AA@		; `string'
PUBLIC	??_C@_0BB@CAMJ@debris?1wood2?4wav?$AA@		; `string'
PUBLIC	??_C@_0BB@IAOM@debris?1wood3?4wav?$AA@		; `string'
PUBLIC	??_C@_0BF@HOEM@plats?1train_use1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BD@GNEE@buttons?1spark5?4wav?$AA@	; `string'
PUBLIC	??_C@_0BD@INCL@buttons?1spark6?4wav?$AA@	; `string'
PUBLIC	??_C@_0BC@JOHE@debris?1glass1?4wav?$AA@		; `string'
PUBLIC	??_C@_0BC@HOBL@debris?1glass2?4wav?$AA@		; `string'
PUBLIC	??_C@_0BC@NODO@debris?1glass3?4wav?$AA@		; `string'
PUBLIC	??_C@_0BG@BKIG@items?1flashlight1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@CHLM@common?1bodysplat?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@DIKC@player?1pl_pain2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@PIHN@player?1pl_pain4?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@FIFI@player?1pl_pain5?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@LIDH@player?1pl_pain6?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@BIBC@player?1pl_pain7?4wav?$AA@	; `string'
PUBLIC	??_C@_0BG@BNOJ@common?1wpn_hudoff?4wav?$AA@	; `string'
PUBLIC	??_C@_0BF@DDKC@common?1wpn_hudon?4wav?$AA@	; `string'
PUBLIC	??_C@_0BK@MLCN@common?1wpn_moveselect?4wav?$AA@	; `string'
PUBLIC	??_C@_0BG@MCNG@common?1wpn_select?4wav?$AA@	; `string'
PUBLIC	??_C@_0BK@KHAC@common?1wpn_denyselect?4wav?$AA@	; `string'
PUBLIC	??_C@_0BD@ECPD@player?1geiger6?4wav?$AA@	; `string'
PUBLIC	??_C@_0BD@KCJM@player?1geiger5?4wav?$AA@	; `string'
PUBLIC	??_C@_0BD@CLJ@player?1geiger4?4wav?$AA@		; `string'
PUBLIC	??_C@_0BD@GCED@player?1geiger3?4wav?$AA@	; `string'
PUBLIC	??_C@_0BD@MCGG@player?1geiger2?4wav?$AA@	; `string'
PUBLIC	??_C@_0BD@CCAJ@player?1geiger1?4wav?$AA@	; `string'
PUBLIC	??_C@_0BE@HADJ@monster_human_grunt?$AA@		; `string'
PUBLIC	?ClientPrecache@@YAXXZ				; ClientPrecache
EXTRN	?UTIL_PrecacheOther@@YAXPBD@Z:NEAR		; UTIL_PrecacheOther
EXTRN	?giPrecacheGrunt@@3HA:DWORD			; giPrecacheGrunt
;	COMDAT ??_C@_0BD@NACB@player?1sprayer?4wav?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_0BD@NACB@player?1sprayer?4wav?$AA@ DB 'player/sprayer.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CGOH@player?1pl_fallpain2?4wav?$AA@
CONST	SEGMENT
??_C@_0BI@CGOH@player?1pl_fallpain2?4wav?$AA@ DB 'player/pl_fallpain2.wav'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IGMC@player?1pl_fallpain3?4wav?$AA@
CONST	SEGMENT
??_C@_0BI@IGMC@player?1pl_fallpain3?4wav?$AA@ DB 'player/pl_fallpain3.wav'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DAFA@player?1pl_step1?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@DAFA@player?1pl_step1?4wav?$AA@ DB 'player/pl_step1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NADP@player?1pl_step2?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@NADP@player?1pl_step2?4wav?$AA@ DB 'player/pl_step2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HABK@player?1pl_step3?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@HABK@player?1pl_step3?4wav?$AA@ DB 'player/pl_step3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BAOA@player?1pl_step4?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@BAOA@player?1pl_step4?4wav?$AA@ DB 'player/pl_step4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IIKC@common?1npc_step1?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@IIKC@common?1npc_step1?4wav?$AA@ DB 'common/npc_step1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GIMN@common?1npc_step2?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@GIMN@common?1npc_step2?4wav?$AA@ DB 'common/npc_step2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MIOI@common?1npc_step3?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@MIOI@common?1npc_step3?4wav?$AA@ DB 'common/npc_step3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KIBC@common?1npc_step4?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@KIBC@common?1npc_step4?4wav?$AA@ DB 'common/npc_step4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LBED@player?1pl_metal1?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@LBED@player?1pl_metal1?4wav?$AA@ DB 'player/pl_metal1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FBCM@player?1pl_metal2?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@FBCM@player?1pl_metal2?4wav?$AA@ DB 'player/pl_metal2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PBAJ@player?1pl_metal3?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@PBAJ@player?1pl_metal3?4wav?$AA@ DB 'player/pl_metal3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JBPD@player?1pl_metal4?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@JBPD@player?1pl_metal4?4wav?$AA@ DB 'player/pl_metal4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IGBB@player?1pl_dirt1?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@IGBB@player?1pl_dirt1?4wav?$AA@ DB 'player/pl_dirt1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GGHO@player?1pl_dirt2?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@GGHO@player?1pl_dirt2?4wav?$AA@ DB 'player/pl_dirt2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MGFL@player?1pl_dirt3?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@MGFL@player?1pl_dirt3?4wav?$AA@ DB 'player/pl_dirt3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KGKB@player?1pl_dirt4?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@KGKB@player?1pl_dirt4?4wav?$AA@ DB 'player/pl_dirt4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KCPJ@player?1pl_duct1?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@KCPJ@player?1pl_duct1?4wav?$AA@ DB 'player/pl_duct1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ECJG@player?1pl_duct2?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@ECJG@player?1pl_duct2?4wav?$AA@ DB 'player/pl_duct2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OCLD@player?1pl_duct3?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@OCLD@player?1pl_duct3?4wav?$AA@ DB 'player/pl_duct3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ICEJ@player?1pl_duct4?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@ICEJ@player?1pl_duct4?4wav?$AA@ DB 'player/pl_duct4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BEOK@player?1pl_grate1?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@BEOK@player?1pl_grate1?4wav?$AA@ DB 'player/pl_grate1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PEIF@player?1pl_grate2?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@PEIF@player?1pl_grate2?4wav?$AA@ DB 'player/pl_grate2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FEKA@player?1pl_grate3?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@FEKA@player?1pl_grate3?4wav?$AA@ DB 'player/pl_grate3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DEFK@player?1pl_grate4?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@DEFK@player?1pl_grate4?4wav?$AA@ DB 'player/pl_grate4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DKOO@player?1pl_slosh1?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@DKOO@player?1pl_slosh1?4wav?$AA@ DB 'player/pl_slosh1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NKIB@player?1pl_slosh2?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@NKIB@player?1pl_slosh2?4wav?$AA@ DB 'player/pl_slosh2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HKKE@player?1pl_slosh3?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@HKKE@player?1pl_slosh3?4wav?$AA@ DB 'player/pl_slosh3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BKFO@player?1pl_slosh4?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@BKFO@player?1pl_slosh4?4wav?$AA@ DB 'player/pl_slosh4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BHLL@player?1pl_tile1?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@BHLL@player?1pl_tile1?4wav?$AA@ DB 'player/pl_tile1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PHNE@player?1pl_tile2?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@PHNE@player?1pl_tile2?4wav?$AA@ DB 'player/pl_tile2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FHPB@player?1pl_tile3?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@FHPB@player?1pl_tile3?4wav?$AA@ DB 'player/pl_tile3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DHAL@player?1pl_tile4?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@DHAL@player?1pl_tile4?4wav?$AA@ DB 'player/pl_tile4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JHCO@player?1pl_tile5?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@JHCO@player?1pl_tile5?4wav?$AA@ DB 'player/pl_tile5.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BCPL@player?1pl_swim1?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@BCPL@player?1pl_swim1?4wav?$AA@ DB 'player/pl_swim1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PCJE@player?1pl_swim2?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@PCJE@player?1pl_swim2?4wav?$AA@ DB 'player/pl_swim2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FCLB@player?1pl_swim3?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@FCLB@player?1pl_swim3?4wav?$AA@ DB 'player/pl_swim3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DCEL@player?1pl_swim4?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@DCEL@player?1pl_swim4?4wav?$AA@ DB 'player/pl_swim4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JJNA@player?1pl_ladder1?4wav?$AA@
CONST	SEGMENT
??_C@_0BG@JJNA@player?1pl_ladder1?4wav?$AA@ DB 'player/pl_ladder1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HJLP@player?1pl_ladder2?4wav?$AA@
CONST	SEGMENT
??_C@_0BG@HJLP@player?1pl_ladder2?4wav?$AA@ DB 'player/pl_ladder2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NJJK@player?1pl_ladder3?4wav?$AA@
CONST	SEGMENT
??_C@_0BG@NJJK@player?1pl_ladder3?4wav?$AA@ DB 'player/pl_ladder3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LJGA@player?1pl_ladder4?4wav?$AA@
CONST	SEGMENT
??_C@_0BG@LJGA@player?1pl_ladder4?4wav?$AA@ DB 'player/pl_ladder4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GELK@player?1pl_wade1?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@GELK@player?1pl_wade1?4wav?$AA@ DB 'player/pl_wade1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IENF@player?1pl_wade2?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@IENF@player?1pl_wade2?4wav?$AA@ DB 'player/pl_wade2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CEPA@player?1pl_wade3?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@CEPA@player?1pl_wade3?4wav?$AA@ DB 'player/pl_wade3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EEAK@player?1pl_wade4?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@EEAK@player?1pl_wade4?4wav?$AA@ DB 'player/pl_wade4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MAKG@debris?1wood1?4wav?$AA@
CONST	SEGMENT
??_C@_0BB@MAKG@debris?1wood1?4wav?$AA@ DB 'debris/wood1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CAMJ@debris?1wood2?4wav?$AA@
CONST	SEGMENT
??_C@_0BB@CAMJ@debris?1wood2?4wav?$AA@ DB 'debris/wood2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IAOM@debris?1wood3?4wav?$AA@
CONST	SEGMENT
??_C@_0BB@IAOM@debris?1wood3?4wav?$AA@ DB 'debris/wood3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOEM@plats?1train_use1?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@HOEM@plats?1train_use1?4wav?$AA@ DB 'plats/train_use1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GNEE@buttons?1spark5?4wav?$AA@
CONST	SEGMENT
??_C@_0BD@GNEE@buttons?1spark5?4wav?$AA@ DB 'buttons/spark5.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@INCL@buttons?1spark6?4wav?$AA@
CONST	SEGMENT
??_C@_0BD@INCL@buttons?1spark6?4wav?$AA@ DB 'buttons/spark6.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JOHE@debris?1glass1?4wav?$AA@
CONST	SEGMENT
??_C@_0BC@JOHE@debris?1glass1?4wav?$AA@ DB 'debris/glass1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HOBL@debris?1glass2?4wav?$AA@
CONST	SEGMENT
??_C@_0BC@HOBL@debris?1glass2?4wav?$AA@ DB 'debris/glass2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NODO@debris?1glass3?4wav?$AA@
CONST	SEGMENT
??_C@_0BC@NODO@debris?1glass3?4wav?$AA@ DB 'debris/glass3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BKIG@items?1flashlight1?4wav?$AA@
CONST	SEGMENT
??_C@_0BG@BKIG@items?1flashlight1?4wav?$AA@ DB 'items/flashlight1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CHLM@common?1bodysplat?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@CHLM@common?1bodysplat?4wav?$AA@ DB 'common/bodysplat.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DIKC@player?1pl_pain2?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@DIKC@player?1pl_pain2?4wav?$AA@ DB 'player/pl_pain2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PIHN@player?1pl_pain4?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@PIHN@player?1pl_pain4?4wav?$AA@ DB 'player/pl_pain4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FIFI@player?1pl_pain5?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@FIFI@player?1pl_pain5?4wav?$AA@ DB 'player/pl_pain5.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LIDH@player?1pl_pain6?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@LIDH@player?1pl_pain6?4wav?$AA@ DB 'player/pl_pain6.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BIBC@player?1pl_pain7?4wav?$AA@
CONST	SEGMENT
??_C@_0BE@BIBC@player?1pl_pain7?4wav?$AA@ DB 'player/pl_pain7.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BNOJ@common?1wpn_hudoff?4wav?$AA@
CONST	SEGMENT
??_C@_0BG@BNOJ@common?1wpn_hudoff?4wav?$AA@ DB 'common/wpn_hudoff.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DDKC@common?1wpn_hudon?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@DDKC@common?1wpn_hudon?4wav?$AA@ DB 'common/wpn_hudon.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MLCN@common?1wpn_moveselect?4wav?$AA@
CONST	SEGMENT
??_C@_0BK@MLCN@common?1wpn_moveselect?4wav?$AA@ DB 'common/wpn_moveselect'
	DB	'.wav', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MCNG@common?1wpn_select?4wav?$AA@
CONST	SEGMENT
??_C@_0BG@MCNG@common?1wpn_select?4wav?$AA@ DB 'common/wpn_select.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KHAC@common?1wpn_denyselect?4wav?$AA@
CONST	SEGMENT
??_C@_0BK@KHAC@common?1wpn_denyselect?4wav?$AA@ DB 'common/wpn_denyselect'
	DB	'.wav', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ECPD@player?1geiger6?4wav?$AA@
CONST	SEGMENT
??_C@_0BD@ECPD@player?1geiger6?4wav?$AA@ DB 'player/geiger6.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KCJM@player?1geiger5?4wav?$AA@
CONST	SEGMENT
??_C@_0BD@KCJM@player?1geiger5?4wav?$AA@ DB 'player/geiger5.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CLJ@player?1geiger4?4wav?$AA@
CONST	SEGMENT
??_C@_0BD@CLJ@player?1geiger4?4wav?$AA@ DB 'player/geiger4.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GCED@player?1geiger3?4wav?$AA@
CONST	SEGMENT
??_C@_0BD@GCED@player?1geiger3?4wav?$AA@ DB 'player/geiger3.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MCGG@player?1geiger2?4wav?$AA@
CONST	SEGMENT
??_C@_0BD@MCGG@player?1geiger2?4wav?$AA@ DB 'player/geiger2.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CCAJ@player?1geiger1?4wav?$AA@
CONST	SEGMENT
??_C@_0BD@CCAJ@player?1geiger1?4wav?$AA@ DB 'player/geiger1.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HADJ@monster_human_grunt?$AA@
CONST	SEGMENT
??_C@_0BE@HADJ@monster_human_grunt?$AA@ DB 'monster_human_grunt', 00H ; `string'
CONST	ENDS
;	COMDAT ?ClientPrecache@@YAXXZ
_TEXT	SEGMENT
?ClientPrecache@@YAXXZ PROC NEAR			; ClientPrecache, COMDAT

; 696  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 697  : 	// setup precaches always needed
; 698  : 	PRECACHE_SOUND("player/sprayer.wav");			// spray paint sound for PreAlpha

	push	OFFSET FLAT:??_C@_0BD@NACB@player?1sprayer?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 699  : 	
; 700  : 	// PRECACHE_SOUND("player/pl_jumpland2.wav");		// UNDONE: play 2x step sound
; 701  : 	
; 702  : 	PRECACHE_SOUND("player/pl_fallpain2.wav");		

	push	OFFSET FLAT:??_C@_0BI@CGOH@player?1pl_fallpain2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 703  : 	PRECACHE_SOUND("player/pl_fallpain3.wav");		

	push	OFFSET FLAT:??_C@_0BI@IGMC@player?1pl_fallpain3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 704  : 	
; 705  : 	PRECACHE_SOUND("player/pl_step1.wav");		// walk on concrete

	push	OFFSET FLAT:??_C@_0BE@DAFA@player?1pl_step1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 706  : 	PRECACHE_SOUND("player/pl_step2.wav");

	push	OFFSET FLAT:??_C@_0BE@NADP@player?1pl_step2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 707  : 	PRECACHE_SOUND("player/pl_step3.wav");

	push	OFFSET FLAT:??_C@_0BE@HABK@player?1pl_step3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 708  : 	PRECACHE_SOUND("player/pl_step4.wav");

	push	OFFSET FLAT:??_C@_0BE@BAOA@player?1pl_step4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 709  : 
; 710  : 	PRECACHE_SOUND("common/npc_step1.wav");		// NPC walk on concrete

	push	OFFSET FLAT:??_C@_0BF@IIKC@common?1npc_step1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 711  : 	PRECACHE_SOUND("common/npc_step2.wav");

	push	OFFSET FLAT:??_C@_0BF@GIMN@common?1npc_step2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 712  : 	PRECACHE_SOUND("common/npc_step3.wav");

	push	OFFSET FLAT:??_C@_0BF@MIOI@common?1npc_step3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 713  : 	PRECACHE_SOUND("common/npc_step4.wav");

	push	OFFSET FLAT:??_C@_0BF@KIBC@common?1npc_step4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 714  : 
; 715  : 	PRECACHE_SOUND("player/pl_metal1.wav");		// walk on metal

	push	OFFSET FLAT:??_C@_0BF@LBED@player?1pl_metal1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 716  : 	PRECACHE_SOUND("player/pl_metal2.wav");

	push	OFFSET FLAT:??_C@_0BF@FBCM@player?1pl_metal2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 717  : 	PRECACHE_SOUND("player/pl_metal3.wav");

	push	OFFSET FLAT:??_C@_0BF@PBAJ@player?1pl_metal3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 718  : 	PRECACHE_SOUND("player/pl_metal4.wav");

	push	OFFSET FLAT:??_C@_0BF@JBPD@player?1pl_metal4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 719  : 
; 720  : 	PRECACHE_SOUND("player/pl_dirt1.wav");		// walk on dirt

	push	OFFSET FLAT:??_C@_0BE@IGBB@player?1pl_dirt1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 721  : 	PRECACHE_SOUND("player/pl_dirt2.wav");

	push	OFFSET FLAT:??_C@_0BE@GGHO@player?1pl_dirt2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 722  : 	PRECACHE_SOUND("player/pl_dirt3.wav");

	push	OFFSET FLAT:??_C@_0BE@MGFL@player?1pl_dirt3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 723  : 	PRECACHE_SOUND("player/pl_dirt4.wav");

	push	OFFSET FLAT:??_C@_0BE@KGKB@player?1pl_dirt4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 724  : 
; 725  : 	PRECACHE_SOUND("player/pl_duct1.wav");		// walk in duct

	push	OFFSET FLAT:??_C@_0BE@KCPJ@player?1pl_duct1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 726  : 	PRECACHE_SOUND("player/pl_duct2.wav");

	push	OFFSET FLAT:??_C@_0BE@ECJG@player?1pl_duct2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 727  : 	PRECACHE_SOUND("player/pl_duct3.wav");

	push	OFFSET FLAT:??_C@_0BE@OCLD@player?1pl_duct3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 728  : 	PRECACHE_SOUND("player/pl_duct4.wav");

	push	OFFSET FLAT:??_C@_0BE@ICEJ@player?1pl_duct4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 729  : 
; 730  : 	PRECACHE_SOUND("player/pl_grate1.wav");		// walk on grate

	push	OFFSET FLAT:??_C@_0BF@BEOK@player?1pl_grate1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 731  : 	PRECACHE_SOUND("player/pl_grate2.wav");

	push	OFFSET FLAT:??_C@_0BF@PEIF@player?1pl_grate2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 732  : 	PRECACHE_SOUND("player/pl_grate3.wav");

	push	OFFSET FLAT:??_C@_0BF@FEKA@player?1pl_grate3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 733  : 	PRECACHE_SOUND("player/pl_grate4.wav");

	push	OFFSET FLAT:??_C@_0BF@DEFK@player?1pl_grate4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 734  : 
; 735  : 	PRECACHE_SOUND("player/pl_slosh1.wav");		// walk in shallow water

	push	OFFSET FLAT:??_C@_0BF@DKOO@player?1pl_slosh1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 736  : 	PRECACHE_SOUND("player/pl_slosh2.wav");

	push	OFFSET FLAT:??_C@_0BF@NKIB@player?1pl_slosh2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 737  : 	PRECACHE_SOUND("player/pl_slosh3.wav");

	push	OFFSET FLAT:??_C@_0BF@HKKE@player?1pl_slosh3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 738  : 	PRECACHE_SOUND("player/pl_slosh4.wav");

	push	OFFSET FLAT:??_C@_0BF@BKFO@player?1pl_slosh4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 739  : 
; 740  : 	PRECACHE_SOUND("player/pl_tile1.wav");		// walk on tile

	push	OFFSET FLAT:??_C@_0BE@BHLL@player?1pl_tile1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 741  : 	PRECACHE_SOUND("player/pl_tile2.wav");

	push	OFFSET FLAT:??_C@_0BE@PHNE@player?1pl_tile2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 742  : 	PRECACHE_SOUND("player/pl_tile3.wav");

	push	OFFSET FLAT:??_C@_0BE@FHPB@player?1pl_tile3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 743  : 	PRECACHE_SOUND("player/pl_tile4.wav");

	push	OFFSET FLAT:??_C@_0BE@DHAL@player?1pl_tile4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 744  : 	PRECACHE_SOUND("player/pl_tile5.wav");

	push	OFFSET FLAT:??_C@_0BE@JHCO@player?1pl_tile5?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 745  : 
; 746  : 	PRECACHE_SOUND("player/pl_swim1.wav");		// breathe bubbles

	push	OFFSET FLAT:??_C@_0BE@BCPL@player?1pl_swim1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 747  : 	PRECACHE_SOUND("player/pl_swim2.wav");

	push	OFFSET FLAT:??_C@_0BE@PCJE@player?1pl_swim2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 748  : 	PRECACHE_SOUND("player/pl_swim3.wav");

	push	OFFSET FLAT:??_C@_0BE@FCLB@player?1pl_swim3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 749  : 	PRECACHE_SOUND("player/pl_swim4.wav");

	push	OFFSET FLAT:??_C@_0BE@DCEL@player?1pl_swim4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 750  : 
; 751  : 	PRECACHE_SOUND("player/pl_ladder1.wav");	// climb ladder rung

	push	OFFSET FLAT:??_C@_0BG@JJNA@player?1pl_ladder1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 752  : 	PRECACHE_SOUND("player/pl_ladder2.wav");

	push	OFFSET FLAT:??_C@_0BG@HJLP@player?1pl_ladder2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 753  : 	PRECACHE_SOUND("player/pl_ladder3.wav");

	push	OFFSET FLAT:??_C@_0BG@NJJK@player?1pl_ladder3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 754  : 	PRECACHE_SOUND("player/pl_ladder4.wav");

	push	OFFSET FLAT:??_C@_0BG@LJGA@player?1pl_ladder4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 755  : 
; 756  : 	PRECACHE_SOUND("player/pl_wade1.wav");		// wade in water

	push	OFFSET FLAT:??_C@_0BE@GELK@player?1pl_wade1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 757  : 	PRECACHE_SOUND("player/pl_wade2.wav");

	push	OFFSET FLAT:??_C@_0BE@IENF@player?1pl_wade2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 758  : 	PRECACHE_SOUND("player/pl_wade3.wav");

	push	OFFSET FLAT:??_C@_0BE@CEPA@player?1pl_wade3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 759  : 	PRECACHE_SOUND("player/pl_wade4.wav");

	push	OFFSET FLAT:??_C@_0BE@EEAK@player?1pl_wade4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 760  : 
; 761  : 	PRECACHE_SOUND("debris/wood1.wav");			// hit wood texture

	push	OFFSET FLAT:??_C@_0BB@MAKG@debris?1wood1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 762  : 	PRECACHE_SOUND("debris/wood2.wav");

	push	OFFSET FLAT:??_C@_0BB@CAMJ@debris?1wood2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 763  : 	PRECACHE_SOUND("debris/wood3.wav");

	push	OFFSET FLAT:??_C@_0BB@IAOM@debris?1wood3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 764  : 
; 765  : 	PRECACHE_SOUND("plats/train_use1.wav");		// use a train

	push	OFFSET FLAT:??_C@_0BF@HOEM@plats?1train_use1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 766  : 
; 767  : 	PRECACHE_SOUND("buttons/spark5.wav");		// hit computer texture

	push	OFFSET FLAT:??_C@_0BD@GNEE@buttons?1spark5?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 768  : 	PRECACHE_SOUND("buttons/spark6.wav");

	push	OFFSET FLAT:??_C@_0BD@INCL@buttons?1spark6?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 769  : 	PRECACHE_SOUND("debris/glass1.wav");

	push	OFFSET FLAT:??_C@_0BC@JOHE@debris?1glass1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 770  : 	PRECACHE_SOUND("debris/glass2.wav");

	push	OFFSET FLAT:??_C@_0BC@HOBL@debris?1glass2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 771  : 	PRECACHE_SOUND("debris/glass3.wav");

	push	OFFSET FLAT:??_C@_0BC@NODO@debris?1glass3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 772  : 
; 773  : 	PRECACHE_SOUND( SOUND_FLASHLIGHT_ON );

	push	OFFSET FLAT:??_C@_0BG@BKIG@items?1flashlight1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 774  : 	PRECACHE_SOUND( SOUND_FLASHLIGHT_OFF );

	push	OFFSET FLAT:??_C@_0BG@BKIG@items?1flashlight1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 775  : 
; 776  : // player gib sounds
; 777  : 	PRECACHE_SOUND("common/bodysplat.wav");		               

	push	OFFSET FLAT:??_C@_0BF@CHLM@common?1bodysplat?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 778  : 
; 779  : // player pain sounds
; 780  : 	PRECACHE_SOUND("player/pl_pain2.wav");

	push	OFFSET FLAT:??_C@_0BE@DIKC@player?1pl_pain2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 781  : 	PRECACHE_SOUND("player/pl_pain4.wav");

	push	OFFSET FLAT:??_C@_0BE@PIHN@player?1pl_pain4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 782  : 	PRECACHE_SOUND("player/pl_pain5.wav");

	push	OFFSET FLAT:??_C@_0BE@FIFI@player?1pl_pain5?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 783  : 	PRECACHE_SOUND("player/pl_pain6.wav");

	push	OFFSET FLAT:??_C@_0BE@LIDH@player?1pl_pain6?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 784  : 	PRECACHE_SOUND("player/pl_pain7.wav");

	push	OFFSET FLAT:??_C@_0BE@BIBC@player?1pl_pain7?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 785  : 
; 786  : 	PRECACHE_MODEL("models/player.mdl");

	push	OFFSET FLAT:??_C@_0BC@DMHA@models?1player?4mdl?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A
	add	esp, 4

; 787  : 
; 788  : 	// hud sounds
; 789  : 
; 790  : 	PRECACHE_SOUND("common/wpn_hudoff.wav");

	push	OFFSET FLAT:??_C@_0BG@BNOJ@common?1wpn_hudoff?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 791  : 	PRECACHE_SOUND("common/wpn_hudon.wav");

	push	OFFSET FLAT:??_C@_0BF@DDKC@common?1wpn_hudon?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 792  : 	PRECACHE_SOUND("common/wpn_moveselect.wav");

	push	OFFSET FLAT:??_C@_0BK@MLCN@common?1wpn_moveselect?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 793  : 	PRECACHE_SOUND("common/wpn_select.wav");

	push	OFFSET FLAT:??_C@_0BG@MCNG@common?1wpn_select?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 794  : 	PRECACHE_SOUND("common/wpn_denyselect.wav");

	push	OFFSET FLAT:??_C@_0BK@KHAC@common?1wpn_denyselect?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 795  : 
; 796  : 
; 797  : 	// geiger sounds
; 798  : 
; 799  : 	PRECACHE_SOUND("player/geiger6.wav");

	push	OFFSET FLAT:??_C@_0BD@ECPD@player?1geiger6?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 800  : 	PRECACHE_SOUND("player/geiger5.wav");

	push	OFFSET FLAT:??_C@_0BD@KCJM@player?1geiger5?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 801  : 	PRECACHE_SOUND("player/geiger4.wav");

	push	OFFSET FLAT:??_C@_0BD@CLJ@player?1geiger4?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 802  : 	PRECACHE_SOUND("player/geiger3.wav");

	push	OFFSET FLAT:??_C@_0BD@GCED@player?1geiger3?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 803  : 	PRECACHE_SOUND("player/geiger2.wav");

	push	OFFSET FLAT:??_C@_0BD@MCGG@player?1geiger2?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 804  : 	PRECACHE_SOUND("player/geiger1.wav");

	push	OFFSET FLAT:??_C@_0BD@CCAJ@player?1geiger1?4wav?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+4
	add	esp, 4

; 805  : 
; 806  : 	if (giPrecacheGrunt)

	cmp	DWORD PTR ?giPrecacheGrunt@@3HA, 0	; giPrecacheGrunt
	je	SHORT $L39062

; 807  : 		UTIL_PrecacheOther("monster_human_grunt");

	push	OFFSET FLAT:??_C@_0BE@HADJ@monster_human_grunt?$AA@ ; `string'
	call	?UTIL_PrecacheOther@@YAXPBD@Z		; UTIL_PrecacheOther
	add	esp, 4
$L39062:

; 808  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClientPrecache@@YAXXZ ENDP				; ClientPrecache
_TEXT	ENDS
PUBLIC	??_C@_0N@IDDB@gameinfo?4txt?$AA@		; `string'
PUBLIC	??_C@_04DDGE@Xash?$AA@				; `string'
PUBLIC	??_C@_05LHJG@title?$AA@				; `string'
PUBLIC	??_C@_07BPOH@version?$AA@			; `string'
PUBLIC	?GetGameDescription@@YAPBDXZ			; GetGameDescription
EXTRN	?Q_strncpy@@YAIPADPBDI@Z:NEAR			; Q_strncpy
EXTRN	?Q_strnicmp@@YAHPBD0H@Z:NEAR			; Q_strnicmp
EXTRN	?COM_ParseFileExt@@YAPADPAD0J_N@Z:NEAR		; COM_ParseFileExt
_BSS	SEGMENT
_?text@?1??GetGameDescription@@YAPBDXZ@4PADA DB 080H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0N@IDDB@gameinfo?4txt?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_0N@IDDB@gameinfo?4txt?$AA@ DB 'gameinfo.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDGE@Xash?$AA@
CONST	SEGMENT
??_C@_04DDGE@Xash?$AA@ DB 'Xash', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LHJG@title?$AA@
CONST	SEGMENT
??_C@_05LHJG@title?$AA@ DB 'title', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07BPOH@version?$AA@
CONST	SEGMENT
??_C@_07BPOH@version?$AA@ DB 'version', 00H		; `string'
CONST	ENDS
;	COMDAT ?GetGameDescription@@YAPBDXZ
_TEXT	SEGMENT
_token$ = -256
_game$ = -384
_version$ = -416
_afile$ = -420
_pfile$ = -424
?GetGameDescription@@YAPBDXZ PROC NEAR			; GetGameDescription, COMDAT

; 818  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 488				; 000001e8H
	push	ebx
	push	esi
	push	edi

; 819  : 	char		token[256];
; 820  : 	char		game[128];
; 821  : 	char		version[32];
; 822  : 	static char	text[128];
; 823  : 	
; 824  : 	char *afile = (char *)LOAD_FILE( "gameinfo.txt", NULL );

	push	0
	push	OFFSET FLAT:??_C@_0N@IDDB@gameinfo?4txt?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+380
	add	esp, 8
	mov	DWORD PTR _afile$[ebp], eax

; 825  : 	char *pfile = afile;

	mov	eax, DWORD PTR _afile$[ebp]
	mov	DWORD PTR _pfile$[ebp], eax

; 826  : 
; 827  : 	if( pfile )

	cmp	DWORD PTR _pfile$[ebp], 0
	je	$L39075

; 829  : 		Q_strncpy( game, "Xash", sizeof( game ));

	push	128					; 00000080H
	push	OFFSET FLAT:??_C@_04DDGE@Xash?$AA@	; `string'
	lea	ecx, DWORD PTR _game$[ebp]
	push	ecx
	call	?Q_strncpy@@YAIPADPBDI@Z		; Q_strncpy
	add	esp, 12					; 0000000cH

; 830  : 		version[0] = '\0';

	mov	BYTE PTR _version$[ebp], 0
$L39078:

; 831  : 
; 832  : 		while ( pfile )

	cmp	DWORD PTR _pfile$[ebp], 0
	je	$L39079

; 834  : 			pfile = COM_ParseFile( pfile, token );

	push	1
	push	256					; 00000100H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfile$[ebp]
	push	eax
	call	?COM_ParseFileExt@@YAPADPAD0J_N@Z	; COM_ParseFileExt
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pfile$[ebp], eax

; 835  : 
; 836  : 			if( !Q_stricmp( token, "title" )) 

	push	99999					; 0001869fH
	push	OFFSET FLAT:??_C@_05LHJG@title?$AA@	; `string'
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?Q_strnicmp@@YAHPBD0H@Z			; Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L39080

; 838  : 				pfile = COM_ParseFile( pfile, token );

	push	1
	push	256					; 00000100H
	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	eax, DWORD PTR _pfile$[ebp]
	push	eax
	call	?COM_ParseFileExt@@YAPADPAD0J_N@Z	; COM_ParseFileExt
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pfile$[ebp], eax

; 839  : 				Q_strncpy( game, token, sizeof( game ));

	push	128					; 00000080H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	lea	edx, DWORD PTR _game$[ebp]
	push	edx
	call	?Q_strncpy@@YAIPADPBDI@Z		; Q_strncpy
	add	esp, 12					; 0000000cH

; 841  : 			else if( !Q_stricmp( token, "version" )) 

	jmp	SHORT $L39083
$L39080:
	push	99999					; 0001869fH
	push	OFFSET FLAT:??_C@_07BPOH@version?$AA@	; `string'
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	?Q_strnicmp@@YAHPBD0H@Z			; Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L39083

; 843  : 				pfile = COM_ParseFile(pfile, token);

	push	1
	push	256					; 00000100H
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pfile$[ebp]
	push	edx
	call	?COM_ParseFileExt@@YAPADPAD0J_N@Z	; COM_ParseFileExt
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pfile$[ebp], eax

; 844  : 				Q_strncpy( version, token, sizeof( version ));

	push	32					; 00000020H
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	lea	ecx, DWORD PTR _version$[ebp]
	push	ecx
	call	?Q_strncpy@@YAIPADPBDI@Z		; Q_strncpy
	add	esp, 12					; 0000000cH
$L39083:

; 846  : 		}

	jmp	$L39078
$L39079:

; 847  : 
; 848  : 		Q_snprintf( text, sizeof( text ), "%s %s", game, version );

	lea	edx, DWORD PTR _version$[ebp]
	push	edx
	lea	eax, DWORD PTR _game$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_05JKGE@?$CFs?5?$CFs?$AA@ ; `string'
	push	128					; 00000080H
	push	OFFSET FLAT:_?text@?1??GetGameDescription@@YAPBDXZ@4PADA
	call	?Q_snprintf@@YAHPADIPBDZZ		; Q_snprintf
	add	esp, 20					; 00000014H

; 849  : 		FREE_FILE( afile );

	mov	ecx, DWORD PTR _afile$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+384
	add	esp, 4

; 850  : 		return text;

	mov	eax, OFFSET FLAT:_?text@?1??GetGameDescription@@YAPBDXZ@4PADA
	jmp	SHORT $L39065
$L39075:

; 852  : 
; 853  : 	return "Xash";

	mov	eax, OFFSET FLAT:??_C@_04DDGE@Xash?$AA@	; `string'
$L39065:

; 854  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameDescription@@YAPBDXZ ENDP			; GetGameDescription
_TEXT	ENDS
PUBLIC	?Sys_Error@@YAXPBD@Z				; Sys_Error
;	COMDAT ?Sys_Error@@YAXPBD@Z
_TEXT	SEGMENT
?Sys_Error@@YAXPBD@Z PROC NEAR				; Sys_Error, COMDAT

; 864  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 865  : 	// Default case, do nothing.  MOD AUTHORS:  Add code ( e.g., _asm { int 3 }; here to cause a breakpoint for debugging your game .dlls
; 866  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sys_Error@@YAXPBD@Z ENDP				; Sys_Error
_TEXT	ENDS
PUBLIC	??_C@_0CM@LAGP@PlayerCustomization?3?5?5Couldn?8t?5g@ ; `string'
PUBLIC	??_C@_0CL@NEEH@PlayerCustomization?3?5?5NULL?5custo@ ; `string'
PUBLIC	??_C@_0DD@LMCP@PlayerCustomization?3?5?5Unknown?5cu@ ; `string'
PUBLIC	?PlayerCustomization@@YAXPAUedict_s@@PAUcustomization_s@@@Z ; PlayerCustomization
;	COMDAT ??_C@_0CM@LAGP@PlayerCustomization?3?5?5Couldn?8t?5g@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_0CM@LAGP@PlayerCustomization?3?5?5Couldn?8t?5g@ DB 'PlayerCustomiza'
	DB	'tion:  Couldn''t get player!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NEEH@PlayerCustomization?3?5?5NULL?5custo@
CONST	SEGMENT
??_C@_0CL@NEEH@PlayerCustomization?3?5?5NULL?5custo@ DB 'PlayerCustomizat'
	DB	'ion:  NULL customization!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LMCP@PlayerCustomization?3?5?5Unknown?5cu@
CONST	SEGMENT
??_C@_0DD@LMCP@PlayerCustomization?3?5?5Unknown?5cu@ DB 'PlayerCustomizat'
	DB	'ion:  Unknown customization type!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?PlayerCustomization@@YAXPAUedict_s@@PAUcustomization_s@@@Z
_TEXT	SEGMENT
_pEntity$ = 8
_pCust$ = 12
_pev$ = -4
_pPlayer$ = -8
?PlayerCustomization@@YAXPAUedict_s@@PAUcustomization_s@@@Z PROC NEAR ; PlayerCustomization, COMDAT

; 878  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 879  : 	entvars_t *pev = &pEntity->v;

	mov	eax, DWORD PTR _pEntity$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], eax

; 880  : 	CBasePlayer *pPlayer = (CBasePlayer *)GET_PRIVATE(pEntity);

	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4
	mov	DWORD PTR _pPlayer$[ebp], eax

; 881  : 
; 882  : 	if (!pPlayer)

	cmp	DWORD PTR _pPlayer$[ebp], 0
	jne	SHORT $L39095

; 884  : 		ALERT(at_console, "PlayerCustomization:  Couldn't get player!\n");

	push	OFFSET FLAT:??_C@_0CM@LAGP@PlayerCustomization?3?5?5Couldn?8t?5g@ ; `string'
	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 8

; 885  : 		return;

	jmp	SHORT $L39091
$L39095:

; 887  : 
; 888  : 	if (!pCust)

	cmp	DWORD PTR _pCust$[ebp], 0
	jne	SHORT $L39097

; 890  : 		ALERT(at_console, "PlayerCustomization:  NULL customization!\n");

	push	OFFSET FLAT:??_C@_0CL@NEEH@PlayerCustomization?3?5?5NULL?5custo@ ; `string'
	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 8

; 891  : 		return;

	jmp	SHORT $L39091
$L39097:

; 895  : 	{

	mov	edx, DWORD PTR _pCust$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR -12+[ebp], eax
	cmp	DWORD PTR -12+[ebp], 0
	jl	SHORT $L39105
	cmp	DWORD PTR -12+[ebp], 2
	jle	SHORT $L39104
	cmp	DWORD PTR -12+[ebp], 3
	je	SHORT $L39103
	jmp	SHORT $L39105
$L39103:

; 896  : 	case t_decal:
; 897  : 		pPlayer->SetCustomDecalFrames(pCust->nUserData2); // Second int is max # of frames.

	mov	ecx, DWORD PTR _pCust$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?SetCustomDecalFrames@CBasePlayer@@QAEXH@Z ; CBasePlayer::SetCustomDecalFrames

; 898  : 		break;

	jmp	SHORT $L39100
$L39104:

; 899  : 	case t_sound:
; 900  : 	case t_skin:
; 901  : 	case t_model:
; 902  : 		// Ignore for now.
; 903  : 		break;

	jmp	SHORT $L39100
$L39105:

; 904  : 	default:
; 905  : 		ALERT(at_console, "PlayerCustomization:  Unknown customization type!\n");

	push	OFFSET FLAT:??_C@_0DD@LMCP@PlayerCustomization?3?5?5Unknown?5cu@ ; `string'
	push	1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 8
$L39100:
$L39091:

; 908  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PlayerCustomization@@YAXPAUedict_s@@PAUcustomization_s@@@Z ENDP ; PlayerCustomization
_TEXT	ENDS
PUBLIC	?SpectatorConnect@@YAXPAUedict_s@@@Z		; SpectatorConnect
EXTRN	?SpectatorConnect@CBaseSpectator@@QAEXXZ:NEAR	; CBaseSpectator::SpectatorConnect
;	COMDAT ?SpectatorConnect@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT
_pEntity$ = 8
_pev$ = -4
_pPlayer$ = -8
?SpectatorConnect@@YAXPAUedict_s@@@Z PROC NEAR		; SpectatorConnect, COMDAT

; 918  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 919  : 	entvars_t *pev = &pEntity->v;

	mov	eax, DWORD PTR _pEntity$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], eax

; 920  : 	CBaseSpectator *pPlayer = (CBaseSpectator *)GET_PRIVATE(pEntity);

	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4
	mov	DWORD PTR _pPlayer$[ebp], eax

; 921  : 
; 922  : 	if (pPlayer)

	cmp	DWORD PTR _pPlayer$[ebp], 0
	je	SHORT $L39113

; 923  : 		pPlayer->SpectatorConnect( );

	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?SpectatorConnect@CBaseSpectator@@QAEXXZ ; CBaseSpectator::SpectatorConnect
$L39113:

; 924  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SpectatorConnect@@YAXPAUedict_s@@@Z ENDP		; SpectatorConnect
_TEXT	ENDS
PUBLIC	?SpectatorDisconnect@@YAXPAUedict_s@@@Z		; SpectatorDisconnect
EXTRN	?SpectatorDisconnect@CBaseSpectator@@QAEXXZ:NEAR ; CBaseSpectator::SpectatorDisconnect
;	COMDAT ?SpectatorDisconnect@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT
_pEntity$ = 8
_pev$ = -4
_pPlayer$ = -8
?SpectatorDisconnect@@YAXPAUedict_s@@@Z PROC NEAR	; SpectatorDisconnect, COMDAT

; 934  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 935  : 	entvars_t *pev = &pEntity->v;

	mov	eax, DWORD PTR _pEntity$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], eax

; 936  : 	CBaseSpectator *pPlayer = (CBaseSpectator *)GET_PRIVATE(pEntity);

	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4
	mov	DWORD PTR _pPlayer$[ebp], eax

; 937  : 
; 938  : 	if (pPlayer)

	cmp	DWORD PTR _pPlayer$[ebp], 0
	je	SHORT $L39120

; 939  : 		pPlayer->SpectatorDisconnect( );

	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?SpectatorDisconnect@CBaseSpectator@@QAEXXZ ; CBaseSpectator::SpectatorDisconnect
$L39120:

; 940  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SpectatorDisconnect@@YAXPAUedict_s@@@Z ENDP		; SpectatorDisconnect
_TEXT	ENDS
PUBLIC	?SpectatorThink@@YAXPAUedict_s@@@Z		; SpectatorThink
EXTRN	?SpectatorThink@CBaseSpectator@@QAEXXZ:NEAR	; CBaseSpectator::SpectatorThink
;	COMDAT ?SpectatorThink@@YAXPAUedict_s@@@Z
_TEXT	SEGMENT
_pEntity$ = 8
_pev$ = -4
_pPlayer$ = -8
?SpectatorThink@@YAXPAUedict_s@@@Z PROC NEAR		; SpectatorThink, COMDAT

; 950  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 951  : 	entvars_t *pev = &pEntity->v;

	mov	eax, DWORD PTR _pEntity$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], eax

; 952  : 	CBaseSpectator *pPlayer = (CBaseSpectator *)GET_PRIVATE(pEntity);

	mov	ecx, DWORD PTR _pEntity$[ebp]
	push	ecx
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4
	mov	DWORD PTR _pPlayer$[ebp], eax

; 953  : 
; 954  : 	if (pPlayer)

	cmp	DWORD PTR _pPlayer$[ebp], 0
	je	SHORT $L39127

; 955  : 		pPlayer->SpectatorThink( );

	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?SpectatorThink@CBaseSpectator@@QAEXXZ	; CBaseSpectator::SpectatorThink
$L39127:

; 956  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SpectatorThink@@YAXPAUedict_s@@@Z ENDP			; SpectatorThink
_TEXT	ENDS
PUBLIC	??GVector@@QBE?AV0@ABV0@@Z			; Vector::operator-
PUBLIC	?SetupVisibility@@YAXPAUedict_s@@0PAPAE1@Z	; SetupVisibility
;	COMDAT ?SetupVisibility@@YAXPAUedict_s@@0PAPAE1@Z
_TEXT	SEGMENT
_pViewEntity$ = 8
_pClient$ = 12
_pvs$ = 16
_pas$ = 20
_org$ = -12
_pView$ = -16
$T40284 = -28
$T40285 = -40
$T40286 = -52
$T40287 = -64
$T40288 = -76
?SetupVisibility@@YAXPAUedict_s@@0PAPAE1@Z PROC NEAR	; SetupVisibility, COMDAT

; 977  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi

; 978  : 	Vector org;

	lea	ecx, DWORD PTR _org$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 979  : 	edict_t *pView = pClient;

	mov	eax, DWORD PTR _pClient$[ebp]
	mov	DWORD PTR _pView$[ebp], eax

; 980  : 
; 981  : 	// Find the client's PVS
; 982  : 	if ( pViewEntity )

	cmp	DWORD PTR _pViewEntity$[ebp], 0
	je	SHORT $L39136

; 984  : 		pView = pViewEntity;

	mov	ecx, DWORD PTR _pViewEntity$[ebp]
	mov	DWORD PTR _pView$[ebp], ecx
$L39136:

; 986  : 
; 987  : 	if ( pClient->v.flags & FL_PROXY )

	mov	edx, DWORD PTR _pClient$[ebp]
	mov	eax, DWORD PTR [edx+548]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $L39137

; 989  : 		*pvs = NULL;	// the spectator proxy sees

	mov	ecx, DWORD PTR _pvs$[ebp]
	mov	DWORD PTR [ecx], 0

; 990  : 		*pas = NULL;	// and hears everything

	mov	edx, DWORD PTR _pas$[ebp]
	mov	DWORD PTR [edx], 0

; 991  : 		return;

	jmp	$L39133
$L39137:

; 993  : 
; 994  : 	if( pView->v.effects & EF_MERGE_VISIBILITY )

	mov	eax, DWORD PTR _pView$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	and	ecx, 536870912				; 20000000H
	test	ecx, ecx
	je	SHORT $L39138

; 996  : 		org = pView->v.origin;

	mov	edx, DWORD PTR _pView$[ebp]
	add	edx, 136				; 00000088H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _org$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _org$[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _org$[ebp+8], edx

; 998  : 	else

	jmp	$L39141
$L39138:

; 1000 : 		org = pView->v.origin + pView->v.view_ofs;

	mov	eax, DWORD PTR _pView$[ebp]
	add	eax, 500				; 000001f4H
	push	eax
	lea	ecx, DWORD PTR $T40284[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pView$[ebp]
	add	ecx, 136				; 00000088H
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _org$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _org$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _org$[ebp+8], edx

; 1001 : 		if ( pView->v.flags & FL_DUCKING )

	mov	eax, DWORD PTR _pView$[ebp]
	mov	ecx, DWORD PTR [eax+548]
	and	ecx, 16384				; 00004000H
	test	ecx, ecx
	je	SHORT $L39141

; 1003 : 			org = org + ( VEC_HULL_MIN - VEC_DUCK_HULL_MIN );

	push	-1047527424				; c1900000H
	push	-1048576000				; c1800000H
	push	-1048576000				; c1800000H
	lea	ecx, DWORD PTR $T40286[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	lea	edx, DWORD PTR $T40287[ebp]
	push	edx
	push	-1039138816				; c2100000H
	push	-1048576000				; c1800000H
	push	-1048576000				; c1800000H
	lea	ecx, DWORD PTR $T40285[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, eax
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	push	eax
	lea	eax, DWORD PTR $T40288[ebp]
	push	eax
	lea	ecx, DWORD PTR _org$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _org$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _org$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _org$[ebp+8], eax
$L39141:

; 1006 : 
; 1007 : 	*pvs = ENGINE_SET_PVS ( (float *)&org );

	lea	ecx, DWORD PTR _org$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+496
	add	esp, 4
	mov	edx, DWORD PTR _pvs$[ebp]
	mov	DWORD PTR [edx], eax

; 1008 : 	*pas = ENGINE_SET_PAS ( (float *)&org );

	lea	eax, DWORD PTR _org$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+500
	add	esp, 4
	mov	ecx, DWORD PTR _pas$[ebp]
	mov	DWORD PTR [ecx], eax
$L39133:

; 1009 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetupVisibility@@YAXPAUedict_s@@0PAPAE1@Z ENDP		; SetupVisibility
_TEXT	ENDS
;	COMDAT ??GVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
_v$ = 12
___$ReturnUdt$ = 8
_this$ = -4
$T40291 = -16
??GVector@@QBE?AV0@ABV0@@Z PROC NEAR			; Vector::operator-, COMDAT

; 150  : 	inline Vector operator-(const Vector& v) const	{ return Vector(x-v.x, y-v.y, z-v.z);	   }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [edx]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T40291[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??GVector@@QBE?AV0@ABV0@@Z ENDP				; Vector::operator-
_TEXT	ENDS
PUBLIC	??8Vector@@QBEHABV0@@Z				; Vector::operator==
PUBLIC	??BVector@@QAEPAMXZ				; Vector::operator float *
PUBLIC	__real@8@4008fa00000000000000
PUBLIC	??_C@_0BC@FEBM@info_intermission?$AA@		; `string'
PUBLIC	??BEHANDLE@@QAEHXZ				; EHANDLE::operator int
PUBLIC	?FClassnameIs@@YAHPAUentvars_s@@PBD@Z		; FClassnameIs
PUBLIC	?AddToFullPack@@YAHPAUentity_state_s@@HPAUedict_s@@1HHPAE@Z ; AddToFullPack
EXTRN	__ftol:NEAR
EXTRN	?g_groupop@@3HA:DWORD				; g_groupop
EXTRN	?UTIL_SetGroupTrace@@YAXHH@Z:NEAR		; UTIL_SetGroupTrace
EXTRN	?UTIL_UnsetGroupTrace@@YAXXZ:NEAR		; UTIL_UnsetGroupTrace
EXTRN	?g_vecZero@@3VVector@@B:BYTE			; g_vecZero
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
EXTRN	?GetAbsStartPos@CBeam@@QBEABVVector@@XZ:NEAR	; CBeam::GetAbsStartPos
EXTRN	?GetAbsEndPos@CBeam@@QBEABVVector@@XZ:NEAR	; CBeam::GetAbsEndPos
;	COMDAT ??_C@_0BC@FEBM@info_intermission?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_0BC@FEBM@info_intermission?$AA@ DB 'info_intermission', 00H ; `string'
CONST	ENDS
;	COMDAT __real@8@4008fa00000000000000
CONST	SEGMENT
__real@8@4008fa00000000000000 DQ 0408f400000000000r ; 1000
CONST	ENDS
;	COMDAT ?AddToFullPack@@YAHPAUentity_state_s@@HPAUedict_s@@1HHPAE@Z
_TEXT	SEGMENT
_state$ = 8
_e$ = 12
_ent$ = 16
_host$ = 20
_hostflags$ = 24
_player$ = 28
_pSet$ = 32
_i$ = -4
_pEntity$ = -8
_pBeam$39320 = -12
_owner$39336 = -16
?AddToFullPack@@YAHPAUentity_state_s@@HPAUedict_s@@1HHPAE@Z PROC NEAR ; AddToFullPack, COMDAT

; 1027 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1028 : 	int	i;
; 1029 : 
; 1030 : 	// don't send if flagged for NODRAW and it's not the host getting the message
; 1031 : 	if ( ( ent->v.effects == EF_NODRAW ) && ( ent != host ) )

	mov	eax, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [eax+408], 128		; 00000080H
	jne	SHORT $L39295
	mov	ecx, DWORD PTR _ent$[ebp]
	cmp	ecx, DWORD PTR _host$[ebp]
	je	SHORT $L39295

; 1032 : 		return 0;

	xor	eax, eax
	jmp	$L39293
$L39295:

; 1033 : 
; 1034 : 	// Ignore ents without valid / visible models
; 1035 : 	if ( !ent->v.modelindex || !STRING( ent->v.model ) )

	mov	edx, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [edx+308], 0
	je	SHORT $L39297
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+312]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	test	eax, eax
	jne	SHORT $L39296
$L39297:

; 1036 : 		return 0;

	xor	eax, eax
	jmp	$L39293
$L39296:

; 1037 : 
; 1038 : 	// Don't send spectators to other players
; 1039 : 	if ( ( ent->v.flags & FL_SPECTATOR ) && ( ent != host ) )

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+548]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	je	SHORT $L39298
	mov	ecx, DWORD PTR _ent$[ebp]
	cmp	ecx, DWORD PTR _host$[ebp]
	je	SHORT $L39298

; 1041 : 		return 0;

	xor	eax, eax
	jmp	$L39293
$L39298:

; 1043 : 
; 1044 : 	CBaseEntity *pEntity = CBaseEntity::Instance( ent );

	mov	edx, DWORD PTR _ent$[ebp]
	push	edx
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pEntity$[ebp], eax

; 1045 : 
; 1046 : 	if( !pEntity )

	cmp	DWORD PTR _pEntity$[ebp], 0
	jne	SHORT $L39300

; 1048 : 		return 0;

	xor	eax, eax
	jmp	$L39293
$L39300:

; 1050 : 
; 1051 : 	// Ignore if not the host and not touching a PVS/PAS leaf
; 1052 : 	// If pSet is NULL, then the test will always succeed and the entity will be added to the update
; 1053 : 	if ( ent != host )

	mov	eax, DWORD PTR _ent$[ebp]
	cmp	eax, DWORD PTR _host$[ebp]
	je	SHORT $L39307

; 1055 : 		if ( !ENGINE_CHECK_VISIBILITY( (const struct edict_s *)ent, pSet ) )

	mov	ecx, DWORD PTR _pSet$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ent$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+504
	add	esp, 8
	test	eax, eax
	jne	SHORT $L39307

; 1057 : 			if( FBitSet( ent->v.effects, EF_PROJECTED_LIGHT ))

	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	and	ecx, 8192				; 00002000H
	test	ecx, ecx
	je	SHORT $L39304

; 1059 : 				// projected light have second PVS point so we must check her too
; 1060 : 				if ( !ENGINE_CHECK_VISIBILITY( (const struct edict_s *)ent->v.enemy, pSet ) )

	mov	edx, DWORD PTR _pSet$[ebp]
	push	edx
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+504
	add	esp, 8
	test	eax, eax
	jne	SHORT $L39306

; 1061 : 					return 0;				

	xor	eax, eax
	jmp	$L39293
$L39306:

; 1063 : 			else

	jmp	SHORT $L39307
$L39304:

; 1065 : 				return 0;

	xor	eax, eax
	jmp	$L39293
$L39307:

; 1069 : 
; 1070 : 	// Don't send entity to local client if the client says it's predicting the entity itself.
; 1071 : 	if ( ent->v.flags & FL_SKIPLOCALHOST )

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+548]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $L39309

; 1073 : 		if ( ( hostflags & 1 ) && ( ent->v.owner == host ) )

	mov	ecx, DWORD PTR _hostflags$[ebp]
	and	ecx, 1
	test	ecx, ecx
	je	SHORT $L39309
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+536]
	cmp	eax, DWORD PTR _host$[ebp]
	jne	SHORT $L39309

; 1074 : 			return 0;

	xor	eax, eax
	jmp	$L39293
$L39309:

; 1076 : 	
; 1077 : 	if ( host->v.groupinfo )

	mov	ecx, DWORD PTR _host$[ebp]
	cmp	DWORD PTR [ecx+704], 0
	je	SHORT $L39310

; 1079 : 		UTIL_SetGroupTrace( host->v.groupinfo, GROUP_OP_AND );

	push	0
	mov	edx, DWORD PTR _host$[ebp]
	mov	eax, DWORD PTR [edx+704]
	push	eax
	call	?UTIL_SetGroupTrace@@YAXHH@Z		; UTIL_SetGroupTrace
	add	esp, 8

; 1080 : 
; 1081 : 		// Should always be set, of course
; 1082 : 		if ( ent->v.groupinfo )

	mov	ecx, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [ecx+704], 0
	je	SHORT $L39316

; 1084 : 			if ( g_groupop == GROUP_OP_AND )

	cmp	DWORD PTR ?g_groupop@@3HA, 0		; g_groupop
	jne	SHORT $L39312

; 1086 : 				if ( !(ent->v.groupinfo & host->v.groupinfo ) )

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR _host$[ebp]
	mov	ecx, DWORD PTR [edx+704]
	and	ecx, DWORD PTR [eax+704]
	test	ecx, ecx
	jne	SHORT $L39313

; 1087 : 					return 0;

	xor	eax, eax
	jmp	$L39293
$L39313:

; 1089 : 			else if ( g_groupop == GROUP_OP_NAND )

	jmp	SHORT $L39316
$L39312:
	cmp	DWORD PTR ?g_groupop@@3HA, 1		; g_groupop
	jne	SHORT $L39316

; 1091 : 				if ( ent->v.groupinfo & host->v.groupinfo )

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR _host$[ebp]
	mov	ecx, DWORD PTR [edx+704]
	and	ecx, DWORD PTR [eax+704]
	test	ecx, ecx
	je	SHORT $L39316

; 1092 : 					return 0;

	xor	eax, eax
	jmp	$L39293
$L39316:

; 1095 : 
; 1096 : 		UTIL_UnsetGroupTrace();

	call	?UTIL_UnsetGroupTrace@@YAXXZ		; UTIL_UnsetGroupTrace
$L39310:

; 1098 : 
; 1099 : 	memset( state, 0, sizeof( *state ) );

	push	340					; 00000154H
	push	0
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1100 : 
; 1101 : 	// Assign index so we can track this entity from frame to frame and
; 1102 : 	//  delta from it.
; 1103 : 	state->number	  = e;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1104 : 	state->entityType = ENTITY_NORMAL;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], 1

; 1105 : 	
; 1106 : 	// Flag custom entities.
; 1107 : 	if ( ent->v.flags & FL_CUSTOMENTITY )

	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+548]
	and	ecx, 536870912				; 20000000H
	test	ecx, ecx
	je	SHORT $L39317

; 1109 : 		state->entityType = ENTITY_BEAM;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], 2
$L39317:

; 1111 : 
; 1112 : 	// 
; 1113 : 	// Copy state data
; 1114 : 	//
; 1115 : 
; 1116 : 	// Round animtime to nearest millisecond
; 1117 : 	state->animtime   = (int)(1000.0 * ent->v.animtime ) / 1000.0;

	mov	eax, DWORD PTR _ent$[ebp]
	fld	DWORD PTR [eax+436]
	fmul	QWORD PTR __real@8@4008fa00000000000000
	call	__ftol
	mov	DWORD PTR -20+[ebp], eax
	fild	DWORD PTR -20+[ebp]
	fdiv	QWORD PTR __real@8@4008fa00000000000000
	mov	ecx, DWORD PTR _state$[ebp]
	fstp	DWORD PTR [ecx+92]

; 1118 : 
; 1119 : 	if( state->entityType == ENTITY_BEAM )

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx], 2
	jne	SHORT $L39319

; 1121 : 		CBeam *pBeam = (CBeam *)pEntity;

	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	DWORD PTR _pBeam$39320[ebp], eax

; 1122 : 		state->origin = pBeam->GetAbsStartPos();

	mov	ecx, DWORD PTR _pBeam$39320[ebp]
	call	?GetAbsStartPos@CBeam@@QBEABVVector@@XZ	; CBeam::GetAbsStartPos
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1123 : 		state->angles = pBeam->GetAbsEndPos();

	mov	ecx, DWORD PTR _pBeam$39320[ebp]
	call	?GetAbsEndPos@CBeam@@QBEABVVector@@XZ	; CBeam::GetAbsEndPos
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1125 : 	else

	jmp	SHORT $L39322
$L39319:

; 1127 : 		state->origin = pEntity->GetAbsOrigin();

	mov	ecx, DWORD PTR _pEntity$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1128 : 		state->angles = pEntity->GetAbsAngles();

	mov	ecx, DWORD PTR _pEntity$[ebp]
	call	?GetAbsAngles@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsAngles
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$L39322:

; 1130 : 
; 1131 : 	memcpy( state->mins, ent->v.mins, 3 * sizeof( float ) );

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _ent$[ebp]
	add	ecx, 348				; 0000015cH
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 124				; 0000007cH
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1132 : 	memcpy( state->maxs, ent->v.maxs, 3 * sizeof( float ) );

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _ent$[ebp]
	add	ecx, 360				; 00000168H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 136				; 00000088H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1133 : 
; 1134 : 	state->startpos = ent->v.startpos;

	mov	ecx, DWORD PTR _ent$[ebp]
	add	ecx, 268				; 0000010cH
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 228				; 000000e4H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1135 : 	state->endpos = ent->v.endpos;

	mov	edx, DWORD PTR _ent$[ebp]
	add	edx, 256				; 00000100H
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 1136 : 
; 1137 : 	state->impacttime = ent->v.impacttime;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	mov	DWORD PTR [eax+252], edx

; 1138 : 	state->starttime = ent->v.starttime;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	mov	DWORD PTR [eax+256], edx

; 1139 : 
; 1140 : 	state->modelindex = ent->v.modelindex;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+308]
	mov	DWORD PTR [eax+40], edx

; 1141 : 		
; 1142 : 	state->frame      = ent->v.frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+432]
	mov	DWORD PTR [eax+48], edx

; 1143 : 
; 1144 : 	state->skin       = ent->v.skin;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	dx, WORD PTR [ecx+400]
	mov	WORD PTR [eax+56], dx

; 1145 : 	state->effects    = ent->v.effects;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	mov	DWORD PTR [eax+60], edx

; 1146 : 
; 1147 : 	// This non-player entity is being moved by the game .dll and not the physics simulation system
; 1148 : 	//  make sure that we interpolate it's position on the client if it moves
; 1149 : 	if( !player && ent->v.animtime && ent->v.velocity == g_vecZero && pEntity->m_hParent == NULL )

	cmp	DWORD PTR _player$[ebp], 0
	jne	SHORT $L39325
	mov	eax, DWORD PTR _ent$[ebp]
	fld	DWORD PTR [eax+436]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L39325
	push	OFFSET FLAT:?g_vecZero@@3VVector@@B	; g_vecZero
	mov	ecx, DWORD PTR _ent$[ebp]
	add	ecx, 160				; 000000a0H
	call	??8Vector@@QBEHABV0@@Z			; Vector::operator==
	test	eax, eax
	je	SHORT $L39325
	mov	ecx, DWORD PTR _pEntity$[ebp]
	add	ecx, 148				; 00000094H
	call	??BEHANDLE@@QAEHXZ			; EHANDLE::operator int
	test	eax, eax
	jne	SHORT $L39325

; 1151 : 		state->eflags |= EFLAG_SLERP;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	dl, BYTE PTR [ecx+68]
	or	dl, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+68], dl
$L39325:

; 1153 : 
; 1154 : 	if( FClassnameIs( &ent->v, "info_intermission" ))

	push	OFFSET FLAT:??_C@_0BC@FEBM@info_intermission?$AA@ ; `string'
	mov	ecx, DWORD PTR _ent$[ebp]
	add	ecx, 128				; 00000080H
	push	ecx
	call	?FClassnameIs@@YAHPAUentvars_s@@PBD@Z	; FClassnameIs
	add	esp, 8
	test	eax, eax
	je	SHORT $L39326

; 1156 : 		state->eflags |= EFLAG_INTERMISSION;

	mov	edx, DWORD PTR _state$[ebp]
	mov	al, BYTE PTR [edx+68]
	or	al, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	BYTE PTR [ecx+68], al
$L39326:

; 1158 : 
; 1159 : 	state->scale	  = ent->v.scale;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+452]
	mov	DWORD PTR [edx+64], ecx

; 1160 : 	state->solid	  = ent->v.solid;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	cx, WORD PTR [eax+396]
	mov	WORD PTR [edx+58], cx

; 1161 : 	state->colormap   = ent->v.colormap;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+552]
	mov	DWORD PTR [edx+52], ecx

; 1162 : 
; 1163 : 	state->movetype   = ent->v.movetype;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	mov	DWORD PTR [edx+88], ecx

; 1164 : 	state->sequence   = ent->v.sequence;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+424]
	mov	DWORD PTR [edx+44], ecx

; 1165 : 	state->framerate  = ent->v.framerate;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+440]
	mov	DWORD PTR [edx+96], ecx

; 1166 : 	state->body       = ent->v.body;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	mov	DWORD PTR [edx+100], ecx

; 1167 : 
; 1168 : 	for (i = 0; i < 4; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L39328
$L39329:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$L39328:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $L39330

; 1170 : 		state->controller[i] = ent->v.controller[i];

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [ecx+444]
	mov	BYTE PTR [eax+104], dl

; 1171 : 	}

	jmp	SHORT $L39329
$L39330:

; 1172 : 
; 1173 : 	for (i = 0; i < 2; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L39331
$L39332:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L39331:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $L39333

; 1175 : 		state->blending[i]   = ent->v.blending[i];

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _ent$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [edx+448]
	mov	BYTE PTR [ecx+108], al

; 1176 : 	}

	jmp	SHORT $L39332
$L39333:

; 1177 : 
; 1178 : 	state->rendermode    = ent->v.rendermode;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+456]
	mov	DWORD PTR [ecx+72], eax

; 1179 : 	state->renderamt     = ent->v.renderamt; 

	mov	ecx, DWORD PTR _ent$[ebp]
	fld	DWORD PTR [ecx+460]
	call	__ftol
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+76], eax

; 1180 : 	state->renderfx      = ent->v.renderfx;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+476]
	mov	DWORD PTR [eax+84], edx

; 1181 : 	state->rendercolor.r = ent->v.rendercolor.x;

	mov	eax, DWORD PTR _ent$[ebp]
	fld	DWORD PTR [eax+464]
	call	__ftol
	mov	ecx, DWORD PTR _state$[ebp]
	mov	BYTE PTR [ecx+80], al

; 1182 : 	state->rendercolor.g = ent->v.rendercolor.y;

	mov	edx, DWORD PTR _ent$[ebp]
	fld	DWORD PTR [edx+468]
	call	__ftol
	mov	ecx, DWORD PTR _state$[ebp]
	mov	BYTE PTR [ecx+81], al

; 1183 : 	state->rendercolor.b = ent->v.rendercolor.z;

	mov	edx, DWORD PTR _ent$[ebp]
	fld	DWORD PTR [edx+472]
	call	__ftol
	mov	ecx, DWORD PTR _state$[ebp]
	mov	BYTE PTR [ecx+82], al

; 1184 : 	state->fuser1	= ent->v.fuser1;	// gaitframe

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+724]
	mov	DWORD PTR [edx+276], ecx

; 1185 : 	state->fuser2	 = ent->v.fuser2; // FOV

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+728]
	mov	DWORD PTR [edx+280], ecx

; 1186 : 	state->iuser1	 = ent->v.iuser1; // flags

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	mov	DWORD PTR [edx+260], ecx

; 1187 : 	state->iuser2	 = ent->v.iuser2; // flags

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+712]
	mov	DWORD PTR [edx+264], ecx

; 1188 : 	state->iuser3	 = ent->v.iuser3; // vertexlight cachenum

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+716]
	mov	DWORD PTR [edx+268], ecx

; 1189 : 	state->iuser4	 = ent->v.iuser4; 

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+720]
	mov	DWORD PTR [edx+272], ecx

; 1190 : 
; 1191 : 	// copy poseparams across network
; 1192 : 	state->vuser1.x	= pEntity->m_flPoseParameter[0];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	mov	DWORD PTR [edx+292], ecx

; 1193 : 	state->vuser1.y	= pEntity->m_flPoseParameter[1];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1652]
	mov	DWORD PTR [edx+296], ecx

; 1194 : 	state->vuser1.z	= pEntity->m_flPoseParameter[2];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1656]
	mov	DWORD PTR [edx+300], ecx

; 1195 : 	state->vuser2.x	= pEntity->m_flPoseParameter[3];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1660]
	mov	DWORD PTR [edx+304], ecx

; 1196 : 	state->vuser2.y	= pEntity->m_flPoseParameter[4];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1664]
	mov	DWORD PTR [edx+308], ecx

; 1197 : 	state->vuser2.z	= pEntity->m_flPoseParameter[5];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1668]
	mov	DWORD PTR [edx+312], ecx

; 1198 : 	state->vuser3.x	= pEntity->m_flPoseParameter[6];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1672]
	mov	DWORD PTR [edx+316], ecx

; 1199 : 	state->vuser3.y	= pEntity->m_flPoseParameter[7];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1676]
	mov	DWORD PTR [edx+320], ecx

; 1200 : 	state->vuser3.z	= pEntity->m_flPoseParameter[8];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1680]
	mov	DWORD PTR [edx+324], ecx

; 1201 : 	state->vuser4.x	= pEntity->m_flPoseParameter[9];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1684]
	mov	DWORD PTR [edx+328], ecx

; 1202 : 	state->vuser4.y	= pEntity->m_flPoseParameter[10];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1688]
	mov	DWORD PTR [edx+332], ecx

; 1203 : 	state->vuser4.z	= pEntity->m_flPoseParameter[11];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _pEntity$[ebp]
	mov	ecx, DWORD PTR [eax+1692]
	mov	DWORD PTR [edx+336], ecx

; 1204 : 
; 1205 : 	state->aiment = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+148], 0

; 1206 : 	if ( ent->v.aiment )

	mov	eax, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [eax+532], 0
	je	SHORT $L39334

; 1208 : 		state->aiment = ENTINDEX( ent->v.aiment );

	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+532]
	push	edx
	call	?ENTINDEX@@YAHPAUedict_s@@@Z		; ENTINDEX
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+148], eax
$L39334:

; 1210 : 
; 1211 : 	state->owner = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+152], 0

; 1212 : 	if ( ent->v.owner )

	mov	eax, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [eax+536], 0
	je	SHORT $L39337

; 1214 : 		int owner = ENTINDEX( ent->v.owner );

	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+536]
	push	edx
	call	?ENTINDEX@@YAHPAUedict_s@@@Z		; ENTINDEX
	add	esp, 4
	mov	DWORD PTR _owner$39336[ebp], eax

; 1215 : 		
; 1216 : 		// Only care if owned by a player
; 1217 : 		if ( owner >= 1 && owner <= gpGlobals->maxClients )

	cmp	DWORD PTR _owner$39336[ebp], 1
	jl	SHORT $L39337
	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	mov	ecx, DWORD PTR _owner$39336[ebp]
	cmp	ecx, DWORD PTR [eax+144]
	jg	SHORT $L39337

; 1219 : 			state->owner = owner;	

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _owner$39336[ebp]
	mov	DWORD PTR [edx+152], eax
$L39337:

; 1222 : 
; 1223 : 	state->onground = -1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+208], -1

; 1224 : 	if ( FBitSet( ent->v.flags, FL_ONGROUND ) && ent->v.groundentity != NULL )

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+548]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $L39338
	mov	ecx, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [ecx+540], 0
	je	SHORT $L39338

; 1226 : 		state->onground = ENTINDEX( ent->v.groundentity );

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+540]
	push	eax
	call	?ENTINDEX@@YAHPAUedict_s@@@Z		; ENTINDEX
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+208], eax
$L39338:

; 1228 : 
; 1229 : 	// HACK:  Somewhat...
; 1230 : 	// Class is overridden for non-players to signify a breakable glass object ( sort of a class? )
; 1231 : 	if ( !player )

	cmp	DWORD PTR _player$[ebp], 0
	jne	SHORT $L39339

; 1233 : 		state->playerclass  = ent->v.playerclass;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+652]
	mov	DWORD PTR [edx+168], ecx
$L39339:

; 1235 : 
; 1236 : 	// Special stuff for players only
; 1237 : 	if ( player )

	cmp	DWORD PTR _player$[ebp], 0
	je	$L39340

; 1239 : 		memcpy( state->basevelocity, ent->v.basevelocity, 3 * sizeof( float ) );

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _ent$[ebp]
	add	ecx, 172				; 000000acH
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 188				; 000000bcH
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1240 : 
; 1241 : 		state->weaponmodel  = MODEL_INDEX( STRING( ent->v.weaponmodel ) );

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+320]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+12
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+180], eax

; 1242 : 		state->gaitsequence = ent->v.gaitsequence;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	mov	DWORD PTR [edx+184], ecx

; 1243 : 		state->spectator = ent->v.flags & FL_SPECTATOR;

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+548]
	and	eax, 67108864				; 04000000H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+176], eax

; 1244 : 		state->friction     = ent->v.friction;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	mov	DWORD PTR [edx+156], ecx

; 1245 : 		state->gravity      = ent->v.gravity;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	DWORD PTR [edx+160], ecx

; 1246 : //		state->team			= ent->v.team;
; 1247 : //		
; 1248 : 		state->usehull      = ( ent->v.flags & FL_DUCKING ) ? 1 : 0;

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+548]
	and	eax, 16384				; 00004000H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 1249 : 		state->health		= ent->v.health;

	mov	edx, DWORD PTR _ent$[ebp]
	fld	DWORD PTR [edx+480]
	call	__ftol
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+172], eax
$L39340:

; 1251 : 
; 1252 : 	state->weaponmodel  = MODEL_INDEX( STRING( ent->v.weaponmodel ) );

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+320]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+12
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+180], eax

; 1253 : 	state->team	= ent->v.team;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+556]
	mov	DWORD PTR [edx+164], ecx

; 1254 : 
; 1255 : 	return 1;

	mov	eax, 1
$L39293:

; 1256 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AddToFullPack@@YAHPAUentity_state_s@@HPAUedict_s@@1HHPAE@Z ENDP ; AddToFullPack
_TEXT	ENDS
;	COMDAT ??8Vector@@QBEHABV0@@Z
_TEXT	SEGMENT
_v$ = 8
_this$ = -4
??8Vector@@QBEHABV0@@Z PROC NEAR			; Vector::operator==, COMDAT

; 147  : 	inline int operator==(const Vector& v) const	{ return x==v.x && y==v.y && z==v.z;	   }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR [ecx]
	fnstsw	ax
	test	ah, 64					; 00000040H
	je	SHORT $L40299
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fcomp	DWORD PTR [eax+4]
	fnstsw	ax
	test	ah, 64					; 00000040H
	je	SHORT $L40299
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fcomp	DWORD PTR [edx+8]
	fnstsw	ax
	test	ah, 64					; 00000040H
	je	SHORT $L40299
	mov	DWORD PTR -8+[ebp], 1
	jmp	SHORT $L40300
$L40299:
	mov	DWORD PTR -8+[ebp], 0
$L40300:
	mov	eax, DWORD PTR -8+[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector@@QBEHABV0@@Z ENDP				; Vector::operator==
_TEXT	ENDS
;	COMDAT ??BVector@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4
??BVector@@QAEPAMXZ PROC NEAR				; Vector::operator float *, COMDAT

; 228  : 	operator float *()				{ return &x; } // Vectors will now automatically convert to float * when needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector@@QAEPAMXZ ENDP				; Vector::operator float *
_TEXT	ENDS
PUBLIC	?FNullEnt@@YAHPAUentvars_s@@@Z			; FNullEnt
;	COMDAT ?FClassnameIs@@YAHPAUentvars_s@@PBD@Z
_TEXT	SEGMENT
_pev$ = 8
_szClassname$ = 12
?FClassnameIs@@YAHPAUentvars_s@@PBD@Z PROC NEAR		; FClassnameIs, COMDAT

; 294  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 295  : 	if( FNullEnt( pev )) return FALSE;

	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?FNullEnt@@YAHPAUentvars_s@@@Z		; FNullEnt
	add	esp, 4
	test	eax, eax
	je	SHORT $L32565
	xor	eax, eax
	jmp	SHORT $L32564
$L32565:

; 296  : 	return FStrEq( STRING( pev->classname ), szClassname );

	mov	ecx, DWORD PTR _szClassname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pev$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
$L32564:

; 297  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FClassnameIs@@YAHPAUentvars_s@@PBD@Z ENDP		; FClassnameIs
_TEXT	ENDS
PUBLIC	?OFFSET@@YAHPAUentvars_s@@@Z			; OFFSET
;	COMDAT ?FNullEnt@@YAHPAUentvars_s@@@Z
_TEXT	SEGMENT
_pev$ = 8
?FNullEnt@@YAHPAUentvars_s@@@Z PROC NEAR		; FNullEnt, COMDAT

; 196  : inline BOOL FNullEnt(entvars_t* pev)				{ return pev == NULL || FNullEnt(OFFSET(pev)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	cmp	DWORD PTR _pev$[ebp], 0
	je	SHORT $L40307
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?OFFSET@@YAHPAUentvars_s@@@Z		; OFFSET
	add	esp, 4
	push	eax
	call	?FNullEnt@@YAHH@Z			; FNullEnt
	add	esp, 4
	test	eax, eax
	jne	SHORT $L40307
	mov	DWORD PTR -4+[ebp], 0
	jmp	SHORT $L40308
$L40307:
	mov	DWORD PTR -4+[ebp], 1
$L40308:
	mov	eax, DWORD PTR -4+[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FNullEnt@@YAHPAUentvars_s@@@Z ENDP			; FNullEnt
_TEXT	ENDS
PUBLIC	??_C@_0BF@BH@Bad?5pev?5in?5OFFSET?$CI?$CJ?6?$AA@ ; `string'
;	COMDAT ??_C@_0BF@BH@Bad?5pev?5in?5OFFSET?$CI?$CJ?6?$AA@
; File z:\xashxtsrc\server\util.h
CONST	SEGMENT
??_C@_0BF@BH@Bad?5pev?5in?5OFFSET?$CI?$CJ?6?$AA@ DB 'Bad pev in OFFSET()', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?OFFSET@@YAHPAUentvars_s@@@Z
_TEXT	SEGMENT
_pev$ = 8
?OFFSET@@YAHPAUentvars_s@@@Z PROC NEAR			; OFFSET, COMDAT

; 168  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 169  : #if _DEBUG
; 170  : 	if ( !pev )

	cmp	DWORD PTR _pev$[ebp], 0
	jne	SHORT $L32439

; 171  : 		ALERT( at_error, "Bad pev in OFFSET()\n" );

	push	OFFSET FLAT:??_C@_0BF@BH@Bad?5pev?5in?5OFFSET?$CI?$CJ?6?$AA@ ; `string'
	push	4
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+244
	add	esp, 8
$L32439:

; 172  : #endif
; 173  : 	return OFFSET(ENT(pev)); 

	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	?OFFSET@@YAHPBUedict_s@@@Z		; OFFSET
	add	esp, 4

; 174  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OFFSET@@YAHPAUentvars_s@@@Z ENDP			; OFFSET
_TEXT	ENDS
PUBLIC	?Get@EHANDLE@@QAEPAUedict_s@@XZ			; EHANDLE::Get
;	COMDAT ??BEHANDLE@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4
??BEHANDLE@@QAEHXZ PROC NEAR				; EHANDLE::operator int, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	return Get() != NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get@EHANDLE@@QAEPAUedict_s@@XZ		; EHANDLE::Get
	neg	eax
	sbb	eax, eax
	neg	eax

; 87   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BEHANDLE@@QAEHXZ ENDP					; EHANDLE::operator int
_TEXT	ENDS
;	COMDAT ?Get@EHANDLE@@QAEPAUedict_s@@XZ
_TEXT	SEGMENT
_this$ = -4
?Get@EHANDLE@@QAEPAUedict_s@@XZ PROC NEAR		; EHANDLE::Get, COMDAT

; 40   : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 	if( m_pent )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L34265

; 43   : #if 0
; 44   : 		// keep client entity always in actual state
; 45   : 		if( ENTINDEX( m_pent ) == 1 )
; 46   : 			m_serialnumber = m_pent->serialnumber;
; 47   : #endif
; 48   : 		if( m_pent->serialnumber == m_serialnumber ) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $L34265

; 49   : 			return m_pent; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $L34263
$L34265:

; 51   : 
; 52   : 	return NULL; 

	xor	eax, eax
$L34263:

; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get@EHANDLE@@QAEPAUedict_s@@XZ ENDP			; EHANDLE::Get
_TEXT	ENDS
PUBLIC	?CreateBaseline@@YAXHHPAUentity_state_s@@PAUedict_s@@HVVector@@2@Z ; CreateBaseline
;	COMDAT ?CreateBaseline@@YAXHHPAUentity_state_s@@PAUedict_s@@HVVector@@2@Z
_TEXT	SEGMENT
_player$ = 8
_eindex$ = 12
_baseline$ = 16
_entity$ = 20
_playermodelindex$ = 24
_player_mins$ = 28
_player_maxs$ = 40
_pEntity$ = -4
?CreateBaseline@@YAXHHPAUentity_state_s@@PAUedict_s@@HVVector@@2@Z PROC NEAR ; CreateBaseline, COMDAT

; 1269 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1270 : 	CBaseEntity *pEntity = CBaseEntity::Instance( entity );

	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pEntity$[ebp], eax

; 1271 : 
; 1272 : 	baseline->origin		= entity->v.origin;

	mov	ecx, DWORD PTR _entity$[ebp]
	add	ecx, 136				; 00000088H
	mov	edx, DWORD PTR _baseline$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1273 : 	baseline->angles		= entity->v.angles;

	mov	edx, DWORD PTR _entity$[ebp]
	add	edx, 208				; 000000d0H
	mov	eax, DWORD PTR _baseline$[ebp]
	add	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 1274 : 	baseline->frame		= entity->v.frame;

	mov	eax, DWORD PTR _baseline$[ebp]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx+432]
	mov	DWORD PTR [eax+48], edx

; 1275 : 	baseline->skin		= (short)entity->v.skin;

	mov	eax, DWORD PTR _baseline$[ebp]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	dx, WORD PTR [ecx+400]
	mov	WORD PTR [eax+56], dx

; 1276 : 	baseline->body		= entity->v.body;

	mov	eax, DWORD PTR _baseline$[ebp]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	mov	DWORD PTR [eax+100], edx

; 1277 : 
; 1278 : 	// render information
; 1279 : 	baseline->rendermode	= (byte)entity->v.rendermode;

	mov	eax, DWORD PTR _entity$[ebp]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+456]
	mov	edx, DWORD PTR _baseline$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 1280 : 	baseline->renderamt		= (byte)entity->v.renderamt;

	mov	eax, DWORD PTR _entity$[ebp]
	fld	DWORD PTR [eax+460]
	call	__ftol
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 1281 : 	baseline->rendercolor.r	= (byte)entity->v.rendercolor.x;

	mov	edx, DWORD PTR _entity$[ebp]
	fld	DWORD PTR [edx+464]
	call	__ftol
	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	BYTE PTR [ecx+80], al

; 1282 : 	baseline->rendercolor.g	= (byte)entity->v.rendercolor.y;

	mov	edx, DWORD PTR _entity$[ebp]
	fld	DWORD PTR [edx+468]
	call	__ftol
	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	BYTE PTR [ecx+81], al

; 1283 : 	baseline->rendercolor.b	= (byte)entity->v.rendercolor.z;

	mov	edx, DWORD PTR _entity$[ebp]
	fld	DWORD PTR [edx+472]
	call	__ftol
	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	BYTE PTR [ecx+82], al

; 1284 : 	baseline->renderfx		= (byte)entity->v.renderfx;

	mov	edx, DWORD PTR _entity$[ebp]
	xor	eax, eax
	mov	al, BYTE PTR [edx+476]
	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 1285 : 
; 1286 : 	if ( player )

	cmp	DWORD PTR _player$[ebp], 0
	je	$L39360

; 1288 : 		baseline->mins		= player_mins;

	mov	edx, DWORD PTR _baseline$[ebp]
	add	edx, 124				; 0000007cH
	mov	eax, DWORD PTR _player_mins$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _player_mins$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _player_mins$[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 1289 : 		baseline->maxs		= player_maxs;

	mov	ecx, DWORD PTR _baseline$[ebp]
	add	ecx, 136				; 00000088H
	mov	edx, DWORD PTR _player_maxs$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _player_maxs$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _player_maxs$[ebp+8]
	mov	DWORD PTR [ecx+8], edx

; 1290 : 
; 1291 : 		baseline->colormap		= eindex;

	mov	eax, DWORD PTR _baseline$[ebp]
	mov	ecx, DWORD PTR _eindex$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 1292 : 		baseline->modelindex	= playermodelindex;

	mov	edx, DWORD PTR _baseline$[ebp]
	mov	eax, DWORD PTR _playermodelindex$[ebp]
	mov	DWORD PTR [edx+40], eax

; 1293 : 		baseline->friction		= 1.0;

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	DWORD PTR [ecx+156], 1065353216		; 3f800000H

; 1294 : 		baseline->movetype		= MOVETYPE_WALK;

	mov	edx, DWORD PTR _baseline$[ebp]
	mov	DWORD PTR [edx+88], 3

; 1295 : 
; 1296 : 		baseline->scale		= entity->v.scale;

	mov	eax, DWORD PTR _baseline$[ebp]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx+452]
	mov	DWORD PTR [eax+64], edx

; 1297 : 		baseline->solid		= SOLID_SLIDEBOX;

	mov	eax, DWORD PTR _baseline$[ebp]
	mov	WORD PTR [eax+58], 3

; 1298 : 		baseline->framerate		= 1.0;

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	DWORD PTR [ecx+96], 1065353216		; 3f800000H

; 1299 : 		baseline->gravity		= 1.0;

	mov	edx, DWORD PTR _baseline$[ebp]
	mov	DWORD PTR [edx+160], 1065353216		; 3f800000H

; 1302 : 	else

	jmp	$L39362
$L39360:

; 1304 : 		baseline->mins		= entity->v.mins;

	mov	eax, DWORD PTR _entity$[ebp]
	add	eax, 348				; 0000015cH
	mov	ecx, DWORD PTR _baseline$[ebp]
	add	ecx, 124				; 0000007cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1305 : 		baseline->maxs		= entity->v.maxs;

	mov	ecx, DWORD PTR _entity$[ebp]
	add	ecx, 360				; 00000168H
	mov	edx, DWORD PTR _baseline$[ebp]
	add	edx, 136				; 00000088H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1306 : 
; 1307 : 		baseline->sequence		= entity->v.sequence;

	mov	edx, DWORD PTR _baseline$[ebp]
	mov	eax, DWORD PTR _entity$[ebp]
	mov	ecx, DWORD PTR [eax+424]
	mov	DWORD PTR [edx+44], ecx

; 1308 : 		baseline->colormap		= entity->v.colormap;

	mov	edx, DWORD PTR _baseline$[ebp]
	mov	eax, DWORD PTR _entity$[ebp]
	mov	ecx, DWORD PTR [eax+552]
	mov	DWORD PTR [edx+52], ecx

; 1309 : 		baseline->modelindex	= entity->v.modelindex;//SV_ModelIndex(pr_strings + entity->v.model);

	mov	edx, DWORD PTR _baseline$[ebp]
	mov	eax, DWORD PTR _entity$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	mov	DWORD PTR [edx+40], ecx

; 1310 : 		baseline->movetype		= entity->v.movetype;

	mov	edx, DWORD PTR _baseline$[ebp]
	mov	eax, DWORD PTR _entity$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	mov	DWORD PTR [edx+88], ecx

; 1311 : 
; 1312 : 		baseline->scale		= entity->v.scale;

	mov	edx, DWORD PTR _baseline$[ebp]
	mov	eax, DWORD PTR _entity$[ebp]
	mov	ecx, DWORD PTR [eax+452]
	mov	DWORD PTR [edx+64], ecx

; 1313 : 		baseline->solid		= entity->v.solid;

	mov	edx, DWORD PTR _baseline$[ebp]
	mov	eax, DWORD PTR _entity$[ebp]
	mov	cx, WORD PTR [eax+396]
	mov	WORD PTR [edx+58], cx

; 1314 : 		baseline->framerate		= entity->v.framerate;

	mov	edx, DWORD PTR _baseline$[ebp]
	mov	eax, DWORD PTR _entity$[ebp]
	mov	ecx, DWORD PTR [eax+440]
	mov	DWORD PTR [edx+96], ecx

; 1315 : 		baseline->gravity		= entity->v.gravity;

	mov	edx, DWORD PTR _baseline$[ebp]
	mov	eax, DWORD PTR _entity$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	DWORD PTR [edx+160], ecx

; 1316 : 		baseline->startpos		= entity->v.startpos; // xform

	mov	edx, DWORD PTR _entity$[ebp]
	add	edx, 268				; 0000010cH
	mov	eax, DWORD PTR _baseline$[ebp]
	add	eax, 228				; 000000e4H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 1317 : 		baseline->endpos		= entity->v.endpos; // misc

	mov	eax, DWORD PTR _entity$[ebp]
	add	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _baseline$[ebp]
	add	ecx, 240				; 000000f0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1318 : 		baseline->iuser1		= entity->v.iuser1;	// flags

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+708]
	mov	DWORD PTR [ecx+260], eax

; 1319 : 		baseline->iuser2		= entity->v.iuser2;	// flags

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+712]
	mov	DWORD PTR [ecx+264], eax

; 1320 : 		baseline->iuser3		= entity->v.iuser3;	// vertexlight cachenum

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+716]
	mov	DWORD PTR [ecx+268], eax

; 1321 : 
; 1322 : 		if( pEntity )

	cmp	DWORD PTR _pEntity$[ebp], 0
	je	$L39362

; 1324 : 			baseline->vuser1.x	= pEntity->m_flPoseParameter[0];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1648]
	mov	DWORD PTR [ecx+292], eax

; 1325 : 			baseline->vuser1.y	= pEntity->m_flPoseParameter[1];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1652]
	mov	DWORD PTR [ecx+296], eax

; 1326 : 			baseline->vuser1.z	= pEntity->m_flPoseParameter[2];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1656]
	mov	DWORD PTR [ecx+300], eax

; 1327 : 			baseline->vuser2.x	= pEntity->m_flPoseParameter[3];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1660]
	mov	DWORD PTR [ecx+304], eax

; 1328 : 			baseline->vuser2.y	= pEntity->m_flPoseParameter[4];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1664]
	mov	DWORD PTR [ecx+308], eax

; 1329 : 			baseline->vuser2.z	= pEntity->m_flPoseParameter[5];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1668]
	mov	DWORD PTR [ecx+312], eax

; 1330 : 			baseline->vuser3.x	= pEntity->m_flPoseParameter[6];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1672]
	mov	DWORD PTR [ecx+316], eax

; 1331 : 			baseline->vuser3.y	= pEntity->m_flPoseParameter[7];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1676]
	mov	DWORD PTR [ecx+320], eax

; 1332 : 			baseline->vuser3.z	= pEntity->m_flPoseParameter[8];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1680]
	mov	DWORD PTR [ecx+324], eax

; 1333 : 			baseline->vuser4.x	= pEntity->m_flPoseParameter[9];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1684]
	mov	DWORD PTR [ecx+328], eax

; 1334 : 			baseline->vuser4.y	= pEntity->m_flPoseParameter[10];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1688]
	mov	DWORD PTR [ecx+332], eax

; 1335 : 			baseline->vuser4.z	= pEntity->m_flPoseParameter[11];

	mov	ecx, DWORD PTR _baseline$[ebp]
	mov	edx, DWORD PTR _pEntity$[ebp]
	mov	eax, DWORD PTR [edx+1692]
	mov	DWORD PTR [ecx+336], eax
$L39362:

; 1338 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateBaseline@@YAXHHPAUentity_state_s@@PAUedict_s@@HVVector@@2@Z ENDP ; CreateBaseline
_TEXT	ENDS
PUBLIC	?Entity_FieldInit@@YAXPAUdelta_s@@@Z		; Entity_FieldInit
;	COMDAT ?Entity_FieldInit@@YAXPAUdelta_s@@@Z
_TEXT	SEGMENT
_pFields$ = 8
?Entity_FieldInit@@YAXPAUdelta_s@@@Z PROC NEAR		; Entity_FieldInit, COMDAT

; 1364 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1365 : 	entity_field_alias[ FIELD_ORIGIN0 ].field		= DELTA_FINDFIELD( pFields, entity_field_alias[ FIELD_ORIGIN0 ].name );

	push	OFFSET FLAT:_entity_field_alias
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR _entity_field_alias+32, eax

; 1366 : 	entity_field_alias[ FIELD_ORIGIN1 ].field		= DELTA_FINDFIELD( pFields, entity_field_alias[ FIELD_ORIGIN1 ].name );

	push	OFFSET FLAT:_entity_field_alias+36
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR _entity_field_alias+68, eax

; 1367 : 	entity_field_alias[ FIELD_ORIGIN2 ].field		= DELTA_FINDFIELD( pFields, entity_field_alias[ FIELD_ORIGIN2 ].name );

	push	OFFSET FLAT:_entity_field_alias+72
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR _entity_field_alias+104, eax

; 1368 : 	entity_field_alias[ FIELD_ANGLES0 ].field		= DELTA_FINDFIELD( pFields, entity_field_alias[ FIELD_ANGLES0 ].name );

	push	OFFSET FLAT:_entity_field_alias+108
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR _entity_field_alias+140, eax

; 1369 : 	entity_field_alias[ FIELD_ANGLES1 ].field		= DELTA_FINDFIELD( pFields, entity_field_alias[ FIELD_ANGLES1 ].name );

	push	OFFSET FLAT:_entity_field_alias+144
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR _entity_field_alias+176, eax

; 1370 : 	entity_field_alias[ FIELD_ANGLES2 ].field		= DELTA_FINDFIELD( pFields, entity_field_alias[ FIELD_ANGLES2 ].name );

	push	OFFSET FLAT:_entity_field_alias+180
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR _entity_field_alias+212, eax

; 1371 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Entity_FieldInit@@YAXPAUdelta_s@@@Z ENDP		; Entity_FieldInit
_TEXT	ENDS
PUBLIC	?Entity_Encode@@YAXPAUdelta_s@@PBE1@Z		; Entity_Encode
;	COMDAT ?Entity_Encode@@YAXPAUdelta_s@@PBE1@Z
_TEXT	SEGMENT
_pFields$ = 8
_from$ = 12
_to$ = 16
_f$ = -4
_t$ = -8
_localplayer$ = -12
?Entity_Encode@@YAXPAUdelta_s@@PBE1@Z PROC NEAR		; Entity_Encode, COMDAT

; 1381 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1382 : 	entity_state_t *f, *t;
; 1383 : 	int localplayer = 0;

	mov	DWORD PTR _localplayer$[ebp], 0

; 1384 : 	static int initialized = 0;
; 1385 : 
; 1386 : 	if ( !initialized )

	cmp	DWORD PTR _?initialized@?1??Entity_Encode@@YAXPAUdelta_s@@PBE1@Z@4HA, 0
	jne	SHORT $L39394

; 1388 : 		Entity_FieldInit( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	?Entity_FieldInit@@YAXPAUdelta_s@@@Z	; Entity_FieldInit
	add	esp, 4

; 1389 : 		initialized = 1;

	mov	DWORD PTR _?initialized@?1??Entity_Encode@@YAXPAUdelta_s@@PBE1@Z@4HA, 1
$L39394:

; 1391 : 
; 1392 : 	f = (entity_state_t *)from;

	mov	ecx, DWORD PTR _from$[ebp]
	mov	DWORD PTR _f$[ebp], ecx

; 1393 : 	t = (entity_state_t *)to;

	mov	edx, DWORD PTR _to$[ebp]
	mov	DWORD PTR _t$[ebp], edx

; 1394 : 
; 1395 : 	// Never send origin to local player, it's sent with more resolution in clientdata_t structure
; 1396 : 	localplayer =  ( t->number - 1 ) == ENGINE_CURRENT_PLAYER();

	mov	eax, DWORD PTR _t$[ebp]
	mov	esi, DWORD PTR [eax+4]
	sub	esi, 1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+520
	xor	ecx, ecx
	cmp	esi, eax
	sete	cl
	mov	DWORD PTR _localplayer$[ebp], ecx

; 1397 : 	if ( localplayer )

	cmp	DWORD PTR _localplayer$[ebp], 0
	je	SHORT $L39397

; 1399 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN0 ].field );

	mov	edx, DWORD PTR _entity_field_alias+32
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1400 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN1 ].field );

	mov	ecx, DWORD PTR _entity_field_alias+68
	push	ecx
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1401 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN2 ].field );

	mov	eax, DWORD PTR _entity_field_alias+104
	push	eax
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8
$L39397:

; 1403 : 
; 1404 : 	if ( ( t->impacttime != 0 ) && ( t->starttime != 0 ) )

	mov	edx, DWORD PTR _t$[ebp]
	fld	DWORD PTR [edx+252]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	$L39398
	mov	eax, DWORD PTR _t$[ebp]
	fld	DWORD PTR [eax+256]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L39398

; 1406 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN0 ].field );

	mov	ecx, DWORD PTR _entity_field_alias+32
	push	ecx
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1407 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN1 ].field );

	mov	eax, DWORD PTR _entity_field_alias+68
	push	eax
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1408 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN2 ].field );

	mov	edx, DWORD PTR _entity_field_alias+104
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1409 : 
; 1410 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ANGLES0 ].field );

	mov	ecx, DWORD PTR _entity_field_alias+140
	push	ecx
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1411 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ANGLES1 ].field );

	mov	eax, DWORD PTR _entity_field_alias+176
	push	eax
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1412 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ANGLES2 ].field );

	mov	edx, DWORD PTR _entity_field_alias+212
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8
$L39398:

; 1416 : 		 ( t->aiment != 0 ) )

	mov	ecx, DWORD PTR _t$[ebp]
	cmp	DWORD PTR [ecx+88], 12			; 0000000cH
	jne	SHORT $L39399
	mov	edx, DWORD PTR _t$[ebp]
	cmp	DWORD PTR [edx+148], 0
	je	SHORT $L39399

; 1418 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN0 ].field );

	mov	eax, DWORD PTR _entity_field_alias+32
	push	eax
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1419 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN1 ].field );

	mov	edx, DWORD PTR _entity_field_alias+68
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1420 : 		DELTA_UNSETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN2 ].field );

	mov	ecx, DWORD PTR _entity_field_alias+104
	push	ecx
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1422 : 	else if ( t->aiment != f->aiment )

	jmp	SHORT $L39401
$L39399:
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax+148]
	cmp	edx, DWORD PTR [ecx+148]
	je	SHORT $L39401

; 1424 : 		DELTA_SETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN0 ].field );

	mov	eax, DWORD PTR _entity_field_alias+32
	push	eax
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+532
	add	esp, 8

; 1425 : 		DELTA_SETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN1 ].field );

	mov	edx, DWORD PTR _entity_field_alias+68
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+532
	add	esp, 8

; 1426 : 		DELTA_SETBYINDEX( pFields, entity_field_alias[ FIELD_ORIGIN2 ].field );

	mov	ecx, DWORD PTR _entity_field_alias+104
	push	ecx
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+532
	add	esp, 8
$L39401:

; 1428 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Entity_Encode@@YAXPAUdelta_s@@PBE1@Z ENDP		; Entity_Encode
_TEXT	ENDS
PUBLIC	?Player_FieldInit@@YAXPAUdelta_s@@@Z		; Player_FieldInit
;	COMDAT ?Player_FieldInit@@YAXPAUdelta_s@@@Z
_TEXT	SEGMENT
_pFields$ = 8
?Player_FieldInit@@YAXPAUdelta_s@@@Z PROC NEAR		; Player_FieldInit, COMDAT

; 1438 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1439 : 	player_field_alias[ FIELD_ORIGIN0 ].field		= DELTA_FINDFIELD( pFields, player_field_alias[ FIELD_ORIGIN0 ].name );

	push	OFFSET FLAT:_player_field_alias
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR _player_field_alias+32, eax

; 1440 : 	player_field_alias[ FIELD_ORIGIN1 ].field		= DELTA_FINDFIELD( pFields, player_field_alias[ FIELD_ORIGIN1 ].name );

	push	OFFSET FLAT:_player_field_alias+36
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR _player_field_alias+68, eax

; 1441 : 	player_field_alias[ FIELD_ORIGIN2 ].field		= DELTA_FINDFIELD( pFields, player_field_alias[ FIELD_ORIGIN2 ].name );

	push	OFFSET FLAT:_player_field_alias+72
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR _player_field_alias+104, eax

; 1442 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Player_FieldInit@@YAXPAUdelta_s@@@Z ENDP		; Player_FieldInit
_TEXT	ENDS
PUBLIC	?Player_Encode@@YAXPAUdelta_s@@PBE1@Z		; Player_Encode
;	COMDAT ?Player_Encode@@YAXPAUdelta_s@@PBE1@Z
_TEXT	SEGMENT
_pFields$ = 8
_from$ = 12
_to$ = 16
_f$ = -4
_t$ = -8
_localplayer$ = -12
?Player_Encode@@YAXPAUdelta_s@@PBE1@Z PROC NEAR		; Player_Encode, COMDAT

; 1452 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1453 : 	entity_state_t *f, *t;
; 1454 : 	int localplayer = 0;

	mov	DWORD PTR _localplayer$[ebp], 0

; 1455 : 	static int initialized = 0;
; 1456 : 
; 1457 : 	if ( !initialized )

	cmp	DWORD PTR _?initialized@?1??Player_Encode@@YAXPAUdelta_s@@PBE1@Z@4HA, 0
	jne	SHORT $L39416

; 1459 : 		Player_FieldInit( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	?Player_FieldInit@@YAXPAUdelta_s@@@Z	; Player_FieldInit
	add	esp, 4

; 1460 : 		initialized = 1;

	mov	DWORD PTR _?initialized@?1??Player_Encode@@YAXPAUdelta_s@@PBE1@Z@4HA, 1
$L39416:

; 1462 : 
; 1463 : 	f = (entity_state_t *)from;

	mov	ecx, DWORD PTR _from$[ebp]
	mov	DWORD PTR _f$[ebp], ecx

; 1464 : 	t = (entity_state_t *)to;

	mov	edx, DWORD PTR _to$[ebp]
	mov	DWORD PTR _t$[ebp], edx

; 1465 : 
; 1466 : 	// Never send origin to local player, it's sent with more resolution in clientdata_t structure
; 1467 : 	localplayer =  ( t->number - 1 ) == ENGINE_CURRENT_PLAYER();

	mov	eax, DWORD PTR _t$[ebp]
	mov	esi, DWORD PTR [eax+4]
	sub	esi, 1
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+520
	xor	ecx, ecx
	cmp	esi, eax
	sete	cl
	mov	DWORD PTR _localplayer$[ebp], ecx

; 1468 : 	if ( localplayer )

	cmp	DWORD PTR _localplayer$[ebp], 0
	je	SHORT $L39419

; 1470 : 		DELTA_UNSETBYINDEX( pFields, player_field_alias[ FIELD_ORIGIN0 ].field );

	mov	edx, DWORD PTR _player_field_alias+32
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1471 : 		DELTA_UNSETBYINDEX( pFields, player_field_alias[ FIELD_ORIGIN1 ].field );

	mov	ecx, DWORD PTR _player_field_alias+68
	push	ecx
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1472 : 		DELTA_UNSETBYINDEX( pFields, player_field_alias[ FIELD_ORIGIN2 ].field );

	mov	eax, DWORD PTR _player_field_alias+104
	push	eax
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8
$L39419:

; 1476 : 		 ( t->aiment != 0 ) )

	mov	edx, DWORD PTR _t$[ebp]
	cmp	DWORD PTR [edx+88], 12			; 0000000cH
	jne	SHORT $L39420
	mov	eax, DWORD PTR _t$[ebp]
	cmp	DWORD PTR [eax+148], 0
	je	SHORT $L39420

; 1478 : 		DELTA_UNSETBYINDEX( pFields, player_field_alias[ FIELD_ORIGIN0 ].field );

	mov	ecx, DWORD PTR _player_field_alias+32
	push	ecx
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1479 : 		DELTA_UNSETBYINDEX( pFields, player_field_alias[ FIELD_ORIGIN1 ].field );

	mov	eax, DWORD PTR _player_field_alias+68
	push	eax
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1480 : 		DELTA_UNSETBYINDEX( pFields, player_field_alias[ FIELD_ORIGIN2 ].field );

	mov	edx, DWORD PTR _player_field_alias+104
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1482 : 	else if ( t->aiment != f->aiment )

	jmp	SHORT $L39422
$L39420:
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [ecx+148]
	cmp	eax, DWORD PTR [edx+148]
	je	SHORT $L39422

; 1484 : 		DELTA_SETBYINDEX( pFields, player_field_alias[ FIELD_ORIGIN0 ].field );

	mov	ecx, DWORD PTR _player_field_alias+32
	push	ecx
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+532
	add	esp, 8

; 1485 : 		DELTA_SETBYINDEX( pFields, player_field_alias[ FIELD_ORIGIN1 ].field );

	mov	eax, DWORD PTR _player_field_alias+68
	push	eax
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+532
	add	esp, 8

; 1486 : 		DELTA_SETBYINDEX( pFields, player_field_alias[ FIELD_ORIGIN2 ].field );

	mov	edx, DWORD PTR _player_field_alias+104
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+532
	add	esp, 8
$L39422:

; 1488 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Player_Encode@@YAXPAUdelta_s@@PBE1@Z ENDP		; Player_Encode
_TEXT	ENDS
PUBLIC	?Custom_Entity_FieldInit@@YAXPAUdelta_s@@@Z	; Custom_Entity_FieldInit
;	COMDAT ?Custom_Entity_FieldInit@@YAXPAUdelta_s@@@Z
_TEXT	SEGMENT
_pFields$ = 8
?Custom_Entity_FieldInit@@YAXPAUdelta_s@@@Z PROC NEAR	; Custom_Entity_FieldInit, COMDAT

; 1514 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1515 : 	custom_entity_field_alias[ CUSTOMFIELD_ORIGIN0 ].field	= DELTA_FINDFIELD( pFields, custom_entity_field_alias[ CUSTOMFIELD_ORIGIN0 ].name );

	push	OFFSET FLAT:?custom_entity_field_alias@@3PAUentity_field_alias_t@@A
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+32, eax

; 1516 : 	custom_entity_field_alias[ CUSTOMFIELD_ORIGIN1 ].field	= DELTA_FINDFIELD( pFields, custom_entity_field_alias[ CUSTOMFIELD_ORIGIN1 ].name );

	push	OFFSET FLAT:?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+36
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+68, eax

; 1517 : 	custom_entity_field_alias[ CUSTOMFIELD_ORIGIN2 ].field	= DELTA_FINDFIELD( pFields, custom_entity_field_alias[ CUSTOMFIELD_ORIGIN2 ].name );

	push	OFFSET FLAT:?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+72
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+104, eax

; 1518 : 	custom_entity_field_alias[ CUSTOMFIELD_ANGLES0 ].field	= DELTA_FINDFIELD( pFields, custom_entity_field_alias[ CUSTOMFIELD_ANGLES0 ].name );

	push	OFFSET FLAT:?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+108
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+140, eax

; 1519 : 	custom_entity_field_alias[ CUSTOMFIELD_ANGLES1 ].field	= DELTA_FINDFIELD( pFields, custom_entity_field_alias[ CUSTOMFIELD_ANGLES1 ].name );

	push	OFFSET FLAT:?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+144
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+176, eax

; 1520 : 	custom_entity_field_alias[ CUSTOMFIELD_ANGLES2 ].field	= DELTA_FINDFIELD( pFields, custom_entity_field_alias[ CUSTOMFIELD_ANGLES2 ].name );

	push	OFFSET FLAT:?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+180
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+212, eax

; 1521 : 	custom_entity_field_alias[ CUSTOMFIELD_SKIN ].field	= DELTA_FINDFIELD( pFields, custom_entity_field_alias[ CUSTOMFIELD_SKIN ].name );

	push	OFFSET FLAT:?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+216
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+248, eax

; 1522 : 	custom_entity_field_alias[ CUSTOMFIELD_SEQUENCE ].field= DELTA_FINDFIELD( pFields, custom_entity_field_alias[ CUSTOMFIELD_SEQUENCE ].name );

	push	OFFSET FLAT:?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+252
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+284, eax

; 1523 : 	custom_entity_field_alias[ CUSTOMFIELD_ANIMTIME ].field= DELTA_FINDFIELD( pFields, custom_entity_field_alias[ CUSTOMFIELD_ANIMTIME ].name );

	push	OFFSET FLAT:?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+288
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+528
	add	esp, 8
	mov	DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+320, eax

; 1524 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Custom_Entity_FieldInit@@YAXPAUdelta_s@@@Z ENDP	; Custom_Entity_FieldInit
_TEXT	ENDS
PUBLIC	?Custom_Encode@@YAXPAUdelta_s@@PBE1@Z		; Custom_Encode
;	COMDAT ?Custom_Encode@@YAXPAUdelta_s@@PBE1@Z
_TEXT	SEGMENT
_pFields$ = 8
_from$ = 12
_to$ = 16
_f$ = -4
_t$ = -8
_beamType$ = -12
?Custom_Encode@@YAXPAUdelta_s@@PBE1@Z PROC NEAR		; Custom_Encode, COMDAT

; 1534 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 1535 : 	entity_state_t *f, *t;
; 1536 : 	int beamType;
; 1537 : 	static int initialized = 0;
; 1538 : 
; 1539 : 	if ( !initialized )

	cmp	DWORD PTR _?initialized@?1??Custom_Encode@@YAXPAUdelta_s@@PBE1@Z@4HA, 0
	jne	SHORT $L39446

; 1541 : 		Custom_Entity_FieldInit( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	?Custom_Entity_FieldInit@@YAXPAUdelta_s@@@Z ; Custom_Entity_FieldInit
	add	esp, 4

; 1542 : 		initialized = 1;

	mov	DWORD PTR _?initialized@?1??Custom_Encode@@YAXPAUdelta_s@@PBE1@Z@4HA, 1
$L39446:

; 1544 : 
; 1545 : 	f = (entity_state_t *)from;

	mov	ecx, DWORD PTR _from$[ebp]
	mov	DWORD PTR _f$[ebp], ecx

; 1546 : 	t = (entity_state_t *)to;

	mov	edx, DWORD PTR _to$[ebp]
	mov	DWORD PTR _t$[ebp], edx

; 1547 : 
; 1548 : 	beamType = t->rendermode & 0x0f;

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _beamType$[ebp], ecx

; 1549 : 		
; 1550 : 	if ( beamType != BEAM_POINTS && beamType != BEAM_ENTPOINT )

	cmp	DWORD PTR _beamType$[ebp], 0
	je	SHORT $L39449
	cmp	DWORD PTR _beamType$[ebp], 1
	je	SHORT $L39449

; 1552 : 		DELTA_UNSETBYINDEX( pFields, custom_entity_field_alias[ CUSTOMFIELD_ORIGIN0 ].field );

	mov	edx, DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+32
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1553 : 		DELTA_UNSETBYINDEX( pFields, custom_entity_field_alias[ CUSTOMFIELD_ORIGIN1 ].field );

	mov	ecx, DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+68
	push	ecx
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1554 : 		DELTA_UNSETBYINDEX( pFields, custom_entity_field_alias[ CUSTOMFIELD_ORIGIN2 ].field );

	mov	eax, DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+104
	push	eax
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8
$L39449:

; 1556 : 
; 1557 : 	if ( beamType != BEAM_POINTS )

	cmp	DWORD PTR _beamType$[ebp], 0
	je	SHORT $L39450

; 1559 : 		DELTA_UNSETBYINDEX( pFields, custom_entity_field_alias[ CUSTOMFIELD_ANGLES0 ].field );

	mov	edx, DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+140
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1560 : 		DELTA_UNSETBYINDEX( pFields, custom_entity_field_alias[ CUSTOMFIELD_ANGLES1 ].field );

	mov	ecx, DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+176
	push	ecx
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1561 : 		DELTA_UNSETBYINDEX( pFields, custom_entity_field_alias[ CUSTOMFIELD_ANGLES2 ].field );

	mov	eax, DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+212
	push	eax
	mov	ecx, DWORD PTR _pFields$[ebp]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8
$L39450:

; 1563 : 
; 1564 : 	if ( beamType != BEAM_ENTS && beamType != BEAM_ENTPOINT )

	cmp	DWORD PTR _beamType$[ebp], 2
	je	SHORT $L39451
	cmp	DWORD PTR _beamType$[ebp], 1
	je	SHORT $L39451

; 1566 : 		DELTA_UNSETBYINDEX( pFields, custom_entity_field_alias[ CUSTOMFIELD_SKIN ].field );

	mov	edx, DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+248
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8

; 1567 : 		DELTA_UNSETBYINDEX( pFields, custom_entity_field_alias[ CUSTOMFIELD_SEQUENCE ].field );

	mov	ecx, DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+284
	push	ecx
	mov	edx, DWORD PTR _pFields$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8
$L39451:

; 1569 : 
; 1570 : 	// animtime is compared by rounding first
; 1571 : 	// see if we really shouldn't actually send it
; 1572 : 	if ( (int)f->animtime == (int)t->animtime )

	mov	eax, DWORD PTR _f$[ebp]
	fld	DWORD PTR [eax+92]
	call	__ftol
	mov	esi, eax
	mov	ecx, DWORD PTR _t$[ebp]
	fld	DWORD PTR [ecx+92]
	call	__ftol
	cmp	esi, eax
	jne	SHORT $L39454

; 1574 : 		DELTA_UNSETBYINDEX( pFields, custom_entity_field_alias[ CUSTOMFIELD_ANIMTIME ].field );

	mov	edx, DWORD PTR ?custom_entity_field_alias@@3PAUentity_field_alias_t@@A+320
	push	edx
	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+536
	add	esp, 8
$L39454:

; 1576 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Custom_Encode@@YAXPAUdelta_s@@PBE1@Z ENDP		; Custom_Encode
_TEXT	ENDS
PUBLIC	??_C@_0O@MNKI@Entity_Encode?$AA@		; `string'
PUBLIC	??_C@_0O@FIBN@Custom_Encode?$AA@		; `string'
PUBLIC	??_C@_0O@HPNM@Player_Encode?$AA@		; `string'
PUBLIC	?RegisterEncoders@@YAXXZ			; RegisterEncoders
;	COMDAT ??_C@_0O@MNKI@Entity_Encode?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_0O@MNKI@Entity_Encode?$AA@ DB 'Entity_Encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FIBN@Custom_Encode?$AA@
CONST	SEGMENT
??_C@_0O@FIBN@Custom_Encode?$AA@ DB 'Custom_Encode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HPNM@Player_Encode?$AA@
CONST	SEGMENT
??_C@_0O@HPNM@Player_Encode?$AA@ DB 'Player_Encode', 00H ; `string'
CONST	ENDS
;	COMDAT ?RegisterEncoders@@YAXXZ
_TEXT	SEGMENT
?RegisterEncoders@@YAXXZ PROC NEAR			; RegisterEncoders, COMDAT

; 1586 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1587 : 	DELTA_ADDENCODER( "Entity_Encode", Entity_Encode );

	push	OFFSET FLAT:?Entity_Encode@@YAXPAUdelta_s@@PBE1@Z ; Entity_Encode
	push	OFFSET FLAT:??_C@_0O@MNKI@Entity_Encode?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+516
	add	esp, 8

; 1588 : 	DELTA_ADDENCODER( "Custom_Encode", Custom_Encode );

	push	OFFSET FLAT:?Custom_Encode@@YAXPAUdelta_s@@PBE1@Z ; Custom_Encode
	push	OFFSET FLAT:??_C@_0O@FIBN@Custom_Encode?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+516
	add	esp, 8

; 1589 : 	DELTA_ADDENCODER( "Player_Encode", Player_Encode );

	push	OFFSET FLAT:?Player_Encode@@YAXPAUdelta_s@@PBE1@Z ; Player_Encode
	push	OFFSET FLAT:??_C@_0O@HPNM@Player_Encode?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+516
	add	esp, 8

; 1590 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RegisterEncoders@@YAXXZ ENDP				; RegisterEncoders
_TEXT	ENDS
PUBLIC	?GetWeaponData@@YAHPAUedict_s@@PAUweapon_data_s@@@Z ; GetWeaponData
;	COMDAT ?GetWeaponData@@YAHPAUedict_s@@PAUweapon_data_s@@@Z
_TEXT	SEGMENT
_info$ = 12
?GetWeaponData@@YAHPAUedict_s@@PAUweapon_data_s@@@Z PROC NEAR ; GetWeaponData, COMDAT

; 1593 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1594 : 	memset( info, 0, 32 * sizeof( weapon_data_t ) );

	push	2816					; 00000b00H
	push	0
	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1595 : 
; 1596 : 	return 1;

	mov	eax, 1

; 1597 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWeaponData@@YAHPAUedict_s@@PAUweapon_data_s@@@Z ENDP ; GetWeaponData
_TEXT	ENDS
PUBLIC	?UpdateClientData@@YAXPBUedict_s@@HPAUclientdata_s@@@Z ; UpdateClientData
EXTRN	_strcpy:NEAR
;	COMDAT ?UpdateClientData@@YAXPBUedict_s@@HPAUclientdata_s@@@Z
_TEXT	SEGMENT
_ent$ = 8
_cd$ = 16
?UpdateClientData@@YAXPBUedict_s@@HPAUclientdata_s@@@Z PROC NEAR ; UpdateClientData, COMDAT

; 1608 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1609 : 	cd->flags			= ent->v.flags;

	mov	eax, DWORD PTR _cd$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+548]
	mov	DWORD PTR [eax+40], edx

; 1610 : 	cd->health			= ent->v.health;

	mov	eax, DWORD PTR _cd$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+480]
	mov	DWORD PTR [eax+64], edx

; 1611 : 
; 1612 : 	cd->viewmodel		= MODEL_INDEX( STRING( ent->v.viewmodel ) );

	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+12
	add	esp, 4
	mov	edx, DWORD PTR _cd$[ebp]
	mov	DWORD PTR [edx+24], eax

; 1613 : 
; 1614 : 	cd->waterlevel		= ent->v.waterlevel;

	mov	eax, DWORD PTR _cd$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+576]
	mov	DWORD PTR [eax+44], edx

; 1615 : 	cd->watertype		= ent->v.watertype;

	mov	eax, DWORD PTR _cd$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+580]
	mov	DWORD PTR [eax+48], edx

; 1616 : 	cd->weapons		= 0; // not used

	mov	eax, DWORD PTR _cd$[ebp]
	mov	DWORD PTR [eax+72], 0

; 1617 : 
; 1618 : 	// Vectors
; 1619 : 	cd->origin			= ent->v.origin;

	mov	ecx, DWORD PTR _ent$[ebp]
	add	ecx, 136				; 00000088H
	mov	edx, DWORD PTR _cd$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1620 : 	cd->velocity		= ent->v.velocity;

	mov	edx, DWORD PTR _ent$[ebp]
	add	edx, 160				; 000000a0H
	mov	eax, DWORD PTR _cd$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 1621 : 	cd->view_ofs		= ent->v.view_ofs;

	mov	eax, DWORD PTR _ent$[ebp]
	add	eax, 500				; 000001f4H
	mov	ecx, DWORD PTR _cd$[ebp]
	add	ecx, 52					; 00000034H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1622 : 	cd->punchangle		= ent->v.punchangle;

	mov	ecx, DWORD PTR _ent$[ebp]
	add	ecx, 232				; 000000e8H
	mov	edx, DWORD PTR _cd$[ebp]
	add	edx, 28					; 0000001cH
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1623 : 
; 1624 : 	cd->bInDuck			= ent->v.bInDuck;

	mov	edx, DWORD PTR _cd$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [edx+68], ecx

; 1625 : 	cd->flTimeStepSound = ent->v.flTimeStepSound;

	mov	edx, DWORD PTR _cd$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+676]
	mov	DWORD PTR [edx+76], ecx

; 1626 : 	cd->flDuckTime		= ent->v.flDuckTime;

	mov	edx, DWORD PTR _cd$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR [edx+80], ecx

; 1627 : 	cd->flSwimTime		= ent->v.flSwimTime;

	mov	edx, DWORD PTR _cd$[ebp]
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	DWORD PTR [edx+84], ecx

; 1628 : 	cd->waterjumptime	= ent->v.teleport_time;

	mov	edx, DWORD PTR _ent$[ebp]
	fld	DWORD PTR [edx+564]
	call	__ftol
	mov	ecx, DWORD PTR _cd$[ebp]
	mov	DWORD PTR [ecx+88], eax

; 1629 : 
; 1630 : 	strcpy( cd->physinfo, ENGINE_GETPHYSINFO( ent ) );

	mov	edx, DWORD PTR _ent$[ebp]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+484
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _cd$[ebp]
	add	eax, 140				; 0000008cH
	push	eax
	call	_strcpy
	add	esp, 8

; 1631 : 
; 1632 : 	cd->maxspeed		= ent->v.maxspeed;

	mov	ecx, DWORD PTR _cd$[ebp]
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	DWORD PTR [ecx+92], eax

; 1633 : 	cd->fov				= ent->v.fov;

	mov	ecx, DWORD PTR _cd$[ebp]
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+660]
	mov	DWORD PTR [ecx+96], eax

; 1634 : 	cd->weaponanim		= ent->v.weaponanim;

	mov	ecx, DWORD PTR _cd$[ebp]
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+664]
	mov	DWORD PTR [ecx+100], eax

; 1635 : 
; 1636 : 	cd->pushmsec		= ent->v.pushmsec;

	mov	ecx, DWORD PTR _cd$[ebp]
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+668]
	mov	DWORD PTR [ecx+132], eax

; 1637 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateClientData@@YAXPBUedict_s@@HPAUclientdata_s@@@Z ENDP ; UpdateClientData
_TEXT	ENDS
PUBLIC	?CmdStart@@YAXPBUedict_s@@PBUusercmd_s@@I@Z	; CmdStart
;	COMDAT ?CmdStart@@YAXPBUedict_s@@PBUusercmd_s@@I@Z
_TEXT	SEGMENT
_player$ = 8
_random_seed$ = 16
_pev$ = -4
_pl$ = -8
?CmdStart@@YAXPBUedict_s@@PBUusercmd_s@@I@Z PROC NEAR	; CmdStart, COMDAT

; 1648 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1649 : 	entvars_t *pev = (entvars_t *)&player->v;

	mov	eax, DWORD PTR _player$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], eax

; 1650 : 	CBasePlayer *pl = ( CBasePlayer *) CBasePlayer::Instance( pev );

	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pl$[ebp], eax

; 1651 : 
; 1652 : 	if( !pl )

	cmp	DWORD PTR _pl$[ebp], 0
	jne	SHORT $L39480

; 1653 : 		return;

	jmp	SHORT $L39475
$L39480:

; 1654 : 
; 1655 : 	if ( pl->pev->groupinfo != 0 )

	mov	edx, DWORD PTR _pl$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+576], 0
	je	SHORT $L39481

; 1657 : 		UTIL_SetGroupTrace( pl->pev->groupinfo, GROUP_OP_AND );

	push	0
	mov	ecx, DWORD PTR _pl$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+576]
	push	eax
	call	?UTIL_SetGroupTrace@@YAXHH@Z		; UTIL_SetGroupTrace
	add	esp, 8
$L39481:

; 1659 : 
; 1660 : 	pl->random_seed = random_seed;

	mov	ecx, DWORD PTR _pl$[ebp]
	mov	edx, DWORD PTR _random_seed$[ebp]
	mov	DWORD PTR [ecx+2396], edx
$L39475:

; 1661 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CmdStart@@YAXPBUedict_s@@PBUusercmd_s@@I@Z ENDP	; CmdStart
_TEXT	ENDS
PUBLIC	?CmdEnd@@YAXPBUedict_s@@@Z			; CmdEnd
;	COMDAT ?CmdEnd@@YAXPBUedict_s@@@Z
_TEXT	SEGMENT
_player$ = 8
_pev$ = -4
_pl$ = -8
?CmdEnd@@YAXPBUedict_s@@@Z PROC NEAR			; CmdEnd, COMDAT

; 1671 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1672 : 	entvars_t *pev = (entvars_t *)&player->v;

	mov	eax, DWORD PTR _player$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _pev$[ebp], eax

; 1673 : 	CBasePlayer *pl = ( CBasePlayer *) CBasePlayer::Instance( pev );

	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?Instance@CBaseEntity@@SAPAV1@PAUentvars_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pl$[ebp], eax

; 1674 : 
; 1675 : 	if( !pl )

	cmp	DWORD PTR _pl$[ebp], 0
	jne	SHORT $L39489

; 1676 : 		return;

	jmp	SHORT $L39484
$L39489:

; 1677 : 	if ( pl->pev->groupinfo != 0 )

	mov	edx, DWORD PTR _pl$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+576], 0
	je	SHORT $L39490

; 1679 : 		UTIL_UnsetGroupTrace();

	call	?UTIL_UnsetGroupTrace@@YAXXZ		; UTIL_UnsetGroupTrace
$L39490:
$L39484:

; 1681 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CmdEnd@@YAXPBUedict_s@@@Z ENDP				; CmdEnd
_TEXT	ENDS
PUBLIC	?ConnectionlessPacket@@YAHPBUnetadr_s@@PBDPADPAH@Z ; ConnectionlessPacket
;	COMDAT ?ConnectionlessPacket@@YAHPBUnetadr_s@@PBDPADPAH@Z
_TEXT	SEGMENT
_response_buffer_size$ = 20
_max_buffer_size$ = -4
?ConnectionlessPacket@@YAHPBUnetadr_s@@PBDPADPAH@Z PROC NEAR ; ConnectionlessPacket, COMDAT

; 1692 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1693 : 	// Parse stuff from args
; 1694 : 	int max_buffer_size = *response_buffer_size;

	mov	eax, DWORD PTR _response_buffer_size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _max_buffer_size$[ebp], ecx

; 1695 : 
; 1696 : 	// Zero it out since we aren't going to respond.
; 1697 : 	// If we wanted to response, we'd write data into response_buffer
; 1698 : 	*response_buffer_size = 0;

	mov	edx, DWORD PTR _response_buffer_size$[ebp]
	mov	DWORD PTR [edx], 0

; 1699 : 
; 1700 : 	// Since we don't listen for anything here, just respond that it's a bogus message
; 1701 : 	// If we didn't reject the message, we'd return 1 for success instead.
; 1702 : 	return 0;

	xor	eax, eax

; 1703 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ConnectionlessPacket@@YAHPBUnetadr_s@@PBDPADPAH@Z ENDP	; ConnectionlessPacket
_TEXT	ENDS
PUBLIC	?GetHullBounds@@YAHHPAM0@Z			; GetHullBounds
;	COMDAT ?GetHullBounds@@YAHHPAM0@Z
_TEXT	SEGMENT
$T40343 = -16
$T40344 = -28
$T40345 = -40
$T40346 = -52
$T40347 = -64
$T40348 = -76
_hullnumber$ = 8
_mins$ = 12
_maxs$ = 16
_iret$ = -4
?GetHullBounds@@YAHHPAM0@Z PROC NEAR			; GetHullBounds, COMDAT

; 1713 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	ebx
	push	esi
	push	edi

; 1714 : 	int iret = 0;

	mov	DWORD PTR _iret$[ebp], 0

; 1717 : 	{

	mov	eax, DWORD PTR _hullnumber$[ebp]
	mov	DWORD PTR -80+[ebp], eax
	cmp	DWORD PTR -80+[ebp], 0
	je	SHORT $L39508
	cmp	DWORD PTR -80+[ebp], 1
	je	SHORT $L39511
	cmp	DWORD PTR -80+[ebp], 2
	je	$L39514
	jmp	$L39505
$L39508:

; 1718 : 	case 0:				// Normal player
; 1719 : 		mins = VEC_HULL_MIN;

	push	-1039138816				; c2100000H
	push	-1048576000				; c1800000H
	push	-1048576000				; c1800000H
	lea	ecx, DWORD PTR $T40343[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, eax
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR _mins$[ebp], eax

; 1720 : 		maxs = VEC_HULL_MAX;

	push	1108344832				; 42100000H
	push	1098907648				; 41800000H
	push	1098907648				; 41800000H
	lea	ecx, DWORD PTR $T40344[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, eax
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR _maxs$[ebp], eax

; 1721 : 		iret = 1;

	mov	DWORD PTR _iret$[ebp], 1

; 1722 : 		break;

	jmp	$L39505
$L39511:

; 1723 : 	case 1:				// Crouched player
; 1724 : 		mins = VEC_DUCK_HULL_MIN;

	push	-1047527424				; c1900000H
	push	-1048576000				; c1800000H
	push	-1048576000				; c1800000H
	lea	ecx, DWORD PTR $T40345[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, eax
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR _mins$[ebp], eax

; 1725 : 		maxs = VEC_DUCK_HULL_MAX;

	push	1099956224				; 41900000H
	push	1098907648				; 41800000H
	push	1098907648				; 41800000H
	lea	ecx, DWORD PTR $T40346[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, eax
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR _maxs$[ebp], eax

; 1726 : 		iret = 1;

	mov	DWORD PTR _iret$[ebp], 1

; 1727 : 		break;

	jmp	SHORT $L39505
$L39514:

; 1728 : 	case 2:				// Point based hull
; 1729 : 		mins = Vector( 0, 0, 0 );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR $T40347[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, eax
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR _mins$[ebp], eax

; 1730 : 		maxs = Vector( 0, 0, 0 );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR $T40348[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	mov	ecx, eax
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR _maxs$[ebp], eax

; 1731 : 		iret = 1;

	mov	DWORD PTR _iret$[ebp], 1
$L39505:

; 1734 : 
; 1735 : 	return iret;

	mov	eax, DWORD PTR _iret$[ebp]

; 1736 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHullBounds@@YAHHPAM0@Z ENDP				; GetHullBounds
_TEXT	ENDS
PUBLIC	??0entity_state_s@@QAE@XZ			; entity_state_s::entity_state_s
PUBLIC	?CreateInstancedBaselines@@YAXXZ		; CreateInstancedBaselines
;	COMDAT ?CreateInstancedBaselines@@YAXXZ
_TEXT	SEGMENT
_iret$ = -4
_state$ = -344
?CreateInstancedBaselines@@YAXXZ PROC NEAR		; CreateInstancedBaselines, COMDAT

; 1747 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi

; 1748 : 	int iret = 0;

	mov	DWORD PTR _iret$[ebp], 0

; 1749 : 	entity_state_t state;

	lea	ecx, DWORD PTR _state$[ebp]
	call	??0entity_state_s@@QAE@XZ		; entity_state_s::entity_state_s

; 1750 : 
; 1751 : 	memset( &state, 0, sizeof( state ) );

	push	340					; 00000154H
	push	0
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1752 : 
; 1753 : 	// Create any additional baselines here for things like grendates, etc.
; 1754 : 	// iret = ENGINE_INSTANCE_BASELINE( pc->pev->classname, &state );
; 1755 : 
; 1756 : 	// Destroy objects.
; 1757 : 	//UTIL_Remove( pc );
; 1758 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateInstancedBaselines@@YAXXZ ENDP			; CreateInstancedBaselines
_TEXT	ENDS
;	COMDAT ??0entity_state_s@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0entity_state_s@@QAE@XZ PROC NEAR			; entity_state_s::entity_state_s, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 188				; 000000bcH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 328				; 00000148H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0entity_state_s@@QAE@XZ ENDP				; entity_state_s::entity_state_s
_TEXT	ENDS
PUBLIC	??_C@_0P@BIBE@mp_consistency?$AA@		; `string'
PUBLIC	??_C@_0CN@KDL@Server?5is?5enforcing?5file?5consist@ ; `string'
PUBLIC	?InconsistentFile@@YAHPBUedict_s@@PBDPAD@Z	; InconsistentFile
;	COMDAT ??_C@_0P@BIBE@mp_consistency?$AA@
; File z:\xashxtsrc\server\client.cpp
CONST	SEGMENT
??_C@_0P@BIBE@mp_consistency?$AA@ DB 'mp_consistency', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KDL@Server?5is?5enforcing?5file?5consist@
CONST	SEGMENT
??_C@_0CN@KDL@Server?5is?5enforcing?5file?5consist@ DB 'Server is enforci'
	DB	'ng file consistency for %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ?InconsistentFile@@YAHPBUedict_s@@PBDPAD@Z
_TEXT	SEGMENT
_filename$ = 12
_disconnect_message$ = 16
?InconsistentFile@@YAHPBUedict_s@@PBDPAD@Z PROC NEAR	; InconsistentFile, COMDAT

; 1769 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1770 : 	// Server doesn't care?
; 1771 : 	if ( CVAR_GET_FLOAT( "mp_consistency" ) != 1 )

	push	OFFSET FLAT:??_C@_0P@BIBE@mp_consistency?$AA@ ; `string'
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+228
	add	esp, 4
	fcomp	DWORD PTR __real@4@3fff8000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L39529

; 1772 : 		return 0;

	xor	eax, eax
	jmp	SHORT $L39528
$L39529:

; 1773 : 
; 1774 : 	// Default behavior is to kick the player
; 1775 : 	sprintf( disconnect_message, "Server is enforcing file consistency for %s\n", filename );

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0CN@KDL@Server?5is?5enforcing?5file?5consist@ ; `string'
	mov	ecx, DWORD PTR _disconnect_message$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 1776 : 
; 1777 : 	// Kick now with specified disconnect message.
; 1778 : 	return 1;

	mov	eax, 1
$L39528:

; 1779 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InconsistentFile@@YAHPBUedict_s@@PBDPAD@Z ENDP		; InconsistentFile
_TEXT	ENDS
PUBLIC	?AllowLagCompensation@@YAHXZ			; AllowLagCompensation
;	COMDAT ?AllowLagCompensation@@YAHXZ
_TEXT	SEGMENT
?AllowLagCompensation@@YAHXZ PROC NEAR			; AllowLagCompensation, COMDAT

; 1793 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1794 : 	return 1;

	mov	eax, 1

; 1795 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AllowLagCompensation@@YAHXZ ENDP			; AllowLagCompensation
_TEXT	ENDS
PUBLIC	?ShouldCollide@@YAHPAUedict_s@@0@Z		; ShouldCollide
;	COMDAT ?ShouldCollide@@YAHPAUedict_s@@0@Z
_TEXT	SEGMENT
_pentTouched$ = 8
_pentOther$ = 12
_pTouch$ = -4
_pOther$ = -8
?ShouldCollide@@YAHPAUedict_s@@0@Z PROC NEAR		; ShouldCollide, COMDAT

; 1807 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1808 : 	CBaseEntity *pTouch = CBaseEntity::Instance( pentTouched );

	mov	eax, DWORD PTR _pentTouched$[ebp]
	push	eax
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pTouch$[ebp], eax

; 1809 : 	CBaseEntity *pOther = CBaseEntity::Instance( pentOther );

	mov	ecx, DWORD PTR _pentOther$[ebp]
	push	ecx
	call	?Instance@CBaseEntity@@SAPAV1@PAUedict_s@@@Z ; CBaseEntity::Instance
	add	esp, 4
	mov	DWORD PTR _pOther$[ebp], eax

; 1810 : 
; 1811 : 	if( pTouch && pOther )

	cmp	DWORD PTR _pTouch$[ebp], 0
	je	SHORT $L39541
	cmp	DWORD PTR _pOther$[ebp], 0
	je	SHORT $L39541

; 1812 : 		return pOther->ShouldCollide( pTouch );

	mov	edx, DWORD PTR _pTouch$[ebp]
	push	edx
	mov	eax, DWORD PTR _pOther$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pOther$[ebp]
	call	DWORD PTR [edx+336]
	jmp	SHORT $L39538
$L39541:

; 1813 : 
; 1814 : 	return 1;

	mov	eax, 1
$L39538:

; 1815 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ShouldCollide@@YAHPAUedict_s@@0@Z ENDP			; ShouldCollide
_TEXT	ENDS
PUBLIC	?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z		; VARS
PUBLIC	??0CBasePlayer@@QAE@XZ				; CBasePlayer::CBasePlayer
PUBLIC	??2CBaseEntity@@SAPAXIPAUentvars_s@@@Z		; CBaseEntity::operator new
PUBLIC	??3CBaseEntity@@SAXPAXPAUentvars_s@@@Z		; CBaseEntity::operator delete
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File z:\xashxtsrc\server\cbase.h
xdata$x	SEGMENT
__ehfuncinfo$?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
__unwindtable$?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z$0
xdata$x	ENDS
;	COMDAT ?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z
_TEXT	SEGMENT
$T40361 = -20
$T40362 = -24
__$EHRec$ = -12
_pev$ = -16
_a$ = 8
?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z PROC NEAR	; GetClassPtr, COMDAT

; 1073 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1074 : 	entvars_t *pev = (entvars_t *)a;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _pev$[ebp], eax

; 1075 : 
; 1076 : 	// allocate entity if necessary
; 1077 : 	if (pev == NULL)

	cmp	DWORD PTR _pev$[ebp], 0
	jne	SHORT $L39567

; 1078 : 		pev = VARS(CREATE_ENTITY());

	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+84
	push	eax
	call	?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z	; VARS
	add	esp, 4
	mov	DWORD PTR _pev$[ebp], eax
$L39567:

; 1079 : 
; 1080 : 	// get the private data
; 1081 : 	a = (T *)GET_PRIVATE(ENT(pev));

	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4
	mov	DWORD PTR _a$[ebp], eax

; 1082 : 
; 1083 : 	if (a == NULL) 

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $L39569

; 1085 : 		// allocate private data 
; 1086 : 		a = new(pev) T;

	mov	edx, DWORD PTR _pev$[ebp]
	push	edx
	push	4224					; 00001080H
	call	??2CBaseEntity@@SAPAXIPAUentvars_s@@@Z	; CBaseEntity::operator new
	add	esp, 8
	mov	DWORD PTR $T40362[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T40362[ebp], 0
	je	SHORT $L40363
	mov	ecx, DWORD PTR $T40362[ebp]
	call	??0CBasePlayer@@QAE@XZ			; CBasePlayer::CBasePlayer
	mov	DWORD PTR -28+[ebp], eax
	jmp	SHORT $L40364
$L40363:
	mov	DWORD PTR -28+[ebp], 0
$L40364:
	mov	eax, DWORD PTR -28+[ebp]
	mov	DWORD PTR $T40361[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T40361[ebp]
	mov	DWORD PTR _a$[ebp], ecx

; 1087 : 		a->pev = pev;

	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _pev$[ebp]
	mov	DWORD PTR [edx+4], eax
$L39569:

; 1089 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]

; 1090 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z$0:
	mov	eax, DWORD PTR _pev$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T40362[ebp]
	push	ecx
	call	??3CBaseEntity@@SAXPAXPAUentvars_s@@@Z	; CBaseEntity::operator delete
	add	esp, 8
	ret	0
__ehhandler$?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?GetClassPtr@@YAPAVCBasePlayer@@PAV1@@Z ENDP		; GetClassPtr
;	COMDAT ?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z
_TEXT	SEGMENT
_pent$ = 8
?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z PROC NEAR		; VARS, COMDAT

; 178  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 179  : 	if ( !pent )

	cmp	DWORD PTR _pent$[ebp], 0
	jne	SHORT $L32448

; 180  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L32447
$L32448:

; 181  : 
; 182  : 	return &pent->v; 

	mov	eax, DWORD PTR _pent$[ebp]
	add	eax, 128				; 00000080H
$L32447:

; 183  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?VARS@@YAPAUentvars_s@@PAUedict_s@@@Z ENDP		; VARS
_TEXT	ENDS
;	COMDAT ??2CBaseEntity@@SAPAXIPAUentvars_s@@@Z
_TEXT	SEGMENT
_stAllocateBlock$ = 8
_pev$ = 12
??2CBaseEntity@@SAPAXIPAUentvars_s@@@Z PROC NEAR	; CBaseEntity::operator new, COMDAT

; 489  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 490  : 		return (void *)ALLOC_PRIVATE(ENT(pev), stAllocateBlock);

	mov	eax, DWORD PTR _stAllocateBlock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pev$[ebp]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+252
	add	esp, 8

; 491  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2CBaseEntity@@SAPAXIPAUentvars_s@@@Z ENDP		; CBaseEntity::operator new
_TEXT	ENDS
;	COMDAT ??3CBaseEntity@@SAXPAXPAUentvars_s@@@Z
_TEXT	SEGMENT
_pev$ = 12
??3CBaseEntity@@SAXPAXPAUentvars_s@@@Z PROC NEAR	; CBaseEntity::operator delete, COMDAT

; 496  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 497  : 		pev->flags |= FL_KILLME;

	mov	eax, DWORD PTR _pev$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	or	ecx, 1073741824				; 40000000H
	mov	edx, DWORD PTR _pev$[ebp]
	mov	DWORD PTR [edx+420], ecx

; 498  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3CBaseEntity@@SAXPAXPAUentvars_s@@@Z ENDP		; CBaseEntity::operator delete
_TEXT	ENDS
PUBLIC	?EarPosition@CBaseEntity@@UAE?AVVector@@XZ	; CBaseEntity::EarPosition
PUBLIC	?SetYawSpeed@CBaseMonster@@UAEXXZ		; CBaseMonster::SetYawSpeed
PUBLIC	?IsPointSized@CBaseEntity@@UBEHXZ		; CBaseEntity::IsPointSized
PUBLIC	?FValidateCover@CBaseMonster@@UAEHABVVector@@@Z	; CBaseMonster::FValidateCover
PUBLIC	?CoverRadius@CBaseMonster@@UAEMXZ		; CBaseMonster::CoverRadius
PUBLIC	?CheckAmmo@CBaseMonster@@UAEXXZ			; CBaseMonster::CheckAmmo
PUBLIC	?HearingSensitivity@CBaseMonster@@UAEMXZ	; CBaseMonster::HearingSensitivity
PUBLIC	?PrescheduleThink@CBaseMonster@@UAEXXZ		; CBaseMonster::PrescheduleThink
PUBLIC	?IsMoving@CBaseMonster@@UAEHXZ			; CBaseMonster::IsMoving
PUBLIC	?AlertSound@CBaseMonster@@UAEXXZ		; CBaseMonster::AlertSound
PUBLIC	?IdleSound@CBaseMonster@@UAEXXZ			; CBaseMonster::IdleSound
PUBLIC	?PainSound@CBaseMonster@@UAEXXZ			; CBaseMonster::PainSound
PUBLIC	?StopFollowing@CBaseMonster@@UAEXH@Z		; CBaseMonster::StopFollowing
PUBLIC	??0CBaseMonster@@QAE@XZ				; CBaseMonster::CBaseMonster
PUBLIC	??1CBaseMonster@@QAE@XZ				; CBaseMonster::~CBaseMonster
PUBLIC	?BodyTarget@CBasePlayer@@UAE?AVVector@@ABV2@@Z	; CBasePlayer::BodyTarget
PUBLIC	?StartSneaking@CBasePlayer@@UAEXXZ		; CBasePlayer::StartSneaking
PUBLIC	?StopSneaking@CBasePlayer@@UAEXXZ		; CBasePlayer::StopSneaking
PUBLIC	?IsSneaking@CBasePlayer@@UAEHXZ			; CBasePlayer::IsSneaking
PUBLIC	?IsAlive@CBasePlayer@@UAEHXZ			; CBasePlayer::IsAlive
PUBLIC	?ShouldFadeOnDeath@CBasePlayer@@UAEHXZ		; CBasePlayer::ShouldFadeOnDeath
PUBLIC	?IsPlayer@CBasePlayer@@UAEHXZ			; CBasePlayer::IsPlayer
PUBLIC	?IsNetClient@CBasePlayer@@UAEHXZ		; CBasePlayer::IsNetClient
PUBLIC	?GetToggleState@CBaseToggle@@UAEHXZ		; CBaseToggle::GetToggleState
PUBLIC	?GetDelay@CBaseToggle@@UAEMXZ			; CBaseToggle::GetDelay
PUBLIC	?ObjectCaps@CBasePlayer@@UAEHXZ			; CBasePlayer::ObjectCaps
PUBLIC	?Activate@CBaseEntity@@UAEXXZ			; CBaseEntity::Activate
PUBLIC	?OnChangeLevel@CBaseEntity@@UAEXXZ		; CBaseEntity::OnChangeLevel
PUBLIC	?OnTeleport@CBaseEntity@@UAEXXZ			; CBaseEntity::OnTeleport
PUBLIC	?PortalSleep@CBaseEntity@@UAEXM@Z		; CBaseEntity::PortalSleep
PUBLIC	?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z ; CBaseEntity::StartMessage
PUBLIC	?GetPosition@CBaseEntity@@UAEMXZ		; CBaseEntity::GetPosition
PUBLIC	?OnChangeParent@CBaseEntity@@UAEXXZ		; CBaseEntity::OnChangeParent
PUBLIC	?OnClearParent@CBaseEntity@@UAEXXZ		; CBaseEntity::OnClearParent
PUBLIC	?OnRemove@CBaseEntity@@UAEXXZ			; CBaseEntity::OnRemove
PUBLIC	?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z	; CBaseEntity::DeathNotice
PUBLIC	?IsRigidBody@CBaseEntity@@UAEHXZ		; CBaseEntity::IsRigidBody
PUBLIC	?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z	; CBaseEntity::GetState
PUBLIC	?IsTriggered@CBaseEntity@@UAEHPAV1@@Z		; CBaseEntity::IsTriggered
PUBLIC	?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ ; CBaseEntity::MySquadMonsterPointer
PUBLIC	?GetVehicleDriver@CBaseEntity@@UAEPAV1@XZ	; CBaseEntity::GetVehicleDriver
PUBLIC	?OverrideReset@CBaseEntity@@UAEXXZ		; CBaseEntity::OverrideReset
PUBLIC	?SetToggleState@CBaseEntity@@UAEXH@Z		; CBaseEntity::SetToggleState
PUBLIC	?OnControls@CBaseEntity@@UAEHPAV1@@Z		; CBaseEntity::OnControls
PUBLIC	?IsBSPModel@CBaseEntity@@UAEHXZ			; CBaseEntity::IsBSPModel
PUBLIC	?IsCustomModel@CBaseEntity@@UAEHXZ		; CBaseEntity::IsCustomModel
PUBLIC	?ReflectGauss@CBaseEntity@@UAEHXZ		; CBaseEntity::ReflectGauss
PUBLIC	??_7CBasePlayer@@6B@				; CBasePlayer::`vftable'
PUBLIC	?HasTarget@CBaseEntity@@UAEHH@Z			; CBaseEntity::HasTarget
PUBLIC	?IsMonster@CBaseEntity@@UAEHXZ			; CBaseEntity::IsMonster
PUBLIC	?IsPushable@CBaseEntity@@UAEHXZ			; CBaseEntity::IsPushable
PUBLIC	?IsProjectile@CBaseEntity@@UAEHXZ		; CBaseEntity::IsProjectile
PUBLIC	?BloodColor@CBaseMonster@@UAEHXZ		; CBaseMonster::BloodColor
PUBLIC	?IsFuncScreen@CBaseEntity@@UAEHXZ		; CBaseEntity::IsFuncScreen
PUBLIC	?MyMonsterPointer@CBaseMonster@@UAEPAV1@XZ	; CBaseMonster::MyMonsterPointer
PUBLIC	?IsPortal@CBaseEntity@@UAEHXZ			; CBaseEntity::IsPortal
PUBLIC	?IsTank@CBaseEntity@@UAEHXZ			; CBaseEntity::IsTank
PUBLIC	?IsMover@CBaseEntity@@UAEHXZ			; CBaseEntity::IsMover
PUBLIC	?IsBreakable@CBaseEntity@@UAEHXZ		; CBaseEntity::IsBreakable
PUBLIC	?Think@CBaseEntity@@UAEXXZ			; CBaseEntity::Think
PUBLIC	?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z	; CBaseEntity::Use
PUBLIC	?Touch@CBaseEntity@@UAEXPAV1@@Z			; CBaseEntity::Touch
PUBLIC	?Blocked@CBaseEntity@@UAEXPAV1@@Z		; CBaseEntity::Blocked
PUBLIC	?GetStoppedActivity@CBaseMonster@@UAE?AW4Activity@@XZ ; CBaseMonster::GetStoppedActivity
PUBLIC	?Stop@CBaseMonster@@UAEXXZ			; CBaseMonster::Stop
PUBLIC	?Respawn@CBaseEntity@@UAEPAV1@XZ		; CBaseEntity::Respawn
PUBLIC	?ScheduleChange@CBaseMonster@@UAEXXZ		; CBaseMonster::ScheduleChange
PUBLIC	?CanPlaySentence@CBaseMonster@@UAEHH@Z		; CBaseMonster::CanPlaySentence
PUBLIC	?UpdateOwner@CBaseEntity@@UAEXXZ		; CBaseEntity::UpdateOwner
PUBLIC	?Center@CBaseEntity@@UAE?AVVector@@XZ		; CBaseEntity::Center
PUBLIC	?EyePosition@CBaseEntity@@UAE?AVVector@@XZ	; CBaseEntity::EyePosition
EXTRN	?FVisible@CBaseEntity@@UAEHPAV1@@Z:NEAR		; CBaseEntity::FVisible
EXTRN	?FVisible@CBaseEntity@@UAEHABVVector@@@Z:NEAR	; CBaseEntity::FVisible
EXTRN	?BuildNearestRoute@CBaseMonster@@UAEHVVector@@0MM@Z:NEAR ; CBaseMonster::BuildNearestRoute
EXTRN	?ShouldCollide@CBaseEntity@@UAEHPAV1@@Z:NEAR	; CBaseEntity::ShouldCollide
EXTRN	?FindCover@CBaseMonster@@UAEHVVector@@0MM@Z:NEAR ; CBaseMonster::FindCover
EXTRN	?FCanCheckAttacks@CBaseMonster@@UAEHXZ:NEAR	; CBaseMonster::FCanCheckAttacks
EXTRN	?IgnoreConditions@CBaseMonster@@UAEHXZ:NEAR	; CBaseMonster::IgnoreConditions
EXTRN	?FValidateHintType@CBaseMonster@@UAEHF@Z:NEAR	; CBaseMonster::FValidateHintType
EXTRN	?FCanActiveIdle@CBaseMonster@@UAEHXZ:NEAR	; CBaseMonster::FCanActiveIdle
EXTRN	?ISoundMask@CBaseMonster@@UAEHXZ:NEAR		; CBaseMonster::ISoundMask
EXTRN	?PBestSound@CBaseMonster@@UAEPAVCSound@@XZ:NEAR	; CBaseMonster::PBestSound
EXTRN	?PBestScent@CBaseMonster@@UAEPAVCSound@@XZ:NEAR	; CBaseMonster::PBestScent
EXTRN	?GetDeathActivity@CBaseMonster@@UAE?AW4Activity@@XZ:NEAR ; CBaseMonster::GetDeathActivity
EXTRN	?GibMonster@CBaseMonster@@UAEXXZ:NEAR		; CBaseMonster::GibMonster
EXTRN	?DamageDecal@CBaseMonster@@UAEHH@Z:NEAR		; CBaseMonster::DamageDecal
EXTRN	?HasHumanGibs@CBaseMonster@@UAEHXZ:NEAR		; CBaseMonster::HasHumanGibs
EXTRN	?HasAlienGibs@CBaseMonster@@UAEHXZ:NEAR		; CBaseMonster::HasAlienGibs
EXTRN	?FadeMonster@CBaseMonster@@UAEXXZ:NEAR		; CBaseMonster::FadeMonster
EXTRN	?StepSound@CBaseMonster@@UAEXXZ:NEAR		; CBaseMonster::StepSound
EXTRN	?Spawn@CBasePlayer@@UAEXXZ:NEAR			; CBasePlayer::Spawn
EXTRN	?Jump@CBasePlayer@@UAEXXZ:NEAR			; CBasePlayer::Jump
EXTRN	?Duck@CBasePlayer@@UAEXXZ:NEAR			; CBasePlayer::Duck
EXTRN	?PreThink@CBasePlayer@@UAEXXZ:NEAR		; CBasePlayer::PreThink
EXTRN	?PostThink@CBasePlayer@@UAEXXZ:NEAR		; CBasePlayer::PostThink
EXTRN	?GetGunPosition@CBasePlayer@@UAE?AVVector@@XZ:NEAR ; CBasePlayer::GetGunPosition
EXTRN	?TakeHealth@CBasePlayer@@UAEHMH@Z:NEAR		; CBasePlayer::TakeHealth
EXTRN	?TraceAttack@CBasePlayer@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z:NEAR ; CBasePlayer::TraceAttack
EXTRN	?TakeDamage@CBasePlayer@@UAEHPAUentvars_s@@0MH@Z:NEAR ; CBasePlayer::TakeDamage
EXTRN	?Killed@CBasePlayer@@UAEXPAUentvars_s@@H@Z:NEAR	; CBasePlayer::Killed
EXTRN	?TeamID@CBasePlayer@@UAEPBDXZ:NEAR		; CBasePlayer::TeamID
EXTRN	?Restore@CBasePlayer@@UAEHAAVCRestore@@@Z:NEAR	; CBasePlayer::Restore
EXTRN	?UpdateClientData@CBasePlayer@@UAEXXZ:NEAR	; CBasePlayer::UpdateClientData
EXTRN	?GetState@CBaseToggle@@UAE?AW4STATE@@XZ:NEAR	; CBaseToggle::GetState
EXTRN	?MoveDone@CBaseToggle@@UAEXXZ:NEAR		; CBaseToggle::MoveDone
EXTRN	?GetDataDescMap@CBasePlayer@@UAEPAUdatamap_s@@XZ:NEAR ; CBasePlayer::GetDataDescMap
EXTRN	?Precache@CBasePlayer@@UAEXXZ:NEAR		; CBasePlayer::Precache
EXTRN	?DeathSound@CBasePlayer@@UAEXXZ:NEAR		; CBasePlayer::DeathSound
EXTRN	?TransferReset@CBasePlayer@@UAEXXZ:NEAR		; CBasePlayer::TransferReset
EXTRN	?Classify@CBasePlayer@@UAEHXZ:NEAR		; CBasePlayer::Classify
EXTRN	?ImpulseCommands@CBasePlayer@@UAEXXZ:NEAR	; CBasePlayer::ImpulseCommands
EXTRN	?AddPoints@CBasePlayer@@UAEXHH@Z:NEAR		; CBasePlayer::AddPoints
EXTRN	?AddPointsToTeam@CBasePlayer@@UAEXHH@Z:NEAR	; CBasePlayer::AddPointsToTeam
EXTRN	?AddPlayerItem@CBasePlayer@@UAEHPAVCBasePlayerItem@@@Z:NEAR ; CBasePlayer::AddPlayerItem
EXTRN	?RemovePlayerItem@CBasePlayer@@UAEHPAVCBasePlayerItem@@@Z:NEAR ; CBasePlayer::RemovePlayerItem
EXTRN	?Save@CBaseEntity@@UAEHAAVCSave@@@Z:NEAR	; CBaseEntity::Save
EXTRN	?SetObjectCollisionBox@CBaseEntity@@UAEXXZ:NEAR	; CBaseEntity::SetObjectCollisionBox
EXTRN	?GiveAmmo@CBasePlayer@@UAEHHPADH@Z:NEAR		; CBasePlayer::GiveAmmo
EXTRN	?FBecomeProne@CBasePlayer@@UAEHXZ:NEAR		; CBasePlayer::FBecomeProne
EXTRN	?BarnacleVictimBitten@CBasePlayer@@UAEXPAUentvars_s@@@Z:NEAR ; CBasePlayer::BarnacleVictimBitten
EXTRN	?SetNextThink@CBaseEntity@@UAEXM@Z:NEAR		; CBaseEntity::SetNextThink
EXTRN	?BarnacleVictimReleased@CBasePlayer@@UAEXXZ:NEAR ; CBasePlayer::BarnacleVictimReleased
EXTRN	?Illumination@CBasePlayer@@UAEHXZ:NEAR		; CBasePlayer::Illumination
EXTRN	?TakeArmor@CBaseEntity@@UAEHMH@Z:NEAR		; CBaseEntity::TakeArmor
EXTRN	?TraceBleed@CBaseEntity@@UAEXMVVector@@PAUgametrace_s@@H@Z:NEAR ; CBaseEntity::TraceBleed
EXTRN	?KeyValue@CBaseMonster@@UAEXPAUKeyValueData_s@@@Z:NEAR ; CBaseMonster::KeyValue
EXTRN	?IsInWorld@CBaseEntity@@UAEHH@Z:NEAR		; CBaseEntity::IsInWorld
EXTRN	?Look@CBaseMonster@@UAEXH@Z:NEAR		; CBaseMonster::Look
EXTRN	?RunAI@CBaseMonster@@UAEXXZ:NEAR		; CBaseMonster::RunAI
EXTRN	?GetNextTarget@CBaseEntity@@UAEPAV1@XZ:NEAR	; CBaseEntity::GetNextTarget
EXTRN	?ChangeYaw@CBaseMonster@@UAEMH@Z:NEAR		; CBaseMonster::ChangeYaw
EXTRN	?MonsterThink@CBaseMonster@@UAEXXZ:NEAR		; CBaseMonster::MonsterThink
EXTRN	?IRelationship@CBaseMonster@@UAEHPAVCBaseEntity@@@Z:NEAR ; CBaseMonster::IRelationship
EXTRN	?MonsterInit@CBaseMonster@@UAEXXZ:NEAR		; CBaseMonster::MonsterInit
EXTRN	?MonsterInitDead@CBaseMonster@@UAEXXZ:NEAR	; CBaseMonster::MonsterInitDead
EXTRN	?BecomeDead@CBaseMonster@@UAEXXZ:NEAR		; CBaseMonster::BecomeDead
EXTRN	?StartMonster@CBaseMonster@@UAEXXZ:NEAR		; CBaseMonster::StartMonster
EXTRN	?BestVisibleEnemy@CBaseMonster@@UAEPAVCBaseEntity@@XZ:NEAR ; CBaseMonster::BestVisibleEnemy
EXTRN	?FInViewCone@CBaseMonster@@UAEHPAVCBaseEntity@@@Z:NEAR ; CBaseMonster::FInViewCone
EXTRN	?FInViewCone@CBaseMonster@@UAEHPAVVector@@@Z:NEAR ; CBaseMonster::FInViewCone
EXTRN	?HandleAnimEvent@CBaseMonster@@UAEXPAUMonsterEvent_t@@@Z:NEAR ; CBaseMonster::HandleAnimEvent
EXTRN	?CheckLocalMove@CBaseMonster@@UAEHABVVector@@0PAVCBaseEntity@@PAM@Z:NEAR ; CBaseMonster::CheckLocalMove
EXTRN	?Move@CBaseMonster@@UAEXM@Z:NEAR		; CBaseMonster::Move
EXTRN	?MoveExecute@CBaseMonster@@UAEXPAVCBaseEntity@@ABVVector@@M@Z:NEAR ; CBaseMonster::MoveExecute
EXTRN	?ShouldAdvanceRoute@CBaseMonster@@UAEHM@Z:NEAR	; CBaseMonster::ShouldAdvanceRoute
EXTRN	?CheckRangeAttack1@CBaseMonster@@UAEHMM@Z:NEAR	; CBaseMonster::CheckRangeAttack1
EXTRN	?CheckRangeAttack2@CBaseMonster@@UAEHMM@Z:NEAR	; CBaseMonster::CheckRangeAttack2
EXTRN	?CheckMeleeAttack1@CBaseMonster@@UAEHMM@Z:NEAR	; CBaseMonster::CheckMeleeAttack1
EXTRN	?CheckMeleeAttack2@CBaseMonster@@UAEHMM@Z:NEAR	; CBaseMonster::CheckMeleeAttack2
EXTRN	?ScheduleFromName@CBaseMonster@@UAEPAUSchedule_t@@PBD@Z:NEAR ; CBaseMonster::ScheduleFromName
EXTRN	?StartTask@CBaseMonster@@UAEXPAUTask_t@@@Z:NEAR	; CBaseMonster::StartTask
EXTRN	?RunTask@CBaseMonster@@UAEXPAUTask_t@@@Z:NEAR	; CBaseMonster::RunTask
EXTRN	?GetScheduleOfType@CBaseMonster@@UAEPAUSchedule_t@@H@Z:NEAR ; CBaseMonster::GetScheduleOfType
EXTRN	?GetSchedule@CBaseMonster@@UAEPAUSchedule_t@@XZ:NEAR ; CBaseMonster::GetSchedule
EXTRN	?CanPlaySequence@CBaseMonster@@UAEHHH@Z:NEAR	; CBaseMonster::CanPlaySequence
EXTRN	?PlaySentence@CBaseMonster@@UAEXPBDMMM@Z:NEAR	; CBaseMonster::PlaySentence
EXTRN	?PlayScriptedSentence@CBaseMonster@@UAEXPBDMMMHPAVCBaseEntity@@@Z:NEAR ; CBaseMonster::PlayScriptedSentence
EXTRN	?SentenceStop@CBaseMonster@@UAEXXZ:NEAR		; CBaseMonster::SentenceStop
EXTRN	?GetIdealState@CBaseMonster@@UAE?AW4MONSTERSTATE@@XZ:NEAR ; CBaseMonster::GetIdealState
EXTRN	?SetActivity@CBaseMonster@@UAEXW4Activity@@@Z:NEAR ; CBaseMonster::SetActivity
EXTRN	?ReportAIState@CBaseMonster@@UAEXXZ:NEAR	; CBaseMonster::ReportAIState
EXTRN	?CheckEnemy@CBaseMonster@@UAEHPAVCBaseEntity@@@Z:NEAR ; CBaseMonster::CheckEnemy
EXTRN	?FTriangulate@CBaseMonster@@UAEHABVVector@@0MPAVCBaseEntity@@PAV2@@Z:NEAR ; CBaseMonster::FTriangulate
;	COMDAT ??_7CBasePlayer@@6B@
CONST	SEGMENT
??_7CBasePlayer@@6B@ DD FLAT:?GetDataDescMap@CBasePlayer@@UAEPAUdatamap_s@@XZ ; CBasePlayer::`vftable'
	DD	FLAT:?Spawn@CBasePlayer@@UAEXXZ
	DD	FLAT:?Precache@CBasePlayer@@UAEXXZ
	DD	FLAT:?KeyValue@CBaseMonster@@UAEXPAUKeyValueData_s@@@Z
	DD	FLAT:?Save@CBaseEntity@@UAEHAAVCSave@@@Z
	DD	FLAT:?Restore@CBasePlayer@@UAEHAAVCRestore@@@Z
	DD	FLAT:?ObjectCaps@CBasePlayer@@UAEHXZ
	DD	FLAT:?Activate@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnChangeLevel@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnTeleport@CBaseEntity@@UAEXXZ
	DD	FLAT:?PortalSleep@CBaseEntity@@UAEXM@Z
	DD	FLAT:?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
	DD	FLAT:?GetPosition@CBaseEntity@@UAEMXZ
	DD	FLAT:?OnChangeParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnClearParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnRemove@CBaseEntity@@UAEXXZ
	DD	FLAT:?SetObjectCollisionBox@CBaseEntity@@UAEXXZ
	DD	FLAT:?Classify@CBasePlayer@@UAEHXZ
	DD	FLAT:?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
	DD	FLAT:?IsRigidBody@CBaseEntity@@UAEHXZ
	DD	FLAT:?SetNextThink@CBaseEntity@@UAEXM@Z
	DD	FLAT:?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
	DD	FLAT:?GetState@CBaseToggle@@UAE?AW4STATE@@XZ
	DD	FLAT:?TraceAttack@CBasePlayer@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?TakeDamage@CBasePlayer@@UAEHPAUentvars_s@@0MH@Z
	DD	FLAT:?TakeHealth@CBasePlayer@@UAEHMH@Z
	DD	FLAT:?TakeArmor@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?Killed@CBasePlayer@@UAEXPAUentvars_s@@H@Z
	DD	FLAT:?BloodColor@CBaseMonster@@UAEHXZ
	DD	FLAT:?TraceBleed@CBaseEntity@@UAEXMVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?MyMonsterPointer@CBaseMonster@@UAEPAV1@XZ
	DD	FLAT:?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
	DD	FLAT:?GetVehicleDriver@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?GetToggleState@CBaseToggle@@UAEHXZ
	DD	FLAT:?AddPoints@CBasePlayer@@UAEXHH@Z
	DD	FLAT:?AddPointsToTeam@CBasePlayer@@UAEXHH@Z
	DD	FLAT:?AddPlayerItem@CBasePlayer@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?RemovePlayerItem@CBasePlayer@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?GiveAmmo@CBasePlayer@@UAEHHPADH@Z
	DD	FLAT:?GetDelay@CBaseToggle@@UAEMXZ
	DD	FLAT:?IsMoving@CBaseMonster@@UAEHXZ
	DD	FLAT:?OverrideReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?TransferReset@CBasePlayer@@UAEXXZ
	DD	FLAT:?DamageDecal@CBaseMonster@@UAEHH@Z
	DD	FLAT:?SetToggleState@CBaseEntity@@UAEXH@Z
	DD	FLAT:?StartSneaking@CBasePlayer@@UAEXXZ
	DD	FLAT:?StopSneaking@CBasePlayer@@UAEXXZ
	DD	FLAT:?OnControls@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?IsSneaking@CBasePlayer@@UAEHXZ
	DD	FLAT:?IsAlive@CBasePlayer@@UAEHXZ
	DD	FLAT:?IsBSPModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsCustomModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?ReflectGauss@CBaseEntity@@UAEHXZ
	DD	FLAT:?HasTarget@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsInWorld@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsPlayer@CBasePlayer@@UAEHXZ
	DD	FLAT:?IsNetClient@CBasePlayer@@UAEHXZ
	DD	FLAT:?IsMonster@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPushable@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsProjectile@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsFuncScreen@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPortal@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsTank@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMover@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBreakable@CBaseEntity@@UAEHXZ
	DD	FLAT:?TeamID@CBasePlayer@@UAEPBDXZ
	DD	FLAT:?GetNextTarget@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?Think@CBaseEntity@@UAEXXZ
	DD	FLAT:?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
	DD	FLAT:?Touch@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?Blocked@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?MoveDone@CBaseToggle@@UAEXXZ
	DD	FLAT:?Respawn@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?UpdateOwner@CBaseEntity@@UAEXXZ
	DD	FLAT:?FBecomeProne@CBasePlayer@@UAEHXZ
	DD	FLAT:?Center@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?BodyTarget@CBasePlayer@@UAE?AVVector@@ABV2@@Z
	DD	FLAT:?IsPointSized@CBaseEntity@@UBEHXZ
	DD	FLAT:?Illumination@CBasePlayer@@UAEHXZ
	DD	FLAT:?FVisible@CBaseEntity@@UAEHABVVector@@@Z
	DD	FLAT:?FVisible@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?ShouldCollide@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?HandleAnimEvent@CBaseMonster@@UAEXPAUMonsterEvent_t@@@Z
	DD	FLAT:?Look@CBaseMonster@@UAEXH@Z
	DD	FLAT:?RunAI@CBaseMonster@@UAEXXZ
	DD	FLAT:?ShouldFadeOnDeath@CBasePlayer@@UAEHXZ
	DD	FLAT:?ChangeYaw@CBaseMonster@@UAEMH@Z
	DD	FLAT:?MonsterThink@CBaseMonster@@UAEXXZ
	DD	FLAT:?IRelationship@CBaseMonster@@UAEHPAVCBaseEntity@@@Z
	DD	FLAT:?MonsterInit@CBaseMonster@@UAEXXZ
	DD	FLAT:?MonsterInitDead@CBaseMonster@@UAEXXZ
	DD	FLAT:?BecomeDead@CBaseMonster@@UAEXXZ
	DD	FLAT:?StartMonster@CBaseMonster@@UAEXXZ
	DD	FLAT:?BestVisibleEnemy@CBaseMonster@@UAEPAVCBaseEntity@@XZ
	DD	FLAT:?FInViewCone@CBaseMonster@@UAEHPAVVector@@@Z
	DD	FLAT:?FInViewCone@CBaseMonster@@UAEHPAVCBaseEntity@@@Z
	DD	FLAT:?CheckLocalMove@CBaseMonster@@UAEHABVVector@@0PAVCBaseEntity@@PAM@Z
	DD	FLAT:?Move@CBaseMonster@@UAEXM@Z
	DD	FLAT:?MoveExecute@CBaseMonster@@UAEXPAVCBaseEntity@@ABVVector@@M@Z
	DD	FLAT:?ShouldAdvanceRoute@CBaseMonster@@UAEHM@Z
	DD	FLAT:?GetStoppedActivity@CBaseMonster@@UAE?AW4Activity@@XZ
	DD	FLAT:?Stop@CBaseMonster@@UAEXXZ
	DD	FLAT:?CheckRangeAttack1@CBaseMonster@@UAEHMM@Z
	DD	FLAT:?CheckRangeAttack2@CBaseMonster@@UAEHMM@Z
	DD	FLAT:?CheckMeleeAttack1@CBaseMonster@@UAEHMM@Z
	DD	FLAT:?CheckMeleeAttack2@CBaseMonster@@UAEHMM@Z
	DD	FLAT:?ScheduleFromName@CBaseMonster@@UAEPAUSchedule_t@@PBD@Z
	DD	FLAT:?StartTask@CBaseMonster@@UAEXPAUTask_t@@@Z
	DD	FLAT:?RunTask@CBaseMonster@@UAEXPAUTask_t@@@Z
	DD	FLAT:?GetScheduleOfType@CBaseMonster@@UAEPAUSchedule_t@@H@Z
	DD	FLAT:?GetSchedule@CBaseMonster@@UAEPAUSchedule_t@@XZ
	DD	FLAT:?ScheduleChange@CBaseMonster@@UAEXXZ
	DD	FLAT:?CanPlaySequence@CBaseMonster@@UAEHHH@Z
	DD	FLAT:?CanPlaySentence@CBaseMonster@@UAEHH@Z
	DD	FLAT:?PlaySentence@CBaseMonster@@UAEXPBDMMM@Z
	DD	FLAT:?PlayScriptedSentence@CBaseMonster@@UAEXPBDMMMHPAVCBaseEntity@@@Z
	DD	FLAT:?SentenceStop@CBaseMonster@@UAEXXZ
	DD	FLAT:?GetIdealState@CBaseMonster@@UAE?AW4MONSTERSTATE@@XZ
	DD	FLAT:?SetActivity@CBaseMonster@@UAEXW4Activity@@@Z
	DD	FLAT:?ReportAIState@CBaseMonster@@UAEXXZ
	DD	FLAT:?CheckEnemy@CBaseMonster@@UAEHPAVCBaseEntity@@@Z
	DD	FLAT:?FTriangulate@CBaseMonster@@UAEHABVVector@@0MPAVCBaseEntity@@PAV2@@Z
	DD	FLAT:?SetYawSpeed@CBaseMonster@@UAEXXZ
	DD	FLAT:?BuildNearestRoute@CBaseMonster@@UAEHVVector@@0MM@Z
	DD	FLAT:?FindCover@CBaseMonster@@UAEHVVector@@0MM@Z
	DD	FLAT:?FValidateCover@CBaseMonster@@UAEHABVVector@@@Z
	DD	FLAT:?CoverRadius@CBaseMonster@@UAEMXZ
	DD	FLAT:?FCanCheckAttacks@CBaseMonster@@UAEHXZ
	DD	FLAT:?CheckAmmo@CBaseMonster@@UAEXXZ
	DD	FLAT:?IgnoreConditions@CBaseMonster@@UAEHXZ
	DD	FLAT:?FValidateHintType@CBaseMonster@@UAEHF@Z
	DD	FLAT:?FCanActiveIdle@CBaseMonster@@UAEHXZ
	DD	FLAT:?ISoundMask@CBaseMonster@@UAEHXZ
	DD	FLAT:?PBestSound@CBaseMonster@@UAEPAVCSound@@XZ
	DD	FLAT:?PBestScent@CBaseMonster@@UAEPAVCSound@@XZ
	DD	FLAT:?HearingSensitivity@CBaseMonster@@UAEMXZ
	DD	FLAT:?BarnacleVictimBitten@CBasePlayer@@UAEXPAUentvars_s@@@Z
	DD	FLAT:?BarnacleVictimReleased@CBasePlayer@@UAEXXZ
	DD	FLAT:?PrescheduleThink@CBaseMonster@@UAEXXZ
	DD	FLAT:?GetDeathActivity@CBaseMonster@@UAE?AW4Activity@@XZ
	DD	FLAT:?GibMonster@CBaseMonster@@UAEXXZ
	DD	FLAT:?HasHumanGibs@CBaseMonster@@UAEHXZ
	DD	FLAT:?HasAlienGibs@CBaseMonster@@UAEHXZ
	DD	FLAT:?FadeMonster@CBaseMonster@@UAEXXZ
	DD	FLAT:?GetGunPosition@CBasePlayer@@UAE?AVVector@@XZ
	DD	FLAT:?DeathSound@CBasePlayer@@UAEXXZ
	DD	FLAT:?AlertSound@CBaseMonster@@UAEXXZ
	DD	FLAT:?IdleSound@CBaseMonster@@UAEXXZ
	DD	FLAT:?PainSound@CBaseMonster@@UAEXXZ
	DD	FLAT:?StepSound@CBaseMonster@@UAEXXZ
	DD	FLAT:?StopFollowing@CBaseMonster@@UAEXH@Z
	DD	FLAT:?Jump@CBasePlayer@@UAEXXZ
	DD	FLAT:?Duck@CBasePlayer@@UAEXXZ
	DD	FLAT:?PreThink@CBasePlayer@@UAEXXZ
	DD	FLAT:?PostThink@CBasePlayer@@UAEXXZ
	DD	FLAT:?UpdateClientData@CBasePlayer@@UAEXXZ
	DD	FLAT:?ImpulseCommands@CBasePlayer@@UAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CBasePlayer@@QAE@XZ DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$??0CBasePlayer@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
__unwindtable$??0CBasePlayer@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBasePlayer@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT ??0CBasePlayer@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??0CBasePlayer@@QAE@XZ PROC NEAR			; CBasePlayer::CBasePlayer, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBasePlayer@@QAE@XZ
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseMonster@@QAE@XZ			; CBaseMonster::CBaseMonster
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3764				; 00000eb4H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4148				; 00001034H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CBasePlayer@@6B@ ; CBasePlayer::`vftable'
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBasePlayer@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseMonster@@QAE@XZ			; CBaseMonster::~CBaseMonster
	ret	0
__ehhandler$??0CBasePlayer@@QAE@XZ:
	mov	eax, OFFSET FLAT:__ehfuncinfo$??0CBasePlayer@@QAE@XZ
	jmp	___CxxFrameHandler
text$x	ENDS
??0CBasePlayer@@QAE@XZ ENDP				; CBasePlayer::CBasePlayer
;	COMDAT ?Activate@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Activate@CBaseEntity@@UAEXXZ PROC NEAR			; CBaseEntity::Activate, COMDAT

; 365  : 	virtual void	Activate( void ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Activate@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::Activate
_TEXT	ENDS
;	COMDAT ?OnChangeLevel@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?OnChangeLevel@CBaseEntity@@UAEXXZ PROC NEAR		; CBaseEntity::OnChangeLevel, COMDAT

; 366  : 	virtual void	OnChangeLevel( void ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnChangeLevel@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::OnChangeLevel
_TEXT	ENDS
;	COMDAT ?OnTeleport@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?OnTeleport@CBaseEntity@@UAEXXZ PROC NEAR		; CBaseEntity::OnTeleport, COMDAT

; 367  : 	virtual void	OnTeleport( void ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnTeleport@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::OnTeleport
_TEXT	ENDS
;	COMDAT ?PortalSleep@CBaseEntity@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4
?PortalSleep@CBaseEntity@@UAEXM@Z PROC NEAR		; CBaseEntity::PortalSleep, COMDAT

; 368  : 	virtual void	PortalSleep( float seconds ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?PortalSleep@CBaseEntity@@UAEXM@Z ENDP			; CBaseEntity::PortalSleep
_TEXT	ENDS
;	COMDAT ?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
_TEXT	SEGMENT
_this$ = -4
?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z PROC NEAR ; CBaseEntity::StartMessage, COMDAT

; 369  :           virtual void	StartMessage( CBasePlayer *pPlayer ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z ENDP	; CBaseEntity::StartMessage
_TEXT	ENDS
;	COMDAT ?GetPosition@CBaseEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4
?GetPosition@CBaseEntity@@UAEMXZ PROC NEAR		; CBaseEntity::GetPosition, COMDAT

; 370  : 	virtual float	GetPosition( void ) { return 0.0f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@4@00000000000000000000
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPosition@CBaseEntity@@UAEMXZ ENDP			; CBaseEntity::GetPosition
_TEXT	ENDS
;	COMDAT ?OnChangeParent@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?OnChangeParent@CBaseEntity@@UAEXXZ PROC NEAR		; CBaseEntity::OnChangeParent, COMDAT

; 371  : 	virtual void	OnChangeParent( void ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnChangeParent@CBaseEntity@@UAEXXZ ENDP		; CBaseEntity::OnChangeParent
_TEXT	ENDS
;	COMDAT ?OnClearParent@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?OnClearParent@CBaseEntity@@UAEXXZ PROC NEAR		; CBaseEntity::OnClearParent, COMDAT

; 372  : 	virtual void	OnClearParent( void ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnClearParent@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::OnClearParent
_TEXT	ENDS
;	COMDAT ?OnRemove@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?OnRemove@CBaseEntity@@UAEXXZ PROC NEAR			; CBaseEntity::OnRemove, COMDAT

; 373  : 	virtual void	OnRemove( void ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnRemove@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::OnRemove
_TEXT	ENDS
;	COMDAT ?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
_TEXT	SEGMENT
_this$ = -4
?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z PROC NEAR ; CBaseEntity::DeathNotice, COMDAT

; 386  : 	virtual void DeathNotice ( entvars_t *pevChild ) { } // monster maker children use this to tell the monster maker that they have died.

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z ENDP	; CBaseEntity::DeathNotice
_TEXT	ENDS
;	COMDAT ?IsRigidBody@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsRigidBody@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::IsRigidBody, COMDAT

; 387  : 	virtual BOOL IsRigidBody( void ) { return (m_iActorType == ACTOR_DYNAMIC); } 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+1604]
	mov	eax, ecx
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	inc	eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsRigidBody@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsRigidBody
_TEXT	ENDS
;	COMDAT ?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
_TEXT	SEGMENT
_this$ = -4
?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z PROC NEAR	; CBaseEntity::GetState, COMDAT

; 401  : 	virtual STATE GetState ( CBaseEntity* pEnt ) { return GetState(); };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+88]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z ENDP	; CBaseEntity::GetState
_TEXT	ENDS
;	COMDAT ?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
?IsTriggered@CBaseEntity@@UAEHPAV1@@Z PROC NEAR		; CBaseEntity::IsTriggered, COMDAT

; 410  : 	virtual BOOL	IsTriggered( CBaseEntity *pActivator ) {return TRUE;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsTriggered@CBaseEntity@@UAEHPAV1@@Z ENDP		; CBaseEntity::IsTriggered
_TEXT	ENDS
;	COMDAT ?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
_TEXT	SEGMENT
_this$ = -4
?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ PROC NEAR ; CBaseEntity::MySquadMonsterPointer, COMDAT

; 412  : 	virtual CSquadMonster *MySquadMonsterPointer( void ) { return NULL;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ ENDP ; CBaseEntity::MySquadMonsterPointer
_TEXT	ENDS
;	COMDAT ?GetVehicleDriver@CBaseEntity@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetVehicleDriver@CBaseEntity@@UAEPAV1@XZ PROC NEAR	; CBaseEntity::GetVehicleDriver, COMDAT

; 413  : 	virtual CBaseEntity *GetVehicleDriver( void ) { return NULL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehicleDriver@CBaseEntity@@UAEPAV1@XZ ENDP		; CBaseEntity::GetVehicleDriver
_TEXT	ENDS
;	COMDAT ?OverrideReset@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?OverrideReset@CBaseEntity@@UAEXXZ PROC NEAR		; CBaseEntity::OverrideReset, COMDAT

; 422  : 	virtual void	OverrideReset( void ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OverrideReset@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::OverrideReset
_TEXT	ENDS
;	COMDAT ?SetToggleState@CBaseEntity@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4
?SetToggleState@CBaseEntity@@UAEXH@Z PROC NEAR		; CBaseEntity::SetToggleState, COMDAT

; 426  : 	virtual void	SetToggleState( int state ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetToggleState@CBaseEntity@@UAEXH@Z ENDP		; CBaseEntity::SetToggleState
_TEXT	ENDS
;	COMDAT ?OnControls@CBaseEntity@@UAEHPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
?OnControls@CBaseEntity@@UAEHPAV1@@Z PROC NEAR		; CBaseEntity::OnControls, COMDAT

; 429  : 	virtual BOOL	OnControls( CBaseEntity *pTest ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?OnControls@CBaseEntity@@UAEHPAV1@@Z ENDP		; CBaseEntity::OnControls
_TEXT	ENDS
EXTRN	?UTIL_GetModelType@@YA?AW4modtype_t@@H@Z:NEAR	; UTIL_GetModelType
;	COMDAT ?IsBSPModel@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsBSPModel@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::IsBSPModel, COMDAT

; 432  : 	virtual BOOL	IsBSPModel( void ) { return UTIL_GetModelType( pev->modelindex ) == mod_brush; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+180]
	push	edx
	call	?UTIL_GetModelType@@YA?AW4modtype_t@@H@Z ; UTIL_GetModelType
	add	esp, 4
	neg	eax
	sbb	eax, eax
	inc	eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBSPModel@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsBSPModel
_TEXT	ENDS
;	COMDAT ?IsCustomModel@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsCustomModel@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::IsCustomModel, COMDAT

; 433  : 	virtual BOOL	IsCustomModel( void ) { return pev->solid == SOLID_CUSTOM; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	DWORD PTR [ecx+268], 5
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCustomModel@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsCustomModel
_TEXT	ENDS
;	COMDAT ?ReflectGauss@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?ReflectGauss@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::ReflectGauss, COMDAT

; 434  : 	virtual BOOL	ReflectGauss( void ) { return (( IsBSPModel() || IsCustomModel()) && !pev->takedamage ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+204]
	test	eax, eax
	jne	SHORT $L40433
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+208]
	test	eax, eax
	je	SHORT $L40434
$L40433:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+364]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	je	SHORT $L40434
	mov	DWORD PTR -8+[ebp], 1
	jmp	SHORT $L40435
$L40434:
	mov	DWORD PTR -8+[ebp], 0
$L40435:
	mov	eax, DWORD PTR -8+[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReflectGauss@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::ReflectGauss
_TEXT	ENDS
;	COMDAT ?HasTarget@CBaseEntity@@UAEHH@Z
_TEXT	SEGMENT
_this$ = -4
_targetname$ = 8
?HasTarget@CBaseEntity@@UAEHH@Z PROC NEAR		; CBaseEntity::HasTarget, COMDAT

; 435  : 	virtual BOOL	HasTarget( string_t targetname ) { return FStrEq(STRING(targetname), STRING(pev->targetname) ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+460]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _targetname$[ebp]
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+264
	add	esp, 4
	push	eax
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?HasTarget@CBaseEntity@@UAEHH@Z ENDP			; CBaseEntity::HasTarget
_TEXT	ENDS
;	COMDAT ?IsMonster@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsMonster@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::IsMonster, COMDAT

; 439  : 	virtual BOOL	IsMonster( void ) { return (pev->flags & FL_MONSTER ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+420]
	and	eax, 32					; 00000020H
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMonster@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsMonster
_TEXT	ENDS
;	COMDAT ?IsPushable@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsPushable@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::IsPushable, COMDAT

; 440  : 	virtual BOOL	IsPushable( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPushable@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsPushable
_TEXT	ENDS
;	COMDAT ?IsProjectile@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsProjectile@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::IsProjectile, COMDAT

; 441  : 	virtual BOOL	IsProjectile( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsProjectile@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsProjectile
_TEXT	ENDS
;	COMDAT ?IsFuncScreen@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsFuncScreen@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::IsFuncScreen, COMDAT

; 442  : 	virtual BOOL	IsFuncScreen( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFuncScreen@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsFuncScreen
_TEXT	ENDS
;	COMDAT ?IsPortal@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsPortal@CBaseEntity@@UAEHXZ PROC NEAR			; CBaseEntity::IsPortal, COMDAT

; 443  : 	virtual BOOL	IsPortal( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPortal@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsPortal
_TEXT	ENDS
;	COMDAT ?IsTank@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsTank@CBaseEntity@@UAEHXZ PROC NEAR			; CBaseEntity::IsTank, COMDAT

; 444  : 	virtual BOOL	IsTank( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTank@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsTank
_TEXT	ENDS
;	COMDAT ?IsMover@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsMover@CBaseEntity@@UAEHXZ PROC NEAR			; CBaseEntity::IsMover, COMDAT

; 445  : 	virtual BOOL	IsMover( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsMover
_TEXT	ENDS
;	COMDAT ?IsBreakable@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsBreakable@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::IsBreakable, COMDAT

; 446  : 	virtual BOOL	IsBreakable( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBreakable@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsBreakable
_TEXT	ENDS
;	COMDAT ?Think@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Think@CBaseEntity@@UAEXXZ PROC NEAR			; CBaseEntity::Think, COMDAT

; 458  : 	virtual void Think( void ) { if (m_pfnThink) (this->*m_pfnThink)(); };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1744], 0
	je	SHORT $L35006
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+1744]
$L35006:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Think@CBaseEntity@@UAEXXZ ENDP				; CBaseEntity::Think
_TEXT	ENDS
;	COMDAT ?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
_TEXT	SEGMENT
_this$ = -4
_pActivator$ = 8
_pCaller$ = 12
_useType$ = 16
_value$ = 20
?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z PROC NEAR	; CBaseEntity::Use, COMDAT

; 461  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 462  : 		if (m_pfnUse) (this->*m_pfnUse)( pActivator, pCaller, useType, value );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1752], 0
	je	SHORT $L35009
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _useType$[ebp]
	push	edx
	mov	eax, DWORD PTR _pCaller$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pActivator$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+1752]
$L35009:

; 463  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z ENDP	; CBaseEntity::Use
_TEXT	ENDS
PUBLIC	??CEHANDLE@@QAEPAVCBaseEntity@@XZ		; EHANDLE::operator->
;	COMDAT ?Touch@CBaseEntity@@UAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pOther$ = 8
?Touch@CBaseEntity@@UAEXPAV1@@Z PROC NEAR		; CBaseEntity::Touch, COMDAT

; 466  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 467  : 		if( m_pfnTouch )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1748], 0
	je	SHORT $L35012

; 468  : 			(this->*m_pfnTouch)( pOther );

	mov	ecx, DWORD PTR _pOther$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+1748]
$L35012:

; 469  : 
; 470  : 		// forward the blocked event to our parent, if any.
; 471  : 		if( m_hParent != NULL && !m_isChaining )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??BEHANDLE@@QAEHXZ			; EHANDLE::operator int
	test	eax, eax
	je	SHORT $L35013
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+1628]
	test	ecx, ecx
	jne	SHORT $L35013

; 472  : 			m_hParent->Touch( pOther );

	mov	edx, DWORD PTR _pOther$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??CEHANDLE@@QAEPAVCBaseEntity@@XZ	; EHANDLE::operator->
	mov	DWORD PTR -8+[ebp], eax
	mov	eax, DWORD PTR -8+[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR -8+[ebp]
	call	DWORD PTR [edx+280]
$L35013:

; 473  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Touch@CBaseEntity@@UAEXPAV1@@Z ENDP			; CBaseEntity::Touch
_TEXT	ENDS
;	COMDAT ??CEHANDLE@@QAEPAVCBaseEntity@@XZ
_TEXT	SEGMENT
_this$ = -4
??CEHANDLE@@QAEPAVCBaseEntity@@XZ PROC NEAR		; EHANDLE::operator->, COMDAT

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 	return (CBaseEntity *)GET_PRIVATE( Get( ) ); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get@EHANDLE@@QAEPAUedict_s@@XZ		; EHANDLE::Get
	push	eax
	call	?GET_PRIVATE@@YAPAXPAUedict_s@@@Z	; GET_PRIVATE
	add	esp, 4

; 92   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??CEHANDLE@@QAEPAVCBaseEntity@@XZ ENDP			; EHANDLE::operator->
_TEXT	ENDS
;	COMDAT ?Blocked@CBaseEntity@@UAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pOther$ = 8
?Blocked@CBaseEntity@@UAEXPAV1@@Z PROC NEAR		; CBaseEntity::Blocked, COMDAT

; 476  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 477  : 		if( m_pfnBlocked )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1756], 0
	je	SHORT $L35016

; 478  : 			(this->*m_pfnBlocked)( pOther );

	mov	ecx, DWORD PTR _pOther$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+1756]
$L35016:

; 479  : 
; 480  : 		// forward the blocked event to our parent, if any.
; 481  : 		if( m_hParent != NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??BEHANDLE@@QAEHXZ			; EHANDLE::operator int
	test	eax, eax
	je	SHORT $L35017

; 482  : 			m_hParent->Blocked( pOther );

	mov	eax, DWORD PTR _pOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??CEHANDLE@@QAEPAVCBaseEntity@@XZ	; EHANDLE::operator->
	mov	DWORD PTR -8+[ebp], eax
	mov	ecx, DWORD PTR -8+[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR -8+[ebp]
	call	DWORD PTR [edx+284]
$L35017:

; 483  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Blocked@CBaseEntity@@UAEXPAV1@@Z ENDP			; CBaseEntity::Blocked
_TEXT	ENDS
;	COMDAT ?Respawn@CBaseEntity@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?Respawn@CBaseEntity@@UAEPAV1@XZ PROC NEAR		; CBaseEntity::Respawn, COMDAT

; 513  : 	virtual CBaseEntity *Respawn( void ) { return NULL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Respawn@CBaseEntity@@UAEPAV1@XZ ENDP			; CBaseEntity::Respawn
_TEXT	ENDS
;	COMDAT ?UpdateOwner@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?UpdateOwner@CBaseEntity@@UAEXXZ PROC NEAR		; CBaseEntity::UpdateOwner, COMDAT

; 705  : 	virtual	void UpdateOwner( void ) { return; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateOwner@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::UpdateOwner
_TEXT	ENDS
;	COMDAT ?Center@CBaseEntity@@UAE?AVVector@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
$T40470 = -16
$T40471 = -28
?Center@CBaseEntity@@UAE?AVVector@@XZ PROC NEAR		; CBaseEntity::Center, COMDAT

; 714  : 	virtual Vector Center( ) { return (pev->absmax + pev->absmin) * 0.5; }; // center point of entity

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1056964608				; 3f000000H
	lea	eax, DWORD PTR $T40471[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 196				; 000000c4H
	push	edx
	lea	eax, DWORD PTR $T40470[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 208				; 000000d0H
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Center@CBaseEntity@@UAE?AVVector@@XZ ENDP		; CBaseEntity::Center
_TEXT	ENDS
;	COMDAT ?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
$T40474 = -16
?EyePosition@CBaseEntity@@UAE?AVVector@@XZ PROC NEAR	; CBaseEntity::EyePosition, COMDAT

; 715  : 	virtual Vector EyePosition( ) { return GetAbsOrigin() + pev->view_ofs; };			// position of eyes

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 372				; 00000174H
	push	ecx
	lea	edx, DWORD PTR $T40474[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	mov	ecx, eax
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?EyePosition@CBaseEntity@@UAE?AVVector@@XZ ENDP		; CBaseEntity::EyePosition
_TEXT	ENDS
;	COMDAT ?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
$T40477 = -16
?EarPosition@CBaseEntity@@UAE?AVVector@@XZ PROC NEAR	; CBaseEntity::EarPosition, COMDAT

; 716  : 	virtual Vector EarPosition( ) { return GetAbsOrigin() + pev->view_ofs; };			// position of ears

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 372				; 00000174H
	push	ecx
	lea	edx, DWORD PTR $T40477[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsOrigin@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsOrigin
	mov	ecx, eax
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?EarPosition@CBaseEntity@@UAE?AVVector@@XZ ENDP		; CBaseEntity::EarPosition
_TEXT	ENDS
;	COMDAT ?IsPointSized@CBaseEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsPointSized@CBaseEntity@@UBEHXZ PROC NEAR		; CBaseEntity::IsPointSized, COMDAT

; 718  : 	virtual BOOL IsPointSized() const { return (pev->size == g_vecZero) ? true : false; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET FLAT:?g_vecZero@@3VVector@@B	; g_vecZero
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 244				; 000000f4H
	call	??8Vector@@QBEHABV0@@Z			; Vector::operator==
	test	eax, eax
	setne	al
	and	eax, 255				; 000000ffH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPointSized@CBaseEntity@@UBEHXZ ENDP			; CBaseEntity::IsPointSized
_TEXT	ENDS
;	COMDAT ?GetToggleState@CBaseToggle@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetToggleState@CBaseToggle@@UAEHXZ PROC NEAR		; CBaseToggle::GetToggleState, COMDAT

; 978  : 	virtual int GetToggleState( void ) { return m_toggle_state; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1816]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetToggleState@CBaseToggle@@UAEHXZ ENDP		; CBaseToggle::GetToggleState
_TEXT	ENDS
;	COMDAT ?GetDelay@CBaseToggle@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4
?GetDelay@CBaseToggle@@UAEMXZ PROC NEAR			; CBaseToggle::GetDelay, COMDAT

; 979  : 	virtual float GetDelay( void ) { return m_flWait; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+1764]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDelay@CBaseToggle@@UAEMXZ ENDP			; CBaseToggle::GetDelay
_TEXT	ENDS
;	COMDAT ?BloodColor@CBaseMonster@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?BloodColor@CBaseMonster@@UAEHXZ PROC NEAR		; CBaseMonster::BloodColor, COMDAT

; 132  : 	virtual int	 BloodColor( void ) { return m_bloodColor; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+2328]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?BloodColor@CBaseMonster@@UAEHXZ ENDP			; CBaseMonster::BloodColor
_TEXT	ENDS
;	COMDAT ?MyMonsterPointer@CBaseMonster@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?MyMonsterPointer@CBaseMonster@@UAEPAV1@XZ PROC NEAR	; CBaseMonster::MyMonsterPointer, COMDAT

; 134  : 	virtual CBaseMonster *MyMonsterPointer( void ) { return this; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MyMonsterPointer@CBaseMonster@@UAEPAV1@XZ ENDP		; CBaseMonster::MyMonsterPointer
_TEXT	ENDS
;	COMDAT ?GetStoppedActivity@CBaseMonster@@UAE?AW4Activity@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetStoppedActivity@CBaseMonster@@UAE?AW4Activity@@XZ PROC NEAR ; CBaseMonster::GetStoppedActivity, COMDAT

; 175  : 		virtual Activity GetStoppedActivity( void ) { return ACT_IDLE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStoppedActivity@CBaseMonster@@UAE?AW4Activity@@XZ ENDP ; CBaseMonster::GetStoppedActivity
_TEXT	ENDS
;	COMDAT ?Stop@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Stop@CBaseMonster@@UAEXXZ PROC NEAR			; CBaseMonster::Stop, COMDAT

; 176  : 		virtual void Stop( void ) { m_IdealActivity = GetStoppedActivity(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+412]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2072], eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Stop@CBaseMonster@@UAEXXZ ENDP				; CBaseMonster::Stop
_TEXT	ENDS
;	COMDAT ?ScheduleChange@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?ScheduleChange@CBaseMonster@@UAEXXZ PROC NEAR		; CBaseMonster::ScheduleChange, COMDAT

; 203  : 		virtual void ScheduleChange( void ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ScheduleChange@CBaseMonster@@UAEXXZ ENDP		; CBaseMonster::ScheduleChange
_TEXT	ENDS
;	COMDAT ?CanPlaySentence@CBaseMonster@@UAEHH@Z
_TEXT	SEGMENT
_this$ = -4
?CanPlaySentence@CBaseMonster@@UAEHH@Z PROC NEAR	; CBaseMonster::CanPlaySentence, COMDAT

; 206  : 		virtual int CanPlaySentence( BOOL fDisregardState ) { return IsAlive(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+200]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?CanPlaySentence@CBaseMonster@@UAEHH@Z ENDP		; CBaseMonster::CanPlaySentence
_TEXT	ENDS
;	COMDAT ?SetYawSpeed@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?SetYawSpeed@CBaseMonster@@UAEXXZ PROC NEAR		; CBaseMonster::SetYawSpeed, COMDAT

; 241  : 		virtual void SetYawSpeed ( void ) { return; };// allows different yaw_speeds for each activity

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetYawSpeed@CBaseMonster@@UAEXXZ ENDP			; CBaseMonster::SetYawSpeed
_TEXT	ENDS
;	COMDAT ?FValidateCover@CBaseMonster@@UAEHABVVector@@@Z
_TEXT	SEGMENT
_this$ = -4
?FValidateCover@CBaseMonster@@UAEHABVVector@@@Z PROC NEAR ; CBaseMonster::FValidateCover, COMDAT

; 249  : 		virtual BOOL FValidateCover ( const Vector &vecCoverLocation ) { return TRUE; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?FValidateCover@CBaseMonster@@UAEHABVVector@@@Z ENDP	; CBaseMonster::FValidateCover
_TEXT	ENDS
PUBLIC	__real@4@4008c400000000000000
;	COMDAT __real@4@4008c400000000000000
; File z:\xashxtsrc\server\monsters\basemonster.h
CONST	SEGMENT
__real@4@4008c400000000000000 DD 044440000r	; 784
CONST	ENDS
;	COMDAT ?CoverRadius@CBaseMonster@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4
?CoverRadius@CBaseMonster@@UAEMXZ PROC NEAR		; CBaseMonster::CoverRadius, COMDAT

; 250  : 		virtual float CoverRadius( void ) { return 784; } // Default cover radius

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@4@4008c400000000000000
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CoverRadius@CBaseMonster@@UAEMXZ ENDP			; CBaseMonster::CoverRadius
_TEXT	ENDS
;	COMDAT ?CheckAmmo@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?CheckAmmo@CBaseMonster@@UAEXXZ PROC NEAR		; CBaseMonster::CheckAmmo, COMDAT

; 253  : 		virtual void CheckAmmo( void ) { return; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckAmmo@CBaseMonster@@UAEXXZ ENDP			; CBaseMonster::CheckAmmo
_TEXT	ENDS
;	COMDAT ?HearingSensitivity@CBaseMonster@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4
?HearingSensitivity@CBaseMonster@@UAEMXZ PROC NEAR	; CBaseMonster::HearingSensitivity, COMDAT

; 278  : 		virtual float HearingSensitivity( void ) { return 1.0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@4@3fff8000000000000000
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?HearingSensitivity@CBaseMonster@@UAEMXZ ENDP		; CBaseMonster::HearingSensitivity
_TEXT	ENDS
;	COMDAT ?PrescheduleThink@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?PrescheduleThink@CBaseMonster@@UAEXXZ PROC NEAR	; CBaseMonster::PrescheduleThink, COMDAT

; 298  : 		virtual void PrescheduleThink( void ) { return; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PrescheduleThink@CBaseMonster@@UAEXXZ ENDP		; CBaseMonster::PrescheduleThink
_TEXT	ENDS
;	COMDAT ?IsMoving@CBaseMonster@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsMoving@CBaseMonster@@UAEHXZ PROC NEAR		; CBaseMonster::IsMoving, COMDAT

; 328  : 	virtual int		IsMoving( void ) { return m_movementGoal != MOVEGOAL_NONE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+2228], 0
	setne	cl
	mov	eax, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMoving@CBaseMonster@@UAEHXZ ENDP			; CBaseMonster::IsMoving
_TEXT	ENDS
;	COMDAT ?AlertSound@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?AlertSound@CBaseMonster@@UAEXXZ PROC NEAR		; CBaseMonster::AlertSound, COMDAT

; 334  : 	virtual void AlertSound ( void ) { return; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AlertSound@CBaseMonster@@UAEXXZ ENDP			; CBaseMonster::AlertSound
_TEXT	ENDS
;	COMDAT ?IdleSound@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?IdleSound@CBaseMonster@@UAEXXZ PROC NEAR		; CBaseMonster::IdleSound, COMDAT

; 335  : 	virtual void IdleSound ( void ) { return; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IdleSound@CBaseMonster@@UAEXXZ ENDP			; CBaseMonster::IdleSound
_TEXT	ENDS
;	COMDAT ?PainSound@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?PainSound@CBaseMonster@@UAEXXZ PROC NEAR		; CBaseMonster::PainSound, COMDAT

; 336  : 	virtual void PainSound ( void ) { return; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PainSound@CBaseMonster@@UAEXXZ ENDP			; CBaseMonster::PainSound
_TEXT	ENDS
;	COMDAT ?StopFollowing@CBaseMonster@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4
?StopFollowing@CBaseMonster@@UAEXH@Z PROC NEAR		; CBaseMonster::StopFollowing, COMDAT

; 339  : 	virtual void StopFollowing( BOOL clearSchedule ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?StopFollowing@CBaseMonster@@UAEXH@Z ENDP		; CBaseMonster::StopFollowing
_TEXT	ENDS
;	COMDAT ?BodyTarget@CBasePlayer@@UAE?AVVector@@ABV2@@Z
_TEXT	SEGMENT
$T40522 = -16
$T40523 = -28
$T40524 = -40
___$ReturnUdt$ = 8
_this$ = -4
?BodyTarget@CBasePlayer@@UAE?AVVector@@ABV2@@Z PROC NEAR ; CBasePlayer::BodyTarget, COMDAT

; 242  : 	virtual Vector BodyTarget( const Vector &posSrc ) { return Center( ) + pev->view_ofs * RANDOM_FLOAT( 0.5, 1.1 ); };		// position to shoot at

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1066192077				; 3f8ccccdH
	push	1056964608				; 3f000000H
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+364
	add	esp, 4
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T40523[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 372				; 00000174H
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	edx, DWORD PTR $T40524[ebp]
	push	edx
	lea	eax, DWORD PTR $T40522[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+304]
	mov	ecx, eax
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?BodyTarget@CBasePlayer@@UAE?AVVector@@ABV2@@Z ENDP	; CBasePlayer::BodyTarget
_TEXT	ENDS
;	COMDAT ?StartSneaking@CBasePlayer@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?StartSneaking@CBasePlayer@@UAEXXZ PROC NEAR		; CBasePlayer::StartSneaking, COMDAT

; 243  : 	virtual void StartSneaking( void ) { m_tSneaking = gpGlobals->time - 1; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	fld	DWORD PTR [eax]
	fsub	DWORD PTR __real@4@3fff8000000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+2912]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?StartSneaking@CBasePlayer@@UAEXXZ ENDP			; CBasePlayer::StartSneaking
_TEXT	ENDS
PUBLIC	__real@4@4003f000000000000000
;	COMDAT __real@4@4003f000000000000000
; File z:\xashxtsrc\server\player.h
CONST	SEGMENT
__real@4@4003f000000000000000 DD 041f00000r	; 30
CONST	ENDS
;	COMDAT ?StopSneaking@CBasePlayer@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?StopSneaking@CBasePlayer@@UAEXXZ PROC NEAR		; CBasePlayer::StopSneaking, COMDAT

; 244  : 	virtual void StopSneaking( void ) { m_tSneaking = gpGlobals->time + 30; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	fld	DWORD PTR [eax]
	fadd	DWORD PTR __real@4@4003f000000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+2912]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?StopSneaking@CBasePlayer@@UAEXXZ ENDP			; CBasePlayer::StopSneaking
_TEXT	ENDS
;	COMDAT ?IsSneaking@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsSneaking@CBasePlayer@@UAEHXZ PROC NEAR		; CBasePlayer::IsSneaking, COMDAT

; 245  : 	virtual BOOL IsSneaking( void ) { return m_tSneaking <= gpGlobals->time; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?gpGlobals@@3PAUglobalvars_t@@A ; gpGlobals
	fld	DWORD PTR [eax+2912]
	fcomp	DWORD PTR [ecx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L40533
	mov	DWORD PTR -8+[ebp], 1
	jmp	SHORT $L40534
$L40533:
	mov	DWORD PTR -8+[ebp], 0
$L40534:
	mov	eax, DWORD PTR -8+[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSneaking@CBasePlayer@@UAEHXZ ENDP			; CBasePlayer::IsSneaking
_TEXT	ENDS
;	COMDAT ?IsAlive@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsAlive@CBasePlayer@@UAEHXZ PROC NEAR			; CBasePlayer::IsAlive, COMDAT

; 246  : 	virtual BOOL IsAlive( void ) { return (pev->deadflag == DEAD_NO) && pev->health > 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+368], 0
	jne	SHORT $L40537
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	fld	DWORD PTR [eax+352]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L40537
	mov	DWORD PTR -8+[ebp], 1
	jmp	SHORT $L40538
$L40537:
	mov	DWORD PTR -8+[ebp], 0
$L40538:
	mov	eax, DWORD PTR -8+[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAlive@CBasePlayer@@UAEHXZ ENDP			; CBasePlayer::IsAlive
_TEXT	ENDS
;	COMDAT ?ShouldFadeOnDeath@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?ShouldFadeOnDeath@CBasePlayer@@UAEHXZ PROC NEAR	; CBasePlayer::ShouldFadeOnDeath, COMDAT

; 247  : 	virtual BOOL ShouldFadeOnDeath( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ShouldFadeOnDeath@CBasePlayer@@UAEHXZ ENDP		; CBasePlayer::ShouldFadeOnDeath
_TEXT	ENDS
;	COMDAT ?IsPlayer@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsPlayer@CBasePlayer@@UAEHXZ PROC NEAR			; CBasePlayer::IsPlayer, COMDAT

; 248  : 	virtual BOOL IsPlayer( void ) { return TRUE; }		// Spectators should return FALSE for this, they aren't "players" as far as game logic is concerned

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@CBasePlayer@@UAEHXZ ENDP			; CBasePlayer::IsPlayer
_TEXT	ENDS
;	COMDAT ?IsNetClient@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsNetClient@CBasePlayer@@UAEHXZ PROC NEAR		; CBasePlayer::IsNetClient, COMDAT

; 250  : 	virtual BOOL IsNetClient( void ) { return TRUE; }		// Bots should return FALSE for this, they can't receive NET messages

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsNetClient@CBasePlayer@@UAEHXZ ENDP			; CBasePlayer::IsNetClient
_TEXT	ENDS
PUBLIC	?ObjectCaps@CBaseEntity@@UAEHXZ			; CBaseEntity::ObjectCaps
;	COMDAT ?ObjectCaps@CBasePlayer@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?ObjectCaps@CBasePlayer@@UAEHXZ PROC NEAR		; CBasePlayer::ObjectCaps, COMDAT

; 267  : 	virtual int	ObjectCaps( void ) { return CBaseMonster :: ObjectCaps() & ~FCAP_ACROSS_TRANSITION; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ObjectCaps@CBaseEntity@@UAEHXZ		; CBaseEntity::ObjectCaps
	and	al, -3					; fffffffdH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ObjectCaps@CBasePlayer@@UAEHXZ ENDP			; CBasePlayer::ObjectCaps
_TEXT	ENDS
;	COMDAT ?ObjectCaps@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?ObjectCaps@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::ObjectCaps, COMDAT

; 364  : 	virtual int	ObjectCaps( void ) { return FCAP_ACROSS_TRANSITION; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 2
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ObjectCaps@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::ObjectCaps
_TEXT	ENDS
PUBLIC	?Illumination@CBaseEntity@@UAEHXZ		; CBaseEntity::Illumination
PUBLIC	??0WayPoint_t@@QAE@XZ				; WayPoint_t::WayPoint_t
PUBLIC	?BodyTarget@CBaseMonster@@UAE?AVVector@@ABV2@@Z	; CBaseMonster::BodyTarget
PUBLIC	?DeathSound@CBaseMonster@@UAEXXZ		; CBaseMonster::DeathSound
PUBLIC	??_7CBaseMonster@@6B@				; CBaseMonster::`vftable'
PUBLIC	??0CBaseToggle@@QAE@XZ				; CBaseToggle::CBaseToggle
PUBLIC	??1CBaseToggle@@QAE@XZ				; CBaseToggle::~CBaseToggle
PUBLIC	?Spawn@CBaseEntity@@UAEXXZ			; CBaseEntity::Spawn
PUBLIC	?Precache@CBaseEntity@@UAEXXZ			; CBaseEntity::Precache
PUBLIC	?AddPoints@CBaseEntity@@UAEXHH@Z		; CBaseEntity::AddPoints
PUBLIC	?AddPointsToTeam@CBaseEntity@@UAEXHH@Z		; CBaseEntity::AddPointsToTeam
PUBLIC	?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z ; CBaseEntity::AddPlayerItem
PUBLIC	?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z ; CBaseEntity::RemovePlayerItem
PUBLIC	?GiveAmmo@CBaseEntity@@UAEHHPADH@Z		; CBaseEntity::GiveAmmo
PUBLIC	?TransferReset@CBaseEntity@@UAEXXZ		; CBaseEntity::TransferReset
PUBLIC	?StartSneaking@CBaseEntity@@UAEXXZ		; CBaseEntity::StartSneaking
PUBLIC	?StopSneaking@CBaseEntity@@UAEXXZ		; CBaseEntity::StopSneaking
PUBLIC	?IsSneaking@CBaseEntity@@UAEHXZ			; CBaseEntity::IsSneaking
PUBLIC	?IsPlayer@CBaseEntity@@UAEHXZ			; CBaseEntity::IsPlayer
PUBLIC	?IsNetClient@CBaseEntity@@UAEHXZ		; CBaseEntity::IsNetClient
PUBLIC	?Classify@CBaseMonster@@UAEHXZ			; CBaseMonster::Classify
PUBLIC	?IsAlive@CBaseMonster@@UAEHXZ			; CBaseMonster::IsAlive
PUBLIC	?TeamID@CBaseEntity@@UAEPBDXZ			; CBaseEntity::TeamID
EXTRN	?FBecomeProne@CBaseMonster@@UAEHXZ:NEAR		; CBaseMonster::FBecomeProne
EXTRN	?BarnacleVictimBitten@CBaseMonster@@UAEXPAUentvars_s@@@Z:NEAR ; CBaseMonster::BarnacleVictimBitten
EXTRN	?BarnacleVictimReleased@CBaseMonster@@UAEXXZ:NEAR ; CBaseMonster::BarnacleVictimReleased
EXTRN	?TraceAttack@CBaseMonster@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z:NEAR ; CBaseMonster::TraceAttack
EXTRN	?Killed@CBaseMonster@@UAEXPAUentvars_s@@H@Z:NEAR ; CBaseMonster::Killed
EXTRN	?GetGunPosition@CBaseMonster@@UAE?AVVector@@XZ:NEAR ; CBaseMonster::GetGunPosition
EXTRN	?TakeHealth@CBaseMonster@@UAEHMH@Z:NEAR		; CBaseMonster::TakeHealth
EXTRN	?TakeDamage@CBaseMonster@@UAEHPAUentvars_s@@0MH@Z:NEAR ; CBaseMonster::TakeDamage
EXTRN	?GetDataDescMap@CBaseMonster@@UAEPAUdatamap_s@@XZ:NEAR ; CBaseMonster::GetDataDescMap
EXTRN	?Restore@CBaseMonster@@UAEHAAVCRestore@@@Z:NEAR	; CBaseMonster::Restore
EXTRN	?ShouldFadeOnDeath@CBaseMonster@@UAEHXZ:NEAR	; CBaseMonster::ShouldFadeOnDeath
;	COMDAT ??_7CBaseMonster@@6B@
CONST	SEGMENT
??_7CBaseMonster@@6B@ DD FLAT:?GetDataDescMap@CBaseMonster@@UAEPAUdatamap_s@@XZ ; CBaseMonster::`vftable'
	DD	FLAT:?Spawn@CBaseEntity@@UAEXXZ
	DD	FLAT:?Precache@CBaseEntity@@UAEXXZ
	DD	FLAT:?KeyValue@CBaseMonster@@UAEXPAUKeyValueData_s@@@Z
	DD	FLAT:?Save@CBaseEntity@@UAEHAAVCSave@@@Z
	DD	FLAT:?Restore@CBaseMonster@@UAEHAAVCRestore@@@Z
	DD	FLAT:?ObjectCaps@CBaseEntity@@UAEHXZ
	DD	FLAT:?Activate@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnChangeLevel@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnTeleport@CBaseEntity@@UAEXXZ
	DD	FLAT:?PortalSleep@CBaseEntity@@UAEXM@Z
	DD	FLAT:?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
	DD	FLAT:?GetPosition@CBaseEntity@@UAEMXZ
	DD	FLAT:?OnChangeParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnClearParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnRemove@CBaseEntity@@UAEXXZ
	DD	FLAT:?SetObjectCollisionBox@CBaseEntity@@UAEXXZ
	DD	FLAT:?Classify@CBaseMonster@@UAEHXZ
	DD	FLAT:?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
	DD	FLAT:?IsRigidBody@CBaseEntity@@UAEHXZ
	DD	FLAT:?SetNextThink@CBaseEntity@@UAEXM@Z
	DD	FLAT:?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
	DD	FLAT:?GetState@CBaseToggle@@UAE?AW4STATE@@XZ
	DD	FLAT:?TraceAttack@CBaseMonster@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?TakeDamage@CBaseMonster@@UAEHPAUentvars_s@@0MH@Z
	DD	FLAT:?TakeHealth@CBaseMonster@@UAEHMH@Z
	DD	FLAT:?TakeArmor@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?Killed@CBaseMonster@@UAEXPAUentvars_s@@H@Z
	DD	FLAT:?BloodColor@CBaseMonster@@UAEHXZ
	DD	FLAT:?TraceBleed@CBaseEntity@@UAEXMVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?MyMonsterPointer@CBaseMonster@@UAEPAV1@XZ
	DD	FLAT:?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
	DD	FLAT:?GetVehicleDriver@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?GetToggleState@CBaseToggle@@UAEHXZ
	DD	FLAT:?AddPoints@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPointsToTeam@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?GiveAmmo@CBaseEntity@@UAEHHPADH@Z
	DD	FLAT:?GetDelay@CBaseToggle@@UAEMXZ
	DD	FLAT:?IsMoving@CBaseMonster@@UAEHXZ
	DD	FLAT:?OverrideReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?TransferReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?DamageDecal@CBaseMonster@@UAEHH@Z
	DD	FLAT:?SetToggleState@CBaseEntity@@UAEXH@Z
	DD	FLAT:?StartSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?StopSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnControls@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?IsSneaking@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsAlive@CBaseMonster@@UAEHXZ
	DD	FLAT:?IsBSPModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsCustomModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?ReflectGauss@CBaseEntity@@UAEHXZ
	DD	FLAT:?HasTarget@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsInWorld@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsPlayer@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsNetClient@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMonster@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPushable@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsProjectile@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsFuncScreen@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPortal@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsTank@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMover@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBreakable@CBaseEntity@@UAEHXZ
	DD	FLAT:?TeamID@CBaseEntity@@UAEPBDXZ
	DD	FLAT:?GetNextTarget@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?Think@CBaseEntity@@UAEXXZ
	DD	FLAT:?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
	DD	FLAT:?Touch@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?Blocked@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?MoveDone@CBaseToggle@@UAEXXZ
	DD	FLAT:?Respawn@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?UpdateOwner@CBaseEntity@@UAEXXZ
	DD	FLAT:?FBecomeProne@CBaseMonster@@UAEHXZ
	DD	FLAT:?Center@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?BodyTarget@CBaseMonster@@UAE?AVVector@@ABV2@@Z
	DD	FLAT:?IsPointSized@CBaseEntity@@UBEHXZ
	DD	FLAT:?Illumination@CBaseEntity@@UAEHXZ
	DD	FLAT:?FVisible@CBaseEntity@@UAEHABVVector@@@Z
	DD	FLAT:?FVisible@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?ShouldCollide@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?HandleAnimEvent@CBaseMonster@@UAEXPAUMonsterEvent_t@@@Z
	DD	FLAT:?Look@CBaseMonster@@UAEXH@Z
	DD	FLAT:?RunAI@CBaseMonster@@UAEXXZ
	DD	FLAT:?ShouldFadeOnDeath@CBaseMonster@@UAEHXZ
	DD	FLAT:?ChangeYaw@CBaseMonster@@UAEMH@Z
	DD	FLAT:?MonsterThink@CBaseMonster@@UAEXXZ
	DD	FLAT:?IRelationship@CBaseMonster@@UAEHPAVCBaseEntity@@@Z
	DD	FLAT:?MonsterInit@CBaseMonster@@UAEXXZ
	DD	FLAT:?MonsterInitDead@CBaseMonster@@UAEXXZ
	DD	FLAT:?BecomeDead@CBaseMonster@@UAEXXZ
	DD	FLAT:?StartMonster@CBaseMonster@@UAEXXZ
	DD	FLAT:?BestVisibleEnemy@CBaseMonster@@UAEPAVCBaseEntity@@XZ
	DD	FLAT:?FInViewCone@CBaseMonster@@UAEHPAVVector@@@Z
	DD	FLAT:?FInViewCone@CBaseMonster@@UAEHPAVCBaseEntity@@@Z
	DD	FLAT:?CheckLocalMove@CBaseMonster@@UAEHABVVector@@0PAVCBaseEntity@@PAM@Z
	DD	FLAT:?Move@CBaseMonster@@UAEXM@Z
	DD	FLAT:?MoveExecute@CBaseMonster@@UAEXPAVCBaseEntity@@ABVVector@@M@Z
	DD	FLAT:?ShouldAdvanceRoute@CBaseMonster@@UAEHM@Z
	DD	FLAT:?GetStoppedActivity@CBaseMonster@@UAE?AW4Activity@@XZ
	DD	FLAT:?Stop@CBaseMonster@@UAEXXZ
	DD	FLAT:?CheckRangeAttack1@CBaseMonster@@UAEHMM@Z
	DD	FLAT:?CheckRangeAttack2@CBaseMonster@@UAEHMM@Z
	DD	FLAT:?CheckMeleeAttack1@CBaseMonster@@UAEHMM@Z
	DD	FLAT:?CheckMeleeAttack2@CBaseMonster@@UAEHMM@Z
	DD	FLAT:?ScheduleFromName@CBaseMonster@@UAEPAUSchedule_t@@PBD@Z
	DD	FLAT:?StartTask@CBaseMonster@@UAEXPAUTask_t@@@Z
	DD	FLAT:?RunTask@CBaseMonster@@UAEXPAUTask_t@@@Z
	DD	FLAT:?GetScheduleOfType@CBaseMonster@@UAEPAUSchedule_t@@H@Z
	DD	FLAT:?GetSchedule@CBaseMonster@@UAEPAUSchedule_t@@XZ
	DD	FLAT:?ScheduleChange@CBaseMonster@@UAEXXZ
	DD	FLAT:?CanPlaySequence@CBaseMonster@@UAEHHH@Z
	DD	FLAT:?CanPlaySentence@CBaseMonster@@UAEHH@Z
	DD	FLAT:?PlaySentence@CBaseMonster@@UAEXPBDMMM@Z
	DD	FLAT:?PlayScriptedSentence@CBaseMonster@@UAEXPBDMMMHPAVCBaseEntity@@@Z
	DD	FLAT:?SentenceStop@CBaseMonster@@UAEXXZ
	DD	FLAT:?GetIdealState@CBaseMonster@@UAE?AW4MONSTERSTATE@@XZ
	DD	FLAT:?SetActivity@CBaseMonster@@UAEXW4Activity@@@Z
	DD	FLAT:?ReportAIState@CBaseMonster@@UAEXXZ
	DD	FLAT:?CheckEnemy@CBaseMonster@@UAEHPAVCBaseEntity@@@Z
	DD	FLAT:?FTriangulate@CBaseMonster@@UAEHABVVector@@0MPAVCBaseEntity@@PAV2@@Z
	DD	FLAT:?SetYawSpeed@CBaseMonster@@UAEXXZ
	DD	FLAT:?BuildNearestRoute@CBaseMonster@@UAEHVVector@@0MM@Z
	DD	FLAT:?FindCover@CBaseMonster@@UAEHVVector@@0MM@Z
	DD	FLAT:?FValidateCover@CBaseMonster@@UAEHABVVector@@@Z
	DD	FLAT:?CoverRadius@CBaseMonster@@UAEMXZ
	DD	FLAT:?FCanCheckAttacks@CBaseMonster@@UAEHXZ
	DD	FLAT:?CheckAmmo@CBaseMonster@@UAEXXZ
	DD	FLAT:?IgnoreConditions@CBaseMonster@@UAEHXZ
	DD	FLAT:?FValidateHintType@CBaseMonster@@UAEHF@Z
	DD	FLAT:?FCanActiveIdle@CBaseMonster@@UAEHXZ
	DD	FLAT:?ISoundMask@CBaseMonster@@UAEHXZ
	DD	FLAT:?PBestSound@CBaseMonster@@UAEPAVCSound@@XZ
	DD	FLAT:?PBestScent@CBaseMonster@@UAEPAVCSound@@XZ
	DD	FLAT:?HearingSensitivity@CBaseMonster@@UAEMXZ
	DD	FLAT:?BarnacleVictimBitten@CBaseMonster@@UAEXPAUentvars_s@@@Z
	DD	FLAT:?BarnacleVictimReleased@CBaseMonster@@UAEXXZ
	DD	FLAT:?PrescheduleThink@CBaseMonster@@UAEXXZ
	DD	FLAT:?GetDeathActivity@CBaseMonster@@UAE?AW4Activity@@XZ
	DD	FLAT:?GibMonster@CBaseMonster@@UAEXXZ
	DD	FLAT:?HasHumanGibs@CBaseMonster@@UAEHXZ
	DD	FLAT:?HasAlienGibs@CBaseMonster@@UAEHXZ
	DD	FLAT:?FadeMonster@CBaseMonster@@UAEXXZ
	DD	FLAT:?GetGunPosition@CBaseMonster@@UAE?AVVector@@XZ
	DD	FLAT:?DeathSound@CBaseMonster@@UAEXXZ
	DD	FLAT:?AlertSound@CBaseMonster@@UAEXXZ
	DD	FLAT:?IdleSound@CBaseMonster@@UAEXXZ
	DD	FLAT:?PainSound@CBaseMonster@@UAEXXZ
	DD	FLAT:?StepSound@CBaseMonster@@UAEXXZ
	DD	FLAT:?StopFollowing@CBaseMonster@@UAEXH@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CBaseMonster@@QAE@XZ DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseMonster@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
__unwindtable$??0CBaseMonster@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseMonster@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT ??0CBaseMonster@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??0CBaseMonster@@QAE@XZ PROC NEAR			; CBaseMonster::CBaseMonster, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseMonster@@QAE@XZ
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseToggle@@QAE@XZ			; CBaseToggle::CBaseToggle
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	OFFSET FLAT:??0Vector@@QAE@XZ		; Vector::Vector
	push	4
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2008				; 000007d8H
	push	eax
	call	??_H@YGXPAXIHP6EX0@Z@Z			; `vector constructor iterator'
	push	OFFSET FLAT:??0WayPoint_t@@QAE@XZ	; WayPoint_t::WayPoint_t
	push	8
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2100				; 00000834H
	push	ecx
	call	??_H@YGXPAXIHP6EX0@Z@Z			; `vector constructor iterator'
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2240				; 000008c0H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2264				; 000008d8H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2288				; 000008f0H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2364				; 0000093cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET FLAT:??_7CBaseMonster@@6B@ ; CBaseMonster::`vftable'
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseMonster@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseToggle@@QAE@XZ			; CBaseToggle::~CBaseToggle
	ret	0
__ehhandler$??0CBaseMonster@@QAE@XZ:
	mov	eax, OFFSET FLAT:__ehfuncinfo$??0CBaseMonster@@QAE@XZ
	jmp	___CxxFrameHandler
text$x	ENDS
??0CBaseMonster@@QAE@XZ ENDP				; CBaseMonster::CBaseMonster
;	COMDAT ?Spawn@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Spawn@CBaseEntity@@UAEXXZ PROC NEAR			; CBaseEntity::Spawn, COMDAT

; 325  : 	virtual void	Spawn( void ) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Spawn@CBaseEntity@@UAEXXZ ENDP				; CBaseEntity::Spawn
_TEXT	ENDS
;	COMDAT ?Precache@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Precache@CBaseEntity@@UAEXXZ PROC NEAR			; CBaseEntity::Precache, COMDAT

; 326  : 	virtual void	Precache( void ) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Precache@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::Precache
_TEXT	ENDS
;	COMDAT ?AddPoints@CBaseEntity@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4
?AddPoints@CBaseEntity@@UAEXHH@Z PROC NEAR		; CBaseEntity::AddPoints, COMDAT

; 415  : 	virtual void	AddPoints( int score, BOOL bAllowNegativeScore ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?AddPoints@CBaseEntity@@UAEXHH@Z ENDP			; CBaseEntity::AddPoints
_TEXT	ENDS
;	COMDAT ?AddPointsToTeam@CBaseEntity@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4
?AddPointsToTeam@CBaseEntity@@UAEXHH@Z PROC NEAR	; CBaseEntity::AddPointsToTeam, COMDAT

; 416  : 	virtual void	AddPointsToTeam( int score, BOOL bAllowNegativeScore ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?AddPointsToTeam@CBaseEntity@@UAEXHH@Z ENDP		; CBaseEntity::AddPointsToTeam
_TEXT	ENDS
;	COMDAT ?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
_TEXT	SEGMENT
_this$ = -4
?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z PROC NEAR ; CBaseEntity::AddPlayerItem, COMDAT

; 417  : 	virtual BOOL	AddPlayerItem( CBasePlayerItem *pItem ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z ENDP ; CBaseEntity::AddPlayerItem
_TEXT	ENDS
;	COMDAT ?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
_TEXT	SEGMENT
_this$ = -4
?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z PROC NEAR ; CBaseEntity::RemovePlayerItem, COMDAT

; 418  : 	virtual BOOL	RemovePlayerItem( CBasePlayerItem *pItem ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z ENDP ; CBaseEntity::RemovePlayerItem
_TEXT	ENDS
;	COMDAT ?GiveAmmo@CBaseEntity@@UAEHHPADH@Z
_TEXT	SEGMENT
_this$ = -4
?GiveAmmo@CBaseEntity@@UAEHHPADH@Z PROC NEAR		; CBaseEntity::GiveAmmo, COMDAT

; 419  : 	virtual int 	GiveAmmo( int iAmount, char *szName, int iMax ) { return -1; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GiveAmmo@CBaseEntity@@UAEHHPADH@Z ENDP			; CBaseEntity::GiveAmmo
_TEXT	ENDS
;	COMDAT ?TransferReset@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?TransferReset@CBaseEntity@@UAEXXZ PROC NEAR		; CBaseEntity::TransferReset, COMDAT

; 423  : 	virtual void	TransferReset( void ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TransferReset@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::TransferReset
_TEXT	ENDS
;	COMDAT ?StartSneaking@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?StartSneaking@CBaseEntity@@UAEXXZ PROC NEAR		; CBaseEntity::StartSneaking, COMDAT

; 427  : 	virtual void	StartSneaking( void ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?StartSneaking@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::StartSneaking
_TEXT	ENDS
;	COMDAT ?StopSneaking@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?StopSneaking@CBaseEntity@@UAEXXZ PROC NEAR		; CBaseEntity::StopSneaking, COMDAT

; 428  : 	virtual void	StopSneaking( void ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?StopSneaking@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::StopSneaking
_TEXT	ENDS
;	COMDAT ?IsSneaking@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsSneaking@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::IsSneaking, COMDAT

; 430  : 	virtual BOOL	IsSneaking( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSneaking@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsSneaking
_TEXT	ENDS
;	COMDAT ?IsPlayer@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsPlayer@CBaseEntity@@UAEHXZ PROC NEAR			; CBaseEntity::IsPlayer, COMDAT

; 437  : 	virtual BOOL	IsPlayer( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsPlayer
_TEXT	ENDS
;	COMDAT ?IsNetClient@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsNetClient@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::IsNetClient, COMDAT

; 438  : 	virtual BOOL	IsNetClient( void ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsNetClient@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsNetClient
_TEXT	ENDS
PUBLIC	??_C@_00A@?$AA@					; `string'
;	COMDAT ??_C@_00A@?$AA@
; File z:\xashxtsrc\server\cbase.h
CONST	SEGMENT
??_C@_00A@?$AA@ DB 00H					; `string'
CONST	ENDS
;	COMDAT ?TeamID@CBaseEntity@@UAEPBDXZ
_TEXT	SEGMENT
_this$ = -4
?TeamID@CBaseEntity@@UAEPBDXZ PROC NEAR			; CBaseEntity::TeamID, COMDAT

; 447  : 	virtual const char	*TeamID( void ) { return ""; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET FLAT:??_C@_00A@?$AA@	; `string'
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TeamID@CBaseEntity@@UAEPBDXZ ENDP			; CBaseEntity::TeamID
_TEXT	ENDS
;	COMDAT ?Illumination@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?Illumination@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::Illumination, COMDAT

; 720  : 	virtual int Illumination( ) { return GETENTITYILLUM( ENT( pev ) ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ENT@@YAPAUedict_s@@PBUentvars_s@@@Z	; ENT
	add	esp, 4
	push	eax
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+60
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Illumination@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::Illumination
_TEXT	ENDS
;	COMDAT ?Classify@CBaseMonster@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?Classify@CBaseMonster@@UAEHXZ PROC NEAR		; CBaseMonster::Classify, COMDAT

; 130  : 	virtual int	Classify( void ) { return m_iClass ? m_iClass : CLASS_NONE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+2388], 0
	je	SHORT $L40590
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+2388]
	mov	DWORD PTR -8+[ebp], edx
	jmp	SHORT $L40591
$L40590:
	mov	DWORD PTR -8+[ebp], 0
$L40591:
	mov	eax, DWORD PTR -8+[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Classify@CBaseMonster@@UAEHXZ ENDP			; CBaseMonster::Classify
_TEXT	ENDS
;	COMDAT ?IsAlive@CBaseMonster@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsAlive@CBaseMonster@@UAEHXZ PROC NEAR			; CBaseMonster::IsAlive, COMDAT

; 139  : 	virtual BOOL	IsAlive( void ) { return (pev->deadflag != DEAD_DEAD); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	DWORD PTR [ecx+368], 2
	setne	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAlive@CBaseMonster@@UAEHXZ ENDP			; CBaseMonster::IsAlive
_TEXT	ENDS
;	COMDAT ?BodyTarget@CBaseMonster@@UAE?AVVector@@ABV2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
$T40596 = -16
$T40597 = -28
$T40598 = -40
$T40599 = -52
$T40600 = -64
?BodyTarget@CBaseMonster@@UAE?AVVector@@ABV2@@Z PROC NEAR ; CBaseMonster::BodyTarget, COMDAT

; 318  : 	virtual Vector BodyTarget( const Vector &posSrc ) { return Center( ) * 0.75 + EyePosition() * 0.25; };		// position to shoot at

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1048576000				; 3e800000H
	lea	eax, DWORD PTR $T40599[ebp]
	push	eax
	lea	ecx, DWORD PTR $T40598[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR [eax+308]
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T40600[ebp]
	push	ecx
	push	1061158912				; 3f400000H
	lea	edx, DWORD PTR $T40597[ebp]
	push	edx
	lea	eax, DWORD PTR $T40596[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+304]
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	mov	ecx, eax
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?BodyTarget@CBaseMonster@@UAE?AVVector@@ABV2@@Z ENDP	; CBaseMonster::BodyTarget
_TEXT	ENDS
;	COMDAT ?DeathSound@CBaseMonster@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?DeathSound@CBaseMonster@@UAEXXZ PROC NEAR		; CBaseMonster::DeathSound, COMDAT

; 333  : 	virtual void DeathSound ( void ) { return; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DeathSound@CBaseMonster@@UAEXXZ ENDP			; CBaseMonster::DeathSound
_TEXT	ENDS
;	COMDAT ??1CBaseMonster@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CBaseMonster@@QAE@XZ PROC NEAR			; CBaseMonster::~CBaseMonster, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseToggle@@QAE@XZ			; CBaseToggle::~CBaseToggle
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseMonster@@QAE@XZ ENDP				; CBaseMonster::~CBaseMonster
_TEXT	ENDS
PUBLIC	?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z	; CBaseEntity::BodyTarget
PUBLIC	?HandleAnimEvent@CBaseAnimating@@UAEXPAUMonsterEvent_t@@@Z ; CBaseAnimating::HandleAnimEvent
PUBLIC	??0CBaseAnimating@@QAE@XZ			; CBaseAnimating::CBaseAnimating
PUBLIC	??1CBaseAnimating@@QAE@XZ			; CBaseAnimating::~CBaseAnimating
PUBLIC	??_7CBaseToggle@@6B@				; CBaseToggle::`vftable'
PUBLIC	?Classify@CBaseEntity@@UAEHXZ			; CBaseEntity::Classify
PUBLIC	?BloodColor@CBaseEntity@@UAEHXZ			; CBaseEntity::BloodColor
PUBLIC	?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ ; CBaseEntity::MyMonsterPointer
PUBLIC	?IsMoving@CBaseEntity@@UAEHXZ			; CBaseEntity::IsMoving
PUBLIC	?IsAlive@CBaseEntity@@UAEHXZ			; CBaseEntity::IsAlive
PUBLIC	?FBecomeProne@CBaseEntity@@UAEHXZ		; CBaseEntity::FBecomeProne
EXTRN	?KeyValue@CBaseToggle@@UAEXPAUKeyValueData_s@@@Z:NEAR ; CBaseToggle::KeyValue
EXTRN	?Restore@CBaseToggle@@UAEHAAVCRestore@@@Z:NEAR	; CBaseToggle::Restore
EXTRN	?GetDataDescMap@CBaseToggle@@UAEPAUdatamap_s@@XZ:NEAR ; CBaseToggle::GetDataDescMap
EXTRN	?TraceAttack@CBaseEntity@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z:NEAR ; CBaseEntity::TraceAttack
EXTRN	?TakeDamage@CBaseEntity@@UAEHPAUentvars_s@@0MH@Z:NEAR ; CBaseEntity::TakeDamage
EXTRN	?TakeHealth@CBaseEntity@@UAEHMH@Z:NEAR		; CBaseEntity::TakeHealth
EXTRN	?Killed@CBaseEntity@@UAEXPAUentvars_s@@H@Z:NEAR	; CBaseEntity::Killed
EXTRN	?DamageDecal@CBaseEntity@@UAEHH@Z:NEAR		; CBaseEntity::DamageDecal
;	COMDAT ??_7CBaseToggle@@6B@
CONST	SEGMENT
??_7CBaseToggle@@6B@ DD FLAT:?GetDataDescMap@CBaseToggle@@UAEPAUdatamap_s@@XZ ; CBaseToggle::`vftable'
	DD	FLAT:?Spawn@CBaseEntity@@UAEXXZ
	DD	FLAT:?Precache@CBaseEntity@@UAEXXZ
	DD	FLAT:?KeyValue@CBaseToggle@@UAEXPAUKeyValueData_s@@@Z
	DD	FLAT:?Save@CBaseEntity@@UAEHAAVCSave@@@Z
	DD	FLAT:?Restore@CBaseToggle@@UAEHAAVCRestore@@@Z
	DD	FLAT:?ObjectCaps@CBaseEntity@@UAEHXZ
	DD	FLAT:?Activate@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnChangeLevel@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnTeleport@CBaseEntity@@UAEXXZ
	DD	FLAT:?PortalSleep@CBaseEntity@@UAEXM@Z
	DD	FLAT:?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
	DD	FLAT:?GetPosition@CBaseEntity@@UAEMXZ
	DD	FLAT:?OnChangeParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnClearParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnRemove@CBaseEntity@@UAEXXZ
	DD	FLAT:?SetObjectCollisionBox@CBaseEntity@@UAEXXZ
	DD	FLAT:?Classify@CBaseEntity@@UAEHXZ
	DD	FLAT:?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
	DD	FLAT:?IsRigidBody@CBaseEntity@@UAEHXZ
	DD	FLAT:?SetNextThink@CBaseEntity@@UAEXM@Z
	DD	FLAT:?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
	DD	FLAT:?GetState@CBaseToggle@@UAE?AW4STATE@@XZ
	DD	FLAT:?TraceAttack@CBaseEntity@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?TakeDamage@CBaseEntity@@UAEHPAUentvars_s@@0MH@Z
	DD	FLAT:?TakeHealth@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?TakeArmor@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?Killed@CBaseEntity@@UAEXPAUentvars_s@@H@Z
	DD	FLAT:?BloodColor@CBaseEntity@@UAEHXZ
	DD	FLAT:?TraceBleed@CBaseEntity@@UAEXMVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ
	DD	FLAT:?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
	DD	FLAT:?GetVehicleDriver@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?GetToggleState@CBaseToggle@@UAEHXZ
	DD	FLAT:?AddPoints@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPointsToTeam@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?GiveAmmo@CBaseEntity@@UAEHHPADH@Z
	DD	FLAT:?GetDelay@CBaseToggle@@UAEMXZ
	DD	FLAT:?IsMoving@CBaseEntity@@UAEHXZ
	DD	FLAT:?OverrideReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?TransferReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?DamageDecal@CBaseEntity@@UAEHH@Z
	DD	FLAT:?SetToggleState@CBaseEntity@@UAEXH@Z
	DD	FLAT:?StartSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?StopSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnControls@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?IsSneaking@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsAlive@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBSPModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsCustomModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?ReflectGauss@CBaseEntity@@UAEHXZ
	DD	FLAT:?HasTarget@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsInWorld@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsPlayer@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsNetClient@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMonster@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPushable@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsProjectile@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsFuncScreen@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPortal@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsTank@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMover@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBreakable@CBaseEntity@@UAEHXZ
	DD	FLAT:?TeamID@CBaseEntity@@UAEPBDXZ
	DD	FLAT:?GetNextTarget@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?Think@CBaseEntity@@UAEXXZ
	DD	FLAT:?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
	DD	FLAT:?Touch@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?Blocked@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?MoveDone@CBaseToggle@@UAEXXZ
	DD	FLAT:?Respawn@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?UpdateOwner@CBaseEntity@@UAEXXZ
	DD	FLAT:?FBecomeProne@CBaseEntity@@UAEHXZ
	DD	FLAT:?Center@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z
	DD	FLAT:?IsPointSized@CBaseEntity@@UBEHXZ
	DD	FLAT:?Illumination@CBaseEntity@@UAEHXZ
	DD	FLAT:?FVisible@CBaseEntity@@UAEHABVVector@@@Z
	DD	FLAT:?FVisible@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?ShouldCollide@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?HandleAnimEvent@CBaseAnimating@@UAEXPAUMonsterEvent_t@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CBaseToggle@@QAE@XZ DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseToggle@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
__unwindtable$??0CBaseToggle@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseToggle@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT ??0CBaseToggle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??0CBaseToggle@@QAE@XZ PROC NEAR			; CBaseToggle::CBaseToggle, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseToggle@@QAE@XZ
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseAnimating@@QAE@XZ		; CBaseAnimating::CBaseAnimating
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1840				; 00000730H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1852				; 0000073cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1864				; 00000748H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1876				; 00000754H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1888				; 00000760H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1912				; 00000778H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1924				; 00000784H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1936				; 00000790H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CBaseToggle@@6B@ ; CBaseToggle::`vftable'
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseToggle@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseAnimating@@QAE@XZ		; CBaseAnimating::~CBaseAnimating
	ret	0
__ehhandler$??0CBaseToggle@@QAE@XZ:
	mov	eax, OFFSET FLAT:__ehfuncinfo$??0CBaseToggle@@QAE@XZ
	jmp	___CxxFrameHandler
text$x	ENDS
??0CBaseToggle@@QAE@XZ ENDP				; CBaseToggle::CBaseToggle
;	COMDAT ?Classify@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?Classify@CBaseEntity@@UAEHXZ PROC NEAR			; CBaseEntity::Classify, COMDAT

; 385  : 	virtual int Classify ( void ) { return CLASS_NONE; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Classify@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::Classify
_TEXT	ENDS
;	COMDAT ?BloodColor@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?BloodColor@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::BloodColor, COMDAT

; 408  : 	virtual int	BloodColor( void ) { return DONT_BLEED; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?BloodColor@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::BloodColor
_TEXT	ENDS
;	COMDAT ?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ
_TEXT	SEGMENT
_this$ = -4
?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ PROC NEAR ; CBaseEntity::MyMonsterPointer, COMDAT

; 411  : 	virtual CBaseMonster *MyMonsterPointer( void ) { return NULL;}

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ ENDP ; CBaseEntity::MyMonsterPointer
_TEXT	ENDS
PUBLIC	??9Vector@@QBEHABV0@@Z				; Vector::operator!=
EXTRN	?GetAbsVelocity@CBaseEntity@@QBEABVVector@@XZ:NEAR ; CBaseEntity::GetAbsVelocity
;	COMDAT ?IsMoving@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsMoving@CBaseEntity@@UAEHXZ PROC NEAR			; CBaseEntity::IsMoving, COMDAT

; 421  : 	virtual int	IsMoving( void ) { return GetAbsVelocity() != g_vecZero; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET FLAT:?g_vecZero@@3VVector@@B	; g_vecZero
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAbsVelocity@CBaseEntity@@QBEABVVector@@XZ ; CBaseEntity::GetAbsVelocity
	mov	ecx, eax
	call	??9Vector@@QBEHABV0@@Z			; Vector::operator!=
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMoving@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsMoving
_TEXT	ENDS
;	COMDAT ??9Vector@@QBEHABV0@@Z
_TEXT	SEGMENT
_v$ = 8
_this$ = -4
??9Vector@@QBEHABV0@@Z PROC NEAR			; Vector::operator!=, COMDAT

; 148  : 	inline int operator!=(const Vector& v) const	{ return !(*this==v);		   }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8Vector@@QBEHABV0@@Z			; Vector::operator==
	neg	eax
	sbb	eax, eax
	inc	eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9Vector@@QBEHABV0@@Z ENDP				; Vector::operator!=
_TEXT	ENDS
;	COMDAT ?IsAlive@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsAlive@CBaseEntity@@UAEHXZ PROC NEAR			; CBaseEntity::IsAlive, COMDAT

; 431  : 	virtual BOOL	IsAlive( void ) { return (pev->deadflag == DEAD_NO) && pev->health > 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+368], 0
	jne	SHORT $L40627
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	fld	DWORD PTR [eax+352]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L40627
	mov	DWORD PTR -8+[ebp], 1
	jmp	SHORT $L40628
$L40627:
	mov	DWORD PTR -8+[ebp], 0
$L40628:
	mov	eax, DWORD PTR -8+[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAlive@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::IsAlive
_TEXT	ENDS
;	COMDAT ?FBecomeProne@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?FBecomeProne@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::FBecomeProne, COMDAT

; 709  : 	virtual BOOL FBecomeProne( void ) {return FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FBecomeProne@CBaseEntity@@UAEHXZ ENDP			; CBaseEntity::FBecomeProne
_TEXT	ENDS
;	COMDAT ?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
$T40633 = -16
?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z PROC NEAR ; CBaseEntity::BodyTarget, COMDAT

; 717  : 	virtual Vector BodyTarget( const Vector &posSrc ) { return Center( ); };		// position to shoot at

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T40633[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+304]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z ENDP	; CBaseEntity::BodyTarget
_TEXT	ENDS
;	COMDAT ?HandleAnimEvent@CBaseAnimating@@UAEXPAUMonsterEvent_t@@@Z
_TEXT	SEGMENT
_this$ = -4
?HandleAnimEvent@CBaseAnimating@@UAEXPAUMonsterEvent_t@@@Z PROC NEAR ; CBaseAnimating::HandleAnimEvent, COMDAT

; 909  : 	virtual void HandleAnimEvent( MonsterEvent_t *pEvent ) { return; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?HandleAnimEvent@CBaseAnimating@@UAEXPAUMonsterEvent_t@@@Z ENDP ; CBaseAnimating::HandleAnimEvent
_TEXT	ENDS
;	COMDAT ??1CBaseToggle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CBaseToggle@@QAE@XZ PROC NEAR			; CBaseToggle::~CBaseToggle, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseAnimating@@QAE@XZ		; CBaseAnimating::~CBaseAnimating
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseToggle@@QAE@XZ ENDP				; CBaseToggle::~CBaseToggle
_TEXT	ENDS
;	COMDAT ??0WayPoint_t@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0WayPoint_t@@QAE@XZ PROC NEAR				; WayPoint_t::WayPoint_t, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0WayPoint_t@@QAE@XZ ENDP				; WayPoint_t::WayPoint_t
_TEXT	ENDS
PUBLIC	?GetState@CBaseDelay@@UAE?AW4STATE@@XZ		; CBaseDelay::GetState
PUBLIC	??0CBaseDelay@@QAE@XZ				; CBaseDelay::CBaseDelay
PUBLIC	??_7CBaseAnimating@@6B@				; CBaseAnimating::`vftable'
PUBLIC	?GetToggleState@CBaseEntity@@UAEHXZ		; CBaseEntity::GetToggleState
PUBLIC	?GetDelay@CBaseEntity@@UAEMXZ			; CBaseEntity::GetDelay
PUBLIC	?MoveDone@CBaseEntity@@UAEXXZ			; CBaseEntity::MoveDone
EXTRN	?KeyValue@CBaseDelay@@UAEXPAUKeyValueData_s@@@Z:NEAR ; CBaseDelay::KeyValue
EXTRN	?GetDataDescMap@CBaseAnimating@@UAEPAUdatamap_s@@XZ:NEAR ; CBaseAnimating::GetDataDescMap
EXTRN	?Restore@CBaseEntity@@UAEHAAVCRestore@@@Z:NEAR	; CBaseEntity::Restore
;	COMDAT ??_7CBaseAnimating@@6B@
CONST	SEGMENT
??_7CBaseAnimating@@6B@ DD FLAT:?GetDataDescMap@CBaseAnimating@@UAEPAUdatamap_s@@XZ ; CBaseAnimating::`vftable'
	DD	FLAT:?Spawn@CBaseEntity@@UAEXXZ
	DD	FLAT:?Precache@CBaseEntity@@UAEXXZ
	DD	FLAT:?KeyValue@CBaseDelay@@UAEXPAUKeyValueData_s@@@Z
	DD	FLAT:?Save@CBaseEntity@@UAEHAAVCSave@@@Z
	DD	FLAT:?Restore@CBaseEntity@@UAEHAAVCRestore@@@Z
	DD	FLAT:?ObjectCaps@CBaseEntity@@UAEHXZ
	DD	FLAT:?Activate@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnChangeLevel@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnTeleport@CBaseEntity@@UAEXXZ
	DD	FLAT:?PortalSleep@CBaseEntity@@UAEXM@Z
	DD	FLAT:?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
	DD	FLAT:?GetPosition@CBaseEntity@@UAEMXZ
	DD	FLAT:?OnChangeParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnClearParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnRemove@CBaseEntity@@UAEXXZ
	DD	FLAT:?SetObjectCollisionBox@CBaseEntity@@UAEXXZ
	DD	FLAT:?Classify@CBaseEntity@@UAEHXZ
	DD	FLAT:?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
	DD	FLAT:?IsRigidBody@CBaseEntity@@UAEHXZ
	DD	FLAT:?SetNextThink@CBaseEntity@@UAEXM@Z
	DD	FLAT:?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
	DD	FLAT:?GetState@CBaseDelay@@UAE?AW4STATE@@XZ
	DD	FLAT:?TraceAttack@CBaseEntity@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?TakeDamage@CBaseEntity@@UAEHPAUentvars_s@@0MH@Z
	DD	FLAT:?TakeHealth@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?TakeArmor@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?Killed@CBaseEntity@@UAEXPAUentvars_s@@H@Z
	DD	FLAT:?BloodColor@CBaseEntity@@UAEHXZ
	DD	FLAT:?TraceBleed@CBaseEntity@@UAEXMVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ
	DD	FLAT:?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
	DD	FLAT:?GetVehicleDriver@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?GetToggleState@CBaseEntity@@UAEHXZ
	DD	FLAT:?AddPoints@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPointsToTeam@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?GiveAmmo@CBaseEntity@@UAEHHPADH@Z
	DD	FLAT:?GetDelay@CBaseEntity@@UAEMXZ
	DD	FLAT:?IsMoving@CBaseEntity@@UAEHXZ
	DD	FLAT:?OverrideReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?TransferReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?DamageDecal@CBaseEntity@@UAEHH@Z
	DD	FLAT:?SetToggleState@CBaseEntity@@UAEXH@Z
	DD	FLAT:?StartSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?StopSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnControls@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?IsSneaking@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsAlive@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBSPModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsCustomModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?ReflectGauss@CBaseEntity@@UAEHXZ
	DD	FLAT:?HasTarget@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsInWorld@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsPlayer@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsNetClient@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMonster@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPushable@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsProjectile@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsFuncScreen@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPortal@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsTank@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMover@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBreakable@CBaseEntity@@UAEHXZ
	DD	FLAT:?TeamID@CBaseEntity@@UAEPBDXZ
	DD	FLAT:?GetNextTarget@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?Think@CBaseEntity@@UAEXXZ
	DD	FLAT:?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
	DD	FLAT:?Touch@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?Blocked@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?MoveDone@CBaseEntity@@UAEXXZ
	DD	FLAT:?Respawn@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?UpdateOwner@CBaseEntity@@UAEXXZ
	DD	FLAT:?FBecomeProne@CBaseEntity@@UAEHXZ
	DD	FLAT:?Center@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z
	DD	FLAT:?IsPointSized@CBaseEntity@@UBEHXZ
	DD	FLAT:?Illumination@CBaseEntity@@UAEHXZ
	DD	FLAT:?FVisible@CBaseEntity@@UAEHABVVector@@@Z
	DD	FLAT:?FVisible@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?ShouldCollide@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?HandleAnimEvent@CBaseAnimating@@UAEXPAUMonsterEvent_t@@@Z
CONST	ENDS
;	COMDAT ??0CBaseAnimating@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CBaseAnimating@@QAE@XZ PROC NEAR			; CBaseAnimating::CBaseAnimating, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseDelay@@QAE@XZ			; CBaseDelay::CBaseDelay
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CBaseAnimating@@6B@ ; CBaseAnimating::`vftable'
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseAnimating@@QAE@XZ ENDP				; CBaseAnimating::CBaseAnimating
_TEXT	ENDS
;	COMDAT ?GetToggleState@CBaseEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetToggleState@CBaseEntity@@UAEHXZ PROC NEAR		; CBaseEntity::GetToggleState, COMDAT

; 414  : 	virtual int	GetToggleState( void ) { return TS_AT_TOP; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetToggleState@CBaseEntity@@UAEHXZ ENDP		; CBaseEntity::GetToggleState
_TEXT	ENDS
;	COMDAT ?GetDelay@CBaseEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4
?GetDelay@CBaseEntity@@UAEMXZ PROC NEAR			; CBaseEntity::GetDelay, COMDAT

; 420  : 	virtual float	GetDelay( void ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@4@00000000000000000000
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDelay@CBaseEntity@@UAEMXZ ENDP			; CBaseEntity::GetDelay
_TEXT	ENDS
;	COMDAT ?MoveDone@CBaseEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?MoveDone@CBaseEntity@@UAEXXZ PROC NEAR			; CBaseEntity::MoveDone, COMDAT

; 485  : 	virtual void MoveDone( void ) { if( m_pfnMoveDone )(this->*m_pfnMoveDone)(); };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1760], 0
	je	SHORT $L35020
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	call	DWORD PTR [edx+1760]
$L35020:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MoveDone@CBaseEntity@@UAEXXZ ENDP			; CBaseEntity::MoveDone
_TEXT	ENDS
;	COMDAT ?GetState@CBaseDelay@@UAE?AW4STATE@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetState@CBaseDelay@@UAE?AW4STATE@@XZ PROC NEAR	; CBaseDelay::GetState, COMDAT

; 881  : 	virtual STATE GetState( void ) { return m_iState; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1788]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetState@CBaseDelay@@UAE?AW4STATE@@XZ ENDP		; CBaseDelay::GetState
_TEXT	ENDS
PUBLIC	??1CBaseDelay@@QAE@XZ				; CBaseDelay::~CBaseDelay
;	COMDAT ??1CBaseAnimating@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CBaseAnimating@@QAE@XZ PROC NEAR			; CBaseAnimating::~CBaseAnimating, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseDelay@@QAE@XZ			; CBaseDelay::~CBaseDelay
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseAnimating@@QAE@XZ ENDP				; CBaseAnimating::~CBaseAnimating
_TEXT	ENDS
PUBLIC	??0CBaseEntity@@QAE@XZ				; CBaseEntity::CBaseEntity
PUBLIC	??_7CBaseDelay@@6B@				; CBaseDelay::`vftable'
EXTRN	?GetDataDescMap@CBaseDelay@@UAEPAUdatamap_s@@XZ:NEAR ; CBaseDelay::GetDataDescMap
;	COMDAT ??_7CBaseDelay@@6B@
CONST	SEGMENT
??_7CBaseDelay@@6B@ DD FLAT:?GetDataDescMap@CBaseDelay@@UAEPAUdatamap_s@@XZ ; CBaseDelay::`vftable'
	DD	FLAT:?Spawn@CBaseEntity@@UAEXXZ
	DD	FLAT:?Precache@CBaseEntity@@UAEXXZ
	DD	FLAT:?KeyValue@CBaseDelay@@UAEXPAUKeyValueData_s@@@Z
	DD	FLAT:?Save@CBaseEntity@@UAEHAAVCSave@@@Z
	DD	FLAT:?Restore@CBaseEntity@@UAEHAAVCRestore@@@Z
	DD	FLAT:?ObjectCaps@CBaseEntity@@UAEHXZ
	DD	FLAT:?Activate@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnChangeLevel@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnTeleport@CBaseEntity@@UAEXXZ
	DD	FLAT:?PortalSleep@CBaseEntity@@UAEXM@Z
	DD	FLAT:?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
	DD	FLAT:?GetPosition@CBaseEntity@@UAEMXZ
	DD	FLAT:?OnChangeParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnClearParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnRemove@CBaseEntity@@UAEXXZ
	DD	FLAT:?SetObjectCollisionBox@CBaseEntity@@UAEXXZ
	DD	FLAT:?Classify@CBaseEntity@@UAEHXZ
	DD	FLAT:?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
	DD	FLAT:?IsRigidBody@CBaseEntity@@UAEHXZ
	DD	FLAT:?SetNextThink@CBaseEntity@@UAEXM@Z
	DD	FLAT:?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
	DD	FLAT:?GetState@CBaseDelay@@UAE?AW4STATE@@XZ
	DD	FLAT:?TraceAttack@CBaseEntity@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?TakeDamage@CBaseEntity@@UAEHPAUentvars_s@@0MH@Z
	DD	FLAT:?TakeHealth@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?TakeArmor@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?Killed@CBaseEntity@@UAEXPAUentvars_s@@H@Z
	DD	FLAT:?BloodColor@CBaseEntity@@UAEHXZ
	DD	FLAT:?TraceBleed@CBaseEntity@@UAEXMVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ
	DD	FLAT:?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
	DD	FLAT:?GetVehicleDriver@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?GetToggleState@CBaseEntity@@UAEHXZ
	DD	FLAT:?AddPoints@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPointsToTeam@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?GiveAmmo@CBaseEntity@@UAEHHPADH@Z
	DD	FLAT:?GetDelay@CBaseEntity@@UAEMXZ
	DD	FLAT:?IsMoving@CBaseEntity@@UAEHXZ
	DD	FLAT:?OverrideReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?TransferReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?DamageDecal@CBaseEntity@@UAEHH@Z
	DD	FLAT:?SetToggleState@CBaseEntity@@UAEXH@Z
	DD	FLAT:?StartSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?StopSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnControls@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?IsSneaking@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsAlive@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBSPModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsCustomModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?ReflectGauss@CBaseEntity@@UAEHXZ
	DD	FLAT:?HasTarget@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsInWorld@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsPlayer@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsNetClient@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMonster@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPushable@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsProjectile@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsFuncScreen@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPortal@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsTank@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMover@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBreakable@CBaseEntity@@UAEHXZ
	DD	FLAT:?TeamID@CBaseEntity@@UAEPBDXZ
	DD	FLAT:?GetNextTarget@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?Think@CBaseEntity@@UAEXXZ
	DD	FLAT:?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
	DD	FLAT:?Touch@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?Blocked@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?MoveDone@CBaseEntity@@UAEXXZ
	DD	FLAT:?Respawn@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?UpdateOwner@CBaseEntity@@UAEXXZ
	DD	FLAT:?FBecomeProne@CBaseEntity@@UAEHXZ
	DD	FLAT:?Center@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z
	DD	FLAT:?IsPointSized@CBaseEntity@@UBEHXZ
	DD	FLAT:?Illumination@CBaseEntity@@UAEHXZ
	DD	FLAT:?FVisible@CBaseEntity@@UAEHABVVector@@@Z
	DD	FLAT:?FVisible@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?ShouldCollide@CBaseEntity@@UAEHPAV1@@Z
CONST	ENDS
;	COMDAT ??0CBaseDelay@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CBaseDelay@@QAE@XZ PROC NEAR				; CBaseDelay::CBaseDelay, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseEntity@@QAE@XZ			; CBaseEntity::CBaseEntity
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CBaseDelay@@6B@ ; CBaseDelay::`vftable'
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseDelay@@QAE@XZ ENDP				; CBaseDelay::CBaseDelay
_TEXT	ENDS
PUBLIC	??1CBaseEntity@@QAE@XZ				; CBaseEntity::~CBaseEntity
;	COMDAT ??1CBaseDelay@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CBaseDelay@@QAE@XZ PROC NEAR				; CBaseDelay::~CBaseDelay, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEntity@@QAE@XZ			; CBaseEntity::~CBaseEntity
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseDelay@@QAE@XZ ENDP				; CBaseDelay::~CBaseDelay
_TEXT	ENDS
PUBLIC	??_7CBaseEntity@@6B@				; CBaseEntity::`vftable'
PUBLIC	?KeyValue@CBaseEntity@@UAEXPAUKeyValueData_s@@@Z ; CBaseEntity::KeyValue
PUBLIC	?GetState@CBaseEntity@@UAE?AW4STATE@@XZ		; CBaseEntity::GetState
EXTRN	??0matrix4x4@@QAE@XZ:NEAR			; matrix4x4::matrix4x4
EXTRN	??0CMeshDesc@@QAE@XZ:NEAR			; CMeshDesc::CMeshDesc
EXTRN	??1CMeshDesc@@QAE@XZ:NEAR			; CMeshDesc::~CMeshDesc
EXTRN	?GetDataDescMap@CBaseEntity@@UAEPAUdatamap_s@@XZ:NEAR ; CBaseEntity::GetDataDescMap
;	COMDAT ??_7CBaseEntity@@6B@
CONST	SEGMENT
??_7CBaseEntity@@6B@ DD FLAT:?GetDataDescMap@CBaseEntity@@UAEPAUdatamap_s@@XZ ; CBaseEntity::`vftable'
	DD	FLAT:?Spawn@CBaseEntity@@UAEXXZ
	DD	FLAT:?Precache@CBaseEntity@@UAEXXZ
	DD	FLAT:?KeyValue@CBaseEntity@@UAEXPAUKeyValueData_s@@@Z
	DD	FLAT:?Save@CBaseEntity@@UAEHAAVCSave@@@Z
	DD	FLAT:?Restore@CBaseEntity@@UAEHAAVCRestore@@@Z
	DD	FLAT:?ObjectCaps@CBaseEntity@@UAEHXZ
	DD	FLAT:?Activate@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnChangeLevel@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnTeleport@CBaseEntity@@UAEXXZ
	DD	FLAT:?PortalSleep@CBaseEntity@@UAEXM@Z
	DD	FLAT:?StartMessage@CBaseEntity@@UAEXPAVCBasePlayer@@@Z
	DD	FLAT:?GetPosition@CBaseEntity@@UAEMXZ
	DD	FLAT:?OnChangeParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnClearParent@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnRemove@CBaseEntity@@UAEXXZ
	DD	FLAT:?SetObjectCollisionBox@CBaseEntity@@UAEXXZ
	DD	FLAT:?Classify@CBaseEntity@@UAEHXZ
	DD	FLAT:?DeathNotice@CBaseEntity@@UAEXPAUentvars_s@@@Z
	DD	FLAT:?IsRigidBody@CBaseEntity@@UAEHXZ
	DD	FLAT:?SetNextThink@CBaseEntity@@UAEXM@Z
	DD	FLAT:?GetState@CBaseEntity@@UAE?AW4STATE@@PAV1@@Z
	DD	FLAT:?GetState@CBaseEntity@@UAE?AW4STATE@@XZ
	DD	FLAT:?TraceAttack@CBaseEntity@@UAEXPAUentvars_s@@MVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?TakeDamage@CBaseEntity@@UAEHPAUentvars_s@@0MH@Z
	DD	FLAT:?TakeHealth@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?TakeArmor@CBaseEntity@@UAEHMH@Z
	DD	FLAT:?Killed@CBaseEntity@@UAEXPAUentvars_s@@H@Z
	DD	FLAT:?BloodColor@CBaseEntity@@UAEHXZ
	DD	FLAT:?TraceBleed@CBaseEntity@@UAEXMVVector@@PAUgametrace_s@@H@Z
	DD	FLAT:?IsTriggered@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?MyMonsterPointer@CBaseEntity@@UAEPAVCBaseMonster@@XZ
	DD	FLAT:?MySquadMonsterPointer@CBaseEntity@@UAEPAVCSquadMonster@@XZ
	DD	FLAT:?GetVehicleDriver@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?GetToggleState@CBaseEntity@@UAEHXZ
	DD	FLAT:?AddPoints@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPointsToTeam@CBaseEntity@@UAEXHH@Z
	DD	FLAT:?AddPlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?RemovePlayerItem@CBaseEntity@@UAEHPAVCBasePlayerItem@@@Z
	DD	FLAT:?GiveAmmo@CBaseEntity@@UAEHHPADH@Z
	DD	FLAT:?GetDelay@CBaseEntity@@UAEMXZ
	DD	FLAT:?IsMoving@CBaseEntity@@UAEHXZ
	DD	FLAT:?OverrideReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?TransferReset@CBaseEntity@@UAEXXZ
	DD	FLAT:?DamageDecal@CBaseEntity@@UAEHH@Z
	DD	FLAT:?SetToggleState@CBaseEntity@@UAEXH@Z
	DD	FLAT:?StartSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?StopSneaking@CBaseEntity@@UAEXXZ
	DD	FLAT:?OnControls@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?IsSneaking@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsAlive@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBSPModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsCustomModel@CBaseEntity@@UAEHXZ
	DD	FLAT:?ReflectGauss@CBaseEntity@@UAEHXZ
	DD	FLAT:?HasTarget@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsInWorld@CBaseEntity@@UAEHH@Z
	DD	FLAT:?IsPlayer@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsNetClient@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMonster@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPushable@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsProjectile@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsFuncScreen@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsPortal@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsTank@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsMover@CBaseEntity@@UAEHXZ
	DD	FLAT:?IsBreakable@CBaseEntity@@UAEHXZ
	DD	FLAT:?TeamID@CBaseEntity@@UAEPBDXZ
	DD	FLAT:?GetNextTarget@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?Think@CBaseEntity@@UAEXXZ
	DD	FLAT:?Use@CBaseEntity@@UAEXPAV1@0W4USE_TYPE@@M@Z
	DD	FLAT:?Touch@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?Blocked@CBaseEntity@@UAEXPAV1@@Z
	DD	FLAT:?MoveDone@CBaseEntity@@UAEXXZ
	DD	FLAT:?Respawn@CBaseEntity@@UAEPAV1@XZ
	DD	FLAT:?UpdateOwner@CBaseEntity@@UAEXXZ
	DD	FLAT:?FBecomeProne@CBaseEntity@@UAEHXZ
	DD	FLAT:?Center@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EyePosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?EarPosition@CBaseEntity@@UAE?AVVector@@XZ
	DD	FLAT:?BodyTarget@CBaseEntity@@UAE?AVVector@@ABV2@@Z
	DD	FLAT:?IsPointSized@CBaseEntity@@UBEHXZ
	DD	FLAT:?Illumination@CBaseEntity@@UAEHXZ
	DD	FLAT:?FVisible@CBaseEntity@@UAEHABVVector@@@Z
	DD	FLAT:?FVisible@CBaseEntity@@UAEHPAV1@@Z
	DD	FLAT:?ShouldCollide@CBaseEntity@@UAEHPAV1@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CBaseEntity@@QAE@XZ DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseEntity@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
__unwindtable$??0CBaseEntity@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseEntity@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT ??0CBaseEntity@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??0CBaseEntity@@QAE@XZ PROC NEAR			; CBaseEntity::CBaseEntity, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseEntity@@QAE@XZ
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 180				; 000000b4H
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 248				; 000000f8H
	call	??0CMeshDesc@@QAE@XZ			; CMeshDesc::CMeshDesc
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1632				; 00000660H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CBaseEntity@@6B@ ; CBaseEntity::`vftable'
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseEntity@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 248				; 000000f8H
	call	??1CMeshDesc@@QAE@XZ			; CMeshDesc::~CMeshDesc
	ret	0
__ehhandler$??0CBaseEntity@@QAE@XZ:
	mov	eax, OFFSET FLAT:__ehfuncinfo$??0CBaseEntity@@QAE@XZ
	jmp	___CxxFrameHandler
text$x	ENDS
??0CBaseEntity@@QAE@XZ ENDP				; CBaseEntity::CBaseEntity
PUBLIC	??_C@_06FOPF@parent?$AA@			; `string'
PUBLIC	??_C@_08IDGH@movewith?$AA@			; `string'
PUBLIC	??_C@_0M@FCIN@parentflags?$AA@			; `string'
PUBLIC	??_C@_05JCDO@style?$AA@				; `string'
PUBLIC	??_C@_0L@MCHI@reflection?$AA@			; `string'
PUBLIC	??_C@_0N@DCCA@vlight_cache?$AA@			; `string'
EXTRN	?Q_atoi@@YAHPBD@Z:NEAR				; Q_atoi
;	COMDAT ??_C@_06FOPF@parent?$AA@
; File z:\xashxtsrc\server\cbase.h
CONST	SEGMENT
??_C@_06FOPF@parent?$AA@ DB 'parent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IDGH@movewith?$AA@
CONST	SEGMENT
??_C@_08IDGH@movewith?$AA@ DB 'movewith', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FCIN@parentflags?$AA@
CONST	SEGMENT
??_C@_0M@FCIN@parentflags?$AA@ DB 'parentflags', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JCDO@style?$AA@
CONST	SEGMENT
??_C@_05JCDO@style?$AA@ DB 'style', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MCHI@reflection?$AA@
CONST	SEGMENT
??_C@_0L@MCHI@reflection?$AA@ DB 'reflection', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DCCA@vlight_cache?$AA@
CONST	SEGMENT
??_C@_0N@DCCA@vlight_cache?$AA@ DB 'vlight_cache', 00H	; `string'
CONST	ENDS
;	COMDAT ?KeyValue@CBaseEntity@@UAEXPAUKeyValueData_s@@@Z
_TEXT	SEGMENT
_this$ = -4
_pkvd$ = 8
?KeyValue@CBaseEntity@@UAEXPAUKeyValueData_s@@@Z PROC NEAR ; CBaseEntity::KeyValue, COMDAT

; 328  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 329  : 		// get support for spirit field too
; 330  : 		if( FStrEq( pkvd->szKeyName, "parent" ) || FStrEq( pkvd->szKeyName, "movewith" ))

	push	OFFSET FLAT:??_C@_06FOPF@parent?$AA@	; `string'
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	jne	SHORT $L34875
	push	OFFSET FLAT:??_C@_08IDGH@movewith?$AA@	; `string'
	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L34874
$L34875:

; 332  : 			m_iParent = ALLOC_STRING(pkvd->szValue);

	mov	ecx, DWORD PTR _pkvd$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR ?g_engfuncs@@3Uenginefuncs_s@@A+268
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], eax

; 333  : 			pkvd->fHandled = TRUE;

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [edx+12], 1

; 335  : 		else if( FStrEq( pkvd->szKeyName, "parentflags" ))

	jmp	$L34896
$L34874:
	push	OFFSET FLAT:??_C@_0M@FCIN@parentflags?$AA@ ; `string'
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L34879

; 337  : 			m_iParentFlags = Q_atoi( pkvd->szValue );

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?Q_atoi@@YAHPBD@Z			; Q_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+176], eax

; 338  : 			pkvd->fHandled = TRUE;

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [edx+12], 1

; 340  : 		else if( FStrEq( pkvd->szKeyName, "style" ))

	jmp	$L34896
$L34879:
	push	OFFSET FLAT:??_C@_05JCDO@style?$AA@	; `string'
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L34882

; 342  : 			m_iStyle = Q_atoi( pkvd->szValue );

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?Q_atoi@@YAHPBD@Z			; Q_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 343  : 			pkvd->fHandled = TRUE;

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [edx+12], 1

; 345  : 		else if( FStrEq( pkvd->szKeyName, "reflection" ))

	jmp	$L34896
$L34882:
	push	OFFSET FLAT:??_C@_0L@MCHI@reflection?$AA@ ; `string'
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L34885

; 348  : 			{

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?Q_atoi@@YAHPBD@Z			; Q_atoi
	add	esp, 4
	mov	DWORD PTR -8+[ebp], eax
	cmp	DWORD PTR -8+[ebp], 1
	je	SHORT $L34891
	cmp	DWORD PTR -8+[ebp], 2
	je	SHORT $L34892
	jmp	SHORT $L34888
$L34891:

; 349  : 			case 1: pev->effects |= EF_NOREFLECT; break;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+280]
	or	eax, 16777216				; 01000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+280], eax
	jmp	SHORT $L34888
$L34892:

; 350  : 			case 2: pev->effects |= EF_REFLECTONLY; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+280]
	or	edx, 33554432				; 02000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+280], edx
$L34888:

; 352  : 			pkvd->fHandled = TRUE;

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [edx+12], 1

; 354  : 		else if( FStrEq(pkvd->szKeyName, "vlight_cache"))

	jmp	SHORT $L34896
$L34885:
	push	OFFSET FLAT:??_C@_0N@DCCA@vlight_cache?$AA@ ; `string'
	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?FStrEq@@YAHPBD0@Z			; FStrEq
	add	esp, 8
	test	eax, eax
	je	SHORT $L34894

; 356  : 			pev->iuser3 = atoi( pkvd->szValue );

	mov	edx, DWORD PTR _pkvd$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+588], eax

; 357  : 			pkvd->fHandled = TRUE;

	mov	eax, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [eax+12], 1

; 359  : 		else pkvd->fHandled = FALSE;

	jmp	SHORT $L34896
$L34894:
	mov	ecx, DWORD PTR _pkvd$[ebp]
	mov	DWORD PTR [ecx+12], 0
$L34896:

; 360  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?KeyValue@CBaseEntity@@UAEXPAUKeyValueData_s@@@Z ENDP	; CBaseEntity::KeyValue
_TEXT	ENDS
;	COMDAT ?GetState@CBaseEntity@@UAE?AW4STATE@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetState@CBaseEntity@@UAE?AW4STATE@@XZ PROC NEAR	; CBaseEntity::GetState, COMDAT

; 398  : 	virtual STATE GetState ( void ) { return STATE_OFF; };

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetState@CBaseEntity@@UAE?AW4STATE@@XZ ENDP		; CBaseEntity::GetState
_TEXT	ENDS
;	COMDAT ??1CBaseEntity@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CBaseEntity@@QAE@XZ PROC NEAR			; CBaseEntity::~CBaseEntity, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 248				; 000000f8H
	call	??1CMeshDesc@@QAE@XZ			; CMeshDesc::~CMeshDesc
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseEntity@@QAE@XZ ENDP				; CBaseEntity::~CBaseEntity
_TEXT	ENDS
END
