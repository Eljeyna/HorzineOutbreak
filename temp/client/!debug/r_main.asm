	TITLE	Z:\XashXTSRC\client\render\r_main.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_07FOPN@mirror?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08LANI@cubemap?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FMCM@3dsky?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07CBCF@portal?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07LMGG@screen?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07JFCA@shadow?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08ICOB@general?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@MFPO@assert?5failed?5at?5?$CFs?3?$CFi?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??R_ResetRefState@@YAXXZ@4FA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@CFOC@Refresh?5stack?5overflow?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CJJP@Refresh?5stack?5underflow?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??R_GetPrevInstance@@YAPAUref_instance_t@@XZ@4FA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@PHDP@gl_recursion_depth?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CC@LPPL@too?5many?5brush?5entities?5in?5frame@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08NKJJ@viewsize?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@KMMA@node?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z@4FA@748b0b15
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@EKII@R_RenderView?3?5NULL?5worldmodel?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@FKNO@?$CFs?9?$DO?$CFd?5?$CFs?5?$CI?$CFd?5subview?$CJ?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@LAOK@Renderer?3?5?$FO2XashXT?$FO7?6?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@CHLP@?$CF3i?5wpoly?5?$CF3i?5epoly?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@KJHM@?$CF3i?5spoly?5?$CF3i?5grass?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CL@NEFL@visible?5leafs?3?6?$CF3i?5leafs?6current@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DF@EBAK@RecursiveWorldNode?3?5?$CF3lf?5secs?6Dr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MNGL@?$CF3i?5static?5entities?6?$CF3i?5normal?5e@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GFNA@?$CF3i?5studio?5models?5drawn?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FFFG@?$CF3i?5sprite?5models?5drawn?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@MDE@?$CF3i?5temp?5entities?5active?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@LKLA@?$CF3i?5mirrors?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@JOMP@?$CF3i?5portals?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BLFC@?$CF3i?5screens?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@NLHL@?$CF3i?5shadows?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@JPBG@?$CF3i?53d?5sky?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DALN@?$CF3i?5total?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@GDIK@DIP?5count?5?$CF3i?6Shader?5bind?5?$CF3i?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@NJCN@Total?5GLSL?5shaders?5?$CF3i?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@DFNN@frame?5total?5tris?5?$CF3i?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GHEF@Surf?3?5?$FO1?$CFs?$FO7?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@NFOH@Shader?3?5?$FO3?$CD?$CFi?5?$CFs?$FO7?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@EODA@List?5Options?3?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03HHKO@?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@PPHJ@?$CFs?5grass?5total?5size?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@KIKJ@z?3?2xashxtsrc?2game_shared?2utlmemo@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@MOH@nGrowSize?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@KBCN@?$CBIsReadOnly?$CI?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MLLF@IsIdxValid?$CIi?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SinCos@@YAXMPAM0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector2D@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector2D@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DVector2D@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector2D@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@QAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@Vector@@QAEXMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Vector@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9Vector@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DVector@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??XVector@@QAEAAV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector@@QAEPAMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DotProduct@@YAMABVVector@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QAEPAMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QBE?BVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector4D@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Vector4D@@QBE_NABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Radian@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BRadian@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Radian@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x3@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix3x3@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix3x3@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix3x3@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x3@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x4@@QAE@MMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix3x4@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix3x4@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix3x4@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x4@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix4x4@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix4x4@@QAE@ABVVector@@0M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix4x4@@QAEPAMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix4x4@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix4x4@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetForward@matrix4x4@@QAEXABVVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRight@matrix4x4@@QAEXABVVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetUp@matrix4x4@@QAEXABVVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetOrigin@matrix4x4@@QAEXABVVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix4x4@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyToArray@matrix4x4@@QBEXPAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConcatTranslate@matrix4x4@@QAEXMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConcatRotate@matrix4x4@@QAEXMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix4x4@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SimpleSpline@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Random@RandomRange@@QAEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudBase@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CHudBase@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VidInit@CHudBase@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@CHudBase@@UAEHM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Think@CHudBase@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@CHudBase@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitHUDData@CHudBase@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudBase@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudAmmo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudAmmo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudHealth@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudHealth@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudGeiger@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudGeiger@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudBattery@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudBattery@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudTrain@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudTrain@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudFlashlight@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudFlashlight@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudMessage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudMessage@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudScoreboard@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudScoreboard@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudStatusBar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudStatusBar@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudDeathNotice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudDeathNotice@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudSayText@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudSayText@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudMenu@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudAmmoSecondary@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudAmmoSecondary@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudTextMessage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudTextMessage@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudStatusIcons@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudStatusIcons@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudMOTD@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudMOTD@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ViewSmoothingData_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudAmmo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudHealth@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudGeiger@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudBattery@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudTrain@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudFlashlight@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudMessage@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudScoreboard@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudStatusBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudDeathNotice@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudSayText@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudAmmoSecondary@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudTextMessage@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudStatusIcons@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudMOTD@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pHitboxSet@CStudioBoneSetup@@QBEPAUmstudiohitboxset_t@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitBoneWeights@CStudioBoneSetup@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?debugMsg@CStudioBoneSetup@@UAAXPADZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?debugLine@CStudioBoneSetup@@UAEXABVVector@@0HHH_NM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_DrawStudioModel@@YAXPAUcl_entity_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_RunViewmodelEvents@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_DrawViewModel@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_ProcessStudioData@@YAXPAUmodel_s@@HPBE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_CreateStudioDecalList@@YAHPAUdecallist_s@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_ClearStudioDecals@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_GetEntityRenderMode@@YAHPAUcl_entity_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_StudioClearLightCache@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_DrawSpriteModel@@YAXPAUcl_entity_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E13
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E14
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ref_globals_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0gl_texbuffer_s@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0gl_state_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ref_params_s@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_GetNameForView@@YAPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_InitRefState@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_ResetRefState@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_PushRefState@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_PopRefState@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_GetPrevInstance@@YAPAUref_instance_t@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_RankForRenderMode@@YAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_AllowFog@@YAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_OpaqueEntity@@YAHPAUcl_entity_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_TransEntityCompare@@YAHPAPBUcl_entity_s@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_WorldToScreen@@YAHABVVector@@AAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_ScreenToWorld@@YAXABVVector@@AAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_CheckChanges@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CL_FxBlend@@YAHPAUcl_entity_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GL_CacheState@@YAGABVVector@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_ClearScene@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_AddEntity@@YAHPAUcl_entity_s@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_Clear@@YAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_RestoreGLState@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_GetFarClip@@YAMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_SetupFrustum@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_SetupProjectionMatrix@@YAXMMAAVmatrix4x4@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_SetupModelviewMatrix@@YAXAAVmatrix4x4@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_LoadIdentity@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_RotateForEntity@@YAXPAUcl_entity_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_TranslateForEntity@@YAXPAUcl_entity_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_TransformForEntity@@YAXABVmatrix4x4@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_FindViewLeaf@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_SetupFrame@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_SetupGL@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_EndGL@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_CheckFog@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_DrawFog@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_DrawParticles@@YAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ref_viewpass_s@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_DrawEntitiesOnList@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_RenderScene@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_Speeds_Printf@@YAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HUD_PrintStats@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_RenderDebugSurface@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0pmtrace_s@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0pmplane_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_CheckMonsterView@@YA_NPBUref_viewpass_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_SetupRefParams@@YAXPBUref_viewpass_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HUD_RenderFrame@@YAHPBUref_viewpass_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HUD_SpeedsMessage@@YAHPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HUD_ProcessEntData@@YAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HUD_ProcessModelData@@YAXPAUmodel_s@@HPBE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HUD_GetRenderInterface@@YAHHPAUrender_api_s@@PAUrender_interface_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CUtlLinkedList@UJiggleData@@G@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CUtlLinkedList@UJiggleData@@G@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CUtlLinkedList@UJiggleData@@G@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Count@?$CUtlLinkedList@UModelInstance_t@CStudioModelRenderer@@G@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InvalidIndex@?$CUtlLinkedList@UJiggleData@@G@@SAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalElement@?$CUtlLinkedList@UJiggleData@@G@@IAEAAUListElem_t@1@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetDbgInfo@?$CUtlLinkedList@UJiggleData@@G@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Element@?$CUtlLinkedList@UJiggleData@@G@@QAEAAUJiggleData@@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValidIndex@?$CUtlLinkedList@UJiggleData@@G@@QBE_NG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConstructList@?$CUtlLinkedList@UJiggleData@@G@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QAEAAUListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Base@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QAEPAUListElem_t@?$CUtlLinkedList@UJiggleData@@G@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Destruct@@YAXPAUJiggleData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ValidateGrowSize@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QBEABUListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsIdxValid@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QBE_NH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Purge@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsReadOnly@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsExternallyAllocated@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CHudBase@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStudioBoneSetup@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudSayText@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudFlashlight@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudGeiger@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudDeathNotice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudBattery@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudTrain@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudTextMessage@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudAmmo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudHealth@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudStatusIcons@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudAmmoSecondary@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudStatusBar@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudMessage@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudMOTD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudScoreboard@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?HUD_ProcessEntData@@YAXH@Z			; HUD_ProcessEntData
PUBLIC	?HUD_ProcessModelData@@YAXPAUmodel_s@@HPBE@Z	; HUD_ProcessModelData
PUBLIC	?R_ClearScene@@YAXXZ				; R_ClearScene
PUBLIC	?r_currentMessageNum@@3HA			; r_currentMessageNum
PUBLIC	?g_fRenderInitialized@@3HA			; g_fRenderInitialized
PUBLIC	?R_CreateStudioDecalList@@YAHPAUdecallist_s@@H@Z ; R_CreateStudioDecalList
PUBLIC	?R_ClearStudioDecals@@YAXXZ			; R_ClearStudioDecals
PUBLIC	?r_speeds_msg@@3PADA				; r_speeds_msg
PUBLIC	?r_depth_msg@@3PADA				; r_depth_msg
PUBLIC	?gldepthmin@@3MA				; gldepthmin
PUBLIC	?gldepthmax@@3MA				; gldepthmax
PUBLIC	?worldmodel@@3PAUmodel_s@@A			; worldmodel
PUBLIC	?RI@@3PAUref_instance_t@@A			; RI
PUBLIC	?tr@@3Uref_globals_t@@A				; tr
PUBLIC	?r_stats@@3Uref_stats_t@@A			; r_stats
PUBLIC	?HUD_RenderFrame@@YAHPBUref_viewpass_s@@@Z	; HUD_RenderFrame
PUBLIC	?HUD_SpeedsMessage@@YAHPADI@Z			; HUD_SpeedsMessage
EXTRN	?R_NewMap@@YAXXZ:NEAR				; R_NewMap
EXTRN	?HUD_BuildLightmaps@@YAXXZ:NEAR			; HUD_BuildLightmaps
EXTRN	?Mod_GetEngineVis@@YAPAEXZ:NEAR			; Mod_GetEngineVis
EXTRN	?Mod_SetOrthoBounds@@YAXPBM0@Z:NEAR		; Mod_SetOrthoBounds
EXTRN	?glState@@3UglState_t@@A:BYTE			; glState
_BSS	SEGMENT
?r_currentMessageNum@@3HA DD 01H DUP (?)		; r_currentMessageNum
?g_fRenderInitialized@@3HA DD 01H DUP (?)		; g_fRenderInitialized
?r_speeds_msg@@3PADA DB 0800H DUP (?)			; r_speeds_msg
?r_depth_msg@@3PADA DB 0800H DUP (?)			; r_depth_msg
?gldepthmin@@3MA DD 01H DUP (?)				; gldepthmin
?gldepthmax@@3MA DD 01H DUP (?)				; gldepthmax
?worldmodel@@3PAUmodel_s@@A DD 01H DUP (?)		; worldmodel
?tr@@3Uref_globals_t@@A DB 015c010H DUP (?)		; tr
?r_stats@@3Uref_stats_t@@A DB 068H DUP (?)		; r_stats
_BSS	ENDS
CRT$XCU	SEGMENT
_$S15	DD	FLAT:_$E14
CRT$XCU	ENDS
_DATA	SEGMENT
?RI@@3PAUref_instance_t@@A DD FLAT:?glState@@3UglState_t@@A+40 ; RI
	ORG $+4
_gRenderInterface DD 025H
	DD	FLAT:?HUD_RenderFrame@@YAHPBUref_viewpass_s@@@Z
	DD	FLAT:?HUD_BuildLightmaps@@YAXXZ
	DD	FLAT:?Mod_SetOrthoBounds@@YAXPBM0@Z
	DD	FLAT:?R_CreateStudioDecalList@@YAHPAUdecallist_s@@H@Z
	DD	FLAT:?R_ClearStudioDecals@@YAXXZ
	DD	FLAT:?HUD_SpeedsMessage@@YAHPADI@Z
	DD	FLAT:?HUD_ProcessModelData@@YAXPAUmodel_s@@HPBE@Z
	DD	FLAT:?HUD_ProcessEntData@@YAXH@Z
	DD	FLAT:?Mod_GetEngineVis@@YAPAEXZ
	DD	FLAT:?R_NewMap@@YAXXZ
	DD	FLAT:?R_ClearScene@@YAXXZ
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EX0@Z@Z				; `vector constructor iterator'
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_H@YGXPAXIHP6EX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$L55256:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	cmp	DWORD PTR ___n$[ebp], 0
	jl	SHORT $L55257
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $L55256
$L55257:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
EXTRN	?StudioDecalList@CStudioModelRenderer@@QAEHPAUdecallist_s@@H@Z:NEAR ; CStudioModelRenderer::StudioDecalList
EXTRN	?g_StudioRenderer@@3VCStudioModelRenderer@@A:BYTE ; g_StudioRenderer
;	COMDAT ?R_CreateStudioDecalList@@YAHPAUdecallist_s@@H@Z
_TEXT	SEGMENT
_pList$ = 8
_count$ = 12
?R_CreateStudioDecalList@@YAHPAUdecallist_s@@H@Z PROC NEAR ; R_CreateStudioDecalList, COMDAT

; 663  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 664  : 	return g_StudioRenderer.StudioDecalList( pList, count );

	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pList$[ebp]
	push	ecx
	mov	ecx, OFFSET FLAT:?g_StudioRenderer@@3VCStudioModelRenderer@@A
	call	?StudioDecalList@CStudioModelRenderer@@QAEHPAUdecallist_s@@H@Z ; CStudioModelRenderer::StudioDecalList

; 665  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_CreateStudioDecalList@@YAHPAUdecallist_s@@H@Z ENDP	; R_CreateStudioDecalList
_TEXT	ENDS
EXTRN	?StudioClearDecals@CStudioModelRenderer@@QAEXXZ:NEAR ; CStudioModelRenderer::StudioClearDecals
;	COMDAT ?R_ClearStudioDecals@@YAXXZ
_TEXT	SEGMENT
?R_ClearStudioDecals@@YAXXZ PROC NEAR			; R_ClearStudioDecals, COMDAT

; 668  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 669  : 	g_StudioRenderer.StudioClearDecals();

	mov	ecx, OFFSET FLAT:?g_StudioRenderer@@3VCStudioModelRenderer@@A
	call	?StudioClearDecals@CStudioModelRenderer@@QAEXXZ ; CStudioModelRenderer::StudioClearDecals

; 670  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_ClearStudioDecals@@YAXXZ ENDP			; R_ClearStudioDecals
_TEXT	ENDS
;	COMDAT _$E14
_TEXT	SEGMENT
_$E14	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	call	_$E13
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_$E14	ENDP
_TEXT	ENDS
PUBLIC	??0ref_globals_t@@QAE@XZ			; ref_globals_t::ref_globals_t
;	COMDAT _$E13
_TEXT	SEGMENT
_$E13	PROC NEAR					; COMDAT

; 35   : ref_globals_t	tr;

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET FLAT:?tr@@3Uref_globals_t@@A
	call	??0ref_globals_t@@QAE@XZ		; ref_globals_t::ref_globals_t
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_$E13	ENDP
_TEXT	ENDS
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
PUBLIC	??0gl_state_t@@QAE@XZ				; gl_state_t::gl_state_t
PUBLIC	??0Vector4D@@QAE@XZ				; Vector4D::Vector4D
PUBLIC	??0gl_texbuffer_s@@QAE@XZ			; gl_texbuffer_s::gl_texbuffer_s
PUBLIC	??0ref_params_s@@QAE@XZ				; ref_params_s::ref_params_s
;	COMDAT ??0ref_globals_t@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ref_globals_t@@QAE@XZ PROC NEAR			; ref_globals_t::ref_globals_t, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET FLAT:??0gl_texbuffer_s@@QAE@XZ	; gl_texbuffer_s::gl_texbuffer_s
	push	64					; 00000040H
	push	76					; 0000004cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	call	??_H@YGXPAXIHP6EX0@Z@Z			; `vector constructor iterator'
	push	OFFSET FLAT:??0gl_state_t@@QAE@XZ	; gl_state_t::gl_state_t
	push	512					; 00000200H
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 6516				; 00001974H
	push	ecx
	call	??_H@YGXPAXIHP6EX0@Z@Z			; `vector constructor iterator'
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1411720				; 00158a88H
	call	??0ref_params_s@@QAE@XZ			; ref_params_s::ref_params_s
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1411960				; 00158b78H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	push	OFFSET FLAT:??0Vector4D@@QAE@XZ		; Vector4D::Vector4D
	push	64					; 00000040H
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1416136				; 00159bc8H
	push	edx
	call	??_H@YGXPAXIHP6EX0@Z@Z			; `vector constructor iterator'
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1417160				; 00159fc8H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1417172				; 00159fd4H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1417192				; 00159fe8H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1417204				; 00159ff4H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1425408				; 0015c000H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ref_globals_t@@QAE@XZ ENDP				; ref_globals_t::ref_globals_t
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Vector@@QAE@XZ PROC NEAR				; Vector::Vector, COMDAT

; 134  : 	inline Vector(void)				{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Vector4D@@QAE@XZ PROC NEAR				; Vector4D::Vector4D, COMDAT

; 311  : 	inline Vector4D( void ) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector4D@@QAE@XZ ENDP				; Vector4D::Vector4D
_TEXT	ENDS
EXTRN	??0matrix4x4@@QAE@XZ:NEAR			; matrix4x4::matrix4x4
;	COMDAT ??0gl_texbuffer_s@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0gl_texbuffer_s@@QAE@XZ PROC NEAR			; gl_texbuffer_s::gl_texbuffer_s, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0gl_texbuffer_s@@QAE@XZ ENDP				; gl_texbuffer_s::gl_texbuffer_s
_TEXT	ENDS
;	COMDAT ??0gl_state_t@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0gl_state_t@@QAE@XZ PROC NEAR				; gl_state_t::gl_state_t, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0gl_state_t@@QAE@XZ ENDP				; gl_state_t::gl_state_t
_TEXT	ENDS
;	COMDAT ??0ref_params_s@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ref_params_s@@QAE@XZ PROC NEAR			; ref_params_s::ref_params_s, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ref_params_s@@QAE@XZ ENDP				; ref_params_s::ref_params_s
_TEXT	ENDS
PUBLIC	?R_GetNameForView@@YAPBDXZ			; R_GetNameForView
PUBLIC	??_C@_07FOPN@mirror?5?$AA@			; `string'
PUBLIC	??_C@_08LANI@cubemap?5?$AA@			; `string'
PUBLIC	??_C@_06FMCM@3dsky?5?$AA@			; `string'
PUBLIC	??_C@_07CBCF@portal?5?$AA@			; `string'
PUBLIC	??_C@_07LMGG@screen?5?$AA@			; `string'
PUBLIC	??_C@_07JFCA@shadow?5?$AA@			; `string'
PUBLIC	??_C@_08ICOB@general?5?$AA@			; `string'
EXTRN	?Q_strncat@@YAIPADPBDI@Z:NEAR			; Q_strncat
_BSS	SEGMENT
_?passName@?1??R_GetNameForView@@YAPBDXZ@4PADA DB 0100H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_07FOPN@mirror?5?$AA@
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
??_C@_07FOPN@mirror?5?$AA@ DB 'mirror ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LANI@cubemap?5?$AA@
CONST	SEGMENT
??_C@_08LANI@cubemap?5?$AA@ DB 'cubemap ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMCM@3dsky?5?$AA@
CONST	SEGMENT
??_C@_06FMCM@3dsky?5?$AA@ DB '3dsky ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CBCF@portal?5?$AA@
CONST	SEGMENT
??_C@_07CBCF@portal?5?$AA@ DB 'portal ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LMGG@screen?5?$AA@
CONST	SEGMENT
??_C@_07LMGG@screen?5?$AA@ DB 'screen ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JFCA@shadow?5?$AA@
CONST	SEGMENT
??_C@_07JFCA@shadow?5?$AA@ DB 'shadow ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ICOB@general?5?$AA@
CONST	SEGMENT
??_C@_08ICOB@general?5?$AA@ DB 'general ', 00H		; `string'
CONST	ENDS
;	COMDAT ?R_GetNameForView@@YAPBDXZ
_TEXT	SEGMENT
?R_GetNameForView@@YAPBDXZ PROC NEAR			; R_GetNameForView, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 47   : 	static char	passName[256];
; 48   : 
; 49   : 	passName[0] = '\0';

	mov	BYTE PTR _?passName@?1??R_GetNameForView@@YAPBDXZ@4PADA, 0

; 50   : 
; 51   : 	if( FBitSet( RI->params, RP_MIRRORVIEW ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	test	ecx, ecx
	je	SHORT $L72105

; 52   : 		Q_strncat( passName, "mirror ", sizeof( passName ));

	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_07FOPN@mirror?5?$AA@	; `string'
	push	OFFSET FLAT:_?passName@?1??R_GetNameForView@@YAPBDXZ@4PADA
	call	?Q_strncat@@YAIPADPBDI@Z		; Q_strncat
	add	esp, 12					; 0000000cH
$L72105:

; 53   : 	if( FBitSet( RI->params, RP_ENVVIEW ))

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx]
	and	eax, 2
	test	eax, eax
	je	SHORT $L72107

; 54   : 		Q_strncat( passName, "cubemap ", sizeof( passName ));	

	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_08LANI@cubemap?5?$AA@	; `string'
	push	OFFSET FLAT:_?passName@?1??R_GetNameForView@@YAPBDXZ@4PADA
	call	?Q_strncat@@YAIPADPBDI@Z		; Q_strncat
	add	esp, 12					; 0000000cH
$L72107:

; 55   : 	if( FBitSet( RI->params, RP_SKYPORTALVIEW ))

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx]
	and	edx, 32					; 00000020H
	test	edx, edx
	je	SHORT $L72109

; 56   : 		Q_strncat( passName, "3dsky ", sizeof( passName ));	

	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_06FMCM@3dsky?5?$AA@	; `string'
	push	OFFSET FLAT:_?passName@?1??R_GetNameForView@@YAPBDXZ@4PADA
	call	?Q_strncat@@YAIPADPBDI@Z		; Q_strncat
	add	esp, 12					; 0000000cH
$L72109:

; 57   : 	if( FBitSet( RI->params, RP_PORTALVIEW ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 64					; 00000040H
	test	ecx, ecx
	je	SHORT $L72111

; 58   : 		Q_strncat( passName, "portal ", sizeof( passName ));	

	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_07CBCF@portal?5?$AA@	; `string'
	push	OFFSET FLAT:_?passName@?1??R_GetNameForView@@YAPBDXZ@4PADA
	call	?Q_strncat@@YAIPADPBDI@Z		; Q_strncat
	add	esp, 12					; 0000000cH
$L72111:

; 59   : 	if( FBitSet( RI->params, RP_SCREENVIEW ))

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $L72113

; 60   : 		Q_strncat( passName, "screen ", sizeof( passName ));	

	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_07LMGG@screen?5?$AA@	; `string'
	push	OFFSET FLAT:_?passName@?1??R_GetNameForView@@YAPBDXZ@4PADA
	call	?Q_strncat@@YAIPADPBDI@Z		; Q_strncat
	add	esp, 12					; 0000000cH
$L72113:

; 61   : 	if( FBitSet( RI->params, RP_SHADOWVIEW ))

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx]
	and	edx, 256				; 00000100H
	test	edx, edx
	je	SHORT $L72115

; 62   : 		Q_strncat( passName, "shadow ", sizeof( passName ));

	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_07JFCA@shadow?5?$AA@	; `string'
	push	OFFSET FLAT:_?passName@?1??R_GetNameForView@@YAPBDXZ@4PADA
	call	?Q_strncat@@YAIPADPBDI@Z		; Q_strncat
	add	esp, 12					; 0000000cH
$L72115:

; 63   : 	if( RP_NORMALPASS( ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 483				; 000001e3H
	test	ecx, ecx
	jne	SHORT $L72117

; 64   : 		Q_strncat( passName, "general ", sizeof( passName ));

	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_08ICOB@general?5?$AA@	; `string'
	push	OFFSET FLAT:_?passName@?1??R_GetNameForView@@YAPBDXZ@4PADA
	call	?Q_strncat@@YAIPADPBDI@Z		; Q_strncat
	add	esp, 12					; 0000000cH
$L72117:

; 65   : 
; 66   : 	return passName;	

	mov	eax, OFFSET FLAT:_?passName@?1??R_GetNameForView@@YAPBDXZ@4PADA

; 67   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_GetNameForView@@YAPBDXZ ENDP				; R_GetNameForView
_TEXT	ENDS
PUBLIC	?R_InitRefState@@YAXXZ				; R_InitRefState
EXTRN	_memset:NEAR
;	COMDAT ?R_InitRefState@@YAXXZ
_TEXT	SEGMENT
?R_InitRefState@@YAXXZ PROC NEAR			; R_InitRefState, COMDAT

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 71   : 	memset( glState.stack, 0, sizeof( glState.stack ));

	push	112160					; 0001b620H
	push	0
	push	OFFSET FLAT:?glState@@3UglState_t@@A+40
	call	_memset
	add	esp, 12					; 0000000cH

; 72   : 	glState.stack_position = 0;

	mov	DWORD PTR ?glState@@3UglState_t@@A+112200, 0

; 73   : 
; 74   : 	RI = &glState.stack[glState.stack_position];

	mov	eax, DWORD PTR ?glState@@3UglState_t@@A+112200
	imul	eax, 14020				; 000036c4H
	add	eax, OFFSET FLAT:?glState@@3UglState_t@@A+40
	mov	DWORD PTR ?RI@@3PAUref_instance_t@@A, eax ; RI

; 75   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_InitRefState@@YAXXZ ENDP				; R_InitRefState
_TEXT	ENDS
PUBLIC	?R_ResetRefState@@YAXXZ				; R_ResetRefState
PUBLIC	?__LINE__Var@?1??R_ResetRefState@@YAXXZ@4FA	; `R_ResetRefState'::`2'::__LINE__Var
PUBLIC	??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
PUBLIC	??_C@_0BI@MFPO@assert?5failed?5at?5?$CFs?3?$CFi?6?$AA@ ; `string'
EXTRN	?GL_BindShader@@YAXPAUglsl_prog_s@@@Z:NEAR	; GL_BindShader
EXTRN	?gRenderfuncs@@3Urender_api_s@@A:BYTE		; gRenderfuncs
EXTRN	__fltused:NEAR
EXTRN	_memcpy:NEAR
;	COMDAT ?__LINE__Var@?1??R_ResetRefState@@YAXXZ@4FA
; File z:\xashxtsrc\client\render\r_main.cpp
_DATA	SEGMENT
?__LINE__Var@?1??R_ResetRefState@@YAXXZ@4FA DW 04eH	; `R_ResetRefState'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@
CONST	SEGMENT
??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ DB 'z:\xashxtsrc\cl'
	DB	'ient\render\r_main.cpp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MFPO@assert?5failed?5at?5?$CFs?3?$CFi?6?$AA@
CONST	SEGMENT
??_C@_0BI@MFPO@assert?5failed?5at?5?$CFs?3?$CFi?6?$AA@ DB 'assert failed '
	DB	'at %s:%i', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ?R_ResetRefState@@YAXXZ
_TEXT	SEGMENT
_prevRI$ = -4
?R_ResetRefState@@YAXXZ PROC NEAR			; R_ResetRefState, COMDAT

; 78   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 79   : 	ref_instance_t	*prevRI;
; 80   : 
; 81   : 	ASSERT( glState.stack_position > 0 );

	cmp	DWORD PTR ?glState@@3UglState_t@@A+112200, 0
	ja	SHORT $L72127
	movsx	eax, WORD PTR ?__LINE__Var@?1??R_ResetRefState@@YAXXZ@4FA ; `R_ResetRefState'::`2'::__LINE__Var
	add	eax, 3
	push	eax
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	push	OFFSET FLAT:??_C@_0BI@MFPO@assert?5failed?5at?5?$CFs?3?$CFi?6?$AA@ ; `string'
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+236
	add	esp, 12					; 0000000cH
$L72127:

; 82   : 
; 83   : 	prevRI = &glState.stack[glState.stack_position - 1];

	mov	ecx, DWORD PTR ?glState@@3UglState_t@@A+112200
	sub	ecx, 1
	imul	ecx, 14020				; 000036c4H
	add	ecx, OFFSET FLAT:?glState@@3UglState_t@@A+40
	mov	DWORD PTR _prevRI$[ebp], ecx

; 84   : 	RI = &glState.stack[glState.stack_position];

	mov	edx, DWORD PTR ?glState@@3UglState_t@@A+112200
	imul	edx, 14020				; 000036c4H
	add	edx, OFFSET FLAT:?glState@@3UglState_t@@A+40
	mov	DWORD PTR ?RI@@3PAUref_instance_t@@A, edx ; RI

; 85   : 
; 86   : 	// copy params from old refresh
; 87   : 	RI->params = prevRI->params;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _prevRI$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 88   : 	RI->viewentity = prevRI->viewentity;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _prevRI$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 89   : 	RI->fov_x = prevRI->fov_x;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _prevRI$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 90   : 	RI->fov_y = prevRI->fov_y;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _prevRI$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 91   : 	memcpy( RI->viewport, prevRI->viewport, sizeof( int[4] ));

	push	16					; 00000010H
	mov	eax, DWORD PTR _prevRI$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 32					; 00000020H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 92   : 	RI->frustum = prevRI->frustum;

	mov	esi, DWORD PTR _prevRI$[ebp]
	add	esi, 48					; 00000030H
	mov	edi, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edi, 48					; 00000030H
	mov	ecx, 31					; 0000001fH
	rep movsd

; 93   : 	RI->pvsorigin = prevRI->pvsorigin;

	mov	edx, DWORD PTR _prevRI$[ebp]
	add	edx, 180				; 000000b4H
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 180				; 000000b4H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 94   : 	RI->viewangles = prevRI->viewangles;

	mov	eax, DWORD PTR _prevRI$[ebp]
	add	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 192				; 000000c0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 95   : 	RI->vieworg = prevRI->vieworg;

	mov	ecx, DWORD PTR _prevRI$[ebp]
	add	ecx, 204				; 000000ccH
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 204				; 000000ccH
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 96   : 	RI->vforward = prevRI->vforward;

	mov	edx, DWORD PTR _prevRI$[ebp]
	add	edx, 216				; 000000d8H
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 216				; 000000d8H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 97   : 	RI->vright = prevRI->vright;

	mov	eax, DWORD PTR _prevRI$[ebp]
	add	eax, 228				; 000000e4H
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 228				; 000000e4H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 98   : 	RI->vup = prevRI->vup;

	mov	ecx, DWORD PTR _prevRI$[ebp]
	add	ecx, 240				; 000000f0H
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 240				; 000000f0H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 99   : 
; 100  : 	// store PVS data
; 101  : 	RI->viewleaf = prevRI->viewleaf;

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR _prevRI$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	mov	DWORD PTR [edx+172], ecx

; 102  : 	RI->oldviewleaf = prevRI->oldviewleaf;

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR _prevRI$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR [edx+176], ecx

; 103  : 	memcpy( RI->visbytes, prevRI->visbytes, MAX_MAP_LEAFS / 8 );

	push	4095					; 00000fffH
	mov	edx, DWORD PTR _prevRI$[ebp]
	add	edx, 672				; 000002a0H
	push	edx
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 672				; 000002a0H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 104  : 
; 105  : 	// reset some global pointers
; 106  : 	RI->num_subview_faces = 0;

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [ecx+13988], 0

; 107  : 	RI->currententity = NULL;

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [edx+16], 0

; 108  : 	RI->currentmodel = NULL;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [eax+20], 0

; 109  : 	RI->currentlight = NULL;

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [ecx+24], 0

; 110  : 	RI->reject_face = NULL;

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [edx+13992], 0

; 111  : 	GL_BindShader( NULL );

	push	0
	call	?GL_BindShader@@YAXPAUglsl_prog_s@@@Z	; GL_BindShader
	add	esp, 4

; 112  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_ResetRefState@@YAXXZ ENDP				; R_ResetRefState
_TEXT	ENDS
PUBLIC	?R_PushRefState@@YAXXZ				; R_PushRefState
PUBLIC	??_C@_0BI@CFOC@Refresh?5stack?5overflow?6?$AA@	; `string'
;	COMDAT ??_C@_0BI@CFOC@Refresh?5stack?5overflow?6?$AA@
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
??_C@_0BI@CFOC@Refresh?5stack?5overflow?6?$AA@ DB 'Refresh stack overflow'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ?R_PushRefState@@YAXXZ
_TEXT	SEGMENT
?R_PushRefState@@YAXXZ PROC NEAR			; R_PushRefState, COMDAT

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 116  : 	if( ++glState.stack_position >= MAX_REF_STACK )

	mov	eax, DWORD PTR ?glState@@3UglState_t@@A+112200
	add	eax, 1
	mov	DWORD PTR ?glState@@3UglState_t@@A+112200, eax
	cmp	DWORD PTR ?glState@@3UglState_t@@A+112200, 8
	jb	SHORT $L72134

; 117  : 		HOST_ERROR( "Refresh stack overflow\n" );

	push	OFFSET FLAT:??_C@_0BI@CFOC@Refresh?5stack?5overflow?6?$AA@ ; `string'
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+236
	add	esp, 4
$L72134:

; 118  : 
; 119  : 	RI = &glState.stack[glState.stack_position];

	mov	ecx, DWORD PTR ?glState@@3UglState_t@@A+112200
	imul	ecx, 14020				; 000036c4H
	add	ecx, OFFSET FLAT:?glState@@3UglState_t@@A+40
	mov	DWORD PTR ?RI@@3PAUref_instance_t@@A, ecx ; RI

; 120  : 	R_ResetRefState();

	call	?R_ResetRefState@@YAXXZ			; R_ResetRefState

; 121  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_PushRefState@@YAXXZ ENDP				; R_PushRefState
_TEXT	ENDS
PUBLIC	?R_PopRefState@@YAXXZ				; R_PopRefState
PUBLIC	??_C@_0BJ@CJJP@Refresh?5stack?5underflow?6?$AA@	; `string'
;	COMDAT ??_C@_0BJ@CJJP@Refresh?5stack?5underflow?6?$AA@
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
??_C@_0BJ@CJJP@Refresh?5stack?5underflow?6?$AA@ DB 'Refresh stack underfl'
	DB	'ow', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ?R_PopRefState@@YAXXZ
_TEXT	SEGMENT
?R_PopRefState@@YAXXZ PROC NEAR				; R_PopRefState, COMDAT

; 124  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 125  : 	if( --glState.stack_position < 0 )

	mov	eax, DWORD PTR ?glState@@3UglState_t@@A+112200
	sub	eax, 1
	mov	DWORD PTR ?glState@@3UglState_t@@A+112200, eax
	cmp	DWORD PTR ?glState@@3UglState_t@@A+112200, 0
	jae	SHORT $L72139

; 126  : 		HOST_ERROR( "Refresh stack underflow\n" );

	push	OFFSET FLAT:??_C@_0BJ@CJJP@Refresh?5stack?5underflow?6?$AA@ ; `string'
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+236
	add	esp, 4
$L72139:

; 127  : 	RI = &glState.stack[glState.stack_position];

	mov	ecx, DWORD PTR ?glState@@3UglState_t@@A+112200
	imul	ecx, 14020				; 000036c4H
	add	ecx, OFFSET FLAT:?glState@@3UglState_t@@A+40
	mov	DWORD PTR ?RI@@3PAUref_instance_t@@A, ecx ; RI

; 128  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_PopRefState@@YAXXZ ENDP				; R_PopRefState
_TEXT	ENDS
PUBLIC	?R_GetPrevInstance@@YAPAUref_instance_t@@XZ	; R_GetPrevInstance
PUBLIC	?__LINE__Var@?1??R_GetPrevInstance@@YAPAUref_instance_t@@XZ@4FA ; `R_GetPrevInstance'::`2'::__LINE__Var
;	COMDAT ?__LINE__Var@?1??R_GetPrevInstance@@YAPAUref_instance_t@@XZ@4FA
; File z:\xashxtsrc\client\render\r_main.cpp
_DATA	SEGMENT
?__LINE__Var@?1??R_GetPrevInstance@@YAPAUref_instance_t@@XZ@4FA DW 083H ; `R_GetPrevInstance'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?R_GetPrevInstance@@YAPAUref_instance_t@@XZ
_TEXT	SEGMENT
?R_GetPrevInstance@@YAPAUref_instance_t@@XZ PROC NEAR	; R_GetPrevInstance, COMDAT

; 131  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 132  : 	ASSERT( glState.stack_position > 0 );

	cmp	DWORD PTR ?glState@@3UglState_t@@A+112200, 0
	ja	SHORT $L72145
	movsx	eax, WORD PTR ?__LINE__Var@?1??R_GetPrevInstance@@YAPAUref_instance_t@@XZ@4FA ; `R_GetPrevInstance'::`2'::__LINE__Var
	add	eax, 1
	push	eax
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	push	OFFSET FLAT:??_C@_0BI@MFPO@assert?5failed?5at?5?$CFs?3?$CFi?6?$AA@ ; `string'
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+236
	add	esp, 12					; 0000000cH
$L72145:

; 133  : 
; 134  : 	return &glState.stack[glState.stack_position - 1];

	mov	eax, DWORD PTR ?glState@@3UglState_t@@A+112200
	sub	eax, 1
	imul	eax, 14020				; 000036c4H
	add	eax, OFFSET FLAT:?glState@@3UglState_t@@A+40

; 135  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_GetPrevInstance@@YAPAUref_instance_t@@XZ ENDP	; R_GetPrevInstance
_TEXT	ENDS
PUBLIC	?R_AllowFog@@YAXH@Z				; R_AllowFog
EXTRN	?pglIsEnabled@@3P6GEI@ZA:DWORD			; pglIsEnabled
EXTRN	?pglDisable@@3P6GXI@ZA:DWORD			; pglDisable
EXTRN	?pglEnable@@3P6GXI@ZA:DWORD			; pglEnable
_BSS	SEGMENT
_?isFogEnabled@?1??R_AllowFog@@YAXH@Z@4HA DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?R_AllowFog@@YAXH@Z
_TEXT	SEGMENT
_allowed$ = 8
?R_AllowFog@@YAXH@Z PROC NEAR				; R_AllowFog, COMDAT

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 153  : 	static int	isFogEnabled;
; 154  : 
; 155  : 	if( allowed )

	cmp	DWORD PTR _allowed$[ebp], 0
	je	SHORT $L72161

; 157  : 		if( isFogEnabled )

	cmp	DWORD PTR _?isFogEnabled@?1??R_AllowFog@@YAXH@Z@4HA, 0
	je	SHORT $L72162

; 158  : 			pglEnable( GL_FOG );

	push	2912					; 00000b60H
	call	DWORD PTR ?pglEnable@@3P6GXI@ZA		; pglEnable
$L72162:

; 160  : 	else

	jmp	SHORT $L72164
$L72161:

; 162  : 		isFogEnabled = pglIsEnabled( GL_FOG );

	push	2912					; 00000b60H
	call	DWORD PTR ?pglIsEnabled@@3P6GEI@ZA	; pglIsEnabled
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _?isFogEnabled@?1??R_AllowFog@@YAXH@Z@4HA, eax

; 163  : 
; 164  : 		if( isFogEnabled )

	cmp	DWORD PTR _?isFogEnabled@?1??R_AllowFog@@YAXH@Z@4HA, 0
	je	SHORT $L72164

; 165  : 			pglDisable( GL_FOG );

	push	2912					; 00000b60H
	call	DWORD PTR ?pglDisable@@3P6GXI@ZA	; pglDisable
$L72164:

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_AllowFog@@YAXH@Z ENDP				; R_AllowFog
_TEXT	ENDS
PUBLIC	?R_WorldToScreen@@YAHABVVector@@AAV1@@Z		; R_WorldToScreen
PUBLIC	??Amatrix4x4@@QAEPAMH@Z				; matrix4x4::operator[]
PUBLIC	??BVector@@QAEPAMXZ				; Vector::operator float *
PUBLIC	??BVector@@QBEPBMXZ				; Vector::operator float const *
PUBLIC	__real@4@3ff583126f0000000000
PUBLIC	__real@4@400fc350000000000000
PUBLIC	__real@4@3fff8000000000000000
EXTRN	??4matrix4x4@@QAEAAV0@ABV0@@Z:NEAR		; matrix4x4::operator=
;	COMDAT __real@4@3ff583126f0000000000
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
__real@4@3ff583126f0000000000 DD 03a83126fr	; 0.001
CONST	ENDS
;	COMDAT __real@4@400fc350000000000000
CONST	SEGMENT
__real@4@400fc350000000000000 DD 047c35000r	; 100000
CONST	ENDS
;	COMDAT __real@4@3fff8000000000000000
CONST	SEGMENT
__real@4@3fff8000000000000000 DD 03f800000r	; 1
CONST	ENDS
;	COMDAT ?R_WorldToScreen@@YAHABVVector@@AAV1@@Z
_TEXT	SEGMENT
_point$ = 8
_screen$ = 12
_worldToScreen$ = -64
_behind$ = -68
_w$ = -72
_invw$72213 = -76
?R_WorldToScreen@@YAHABVVector@@AAV1@@Z PROC NEAR	; R_WorldToScreen, COMDAT

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi

; 233  : 	matrix4x4	worldToScreen;

	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 234  : 	qboolean	behind;
; 235  : 	float	w;
; 236  : 
; 237  : 	worldToScreen = RI->worldviewProjectionMatrix;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 608				; 00000260H
	push	eax
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 238  : 
; 239  : 	screen[0] = worldToScreen[0][0] * point[0] + worldToScreen[1][0] * point[1] + worldToScreen[2][0] * point[2] + worldToScreen[3][0];

	push	0
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR -80+[ebp]
	push	1
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax+4]
	fadd	DWORD PTR -80+[ebp]
	fstp	DWORD PTR -84+[ebp]
	push	2
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax+8]
	fadd	DWORD PTR -84+[ebp]
	fstp	DWORD PTR -88+[ebp]
	push	3
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR -88+[ebp]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR -92+[ebp]
	mov	ecx, DWORD PTR _screen$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -92+[ebp]
	mov	DWORD PTR [eax], ecx

; 240  : 	screen[1] = worldToScreen[0][1] * point[0] + worldToScreen[1][1] * point[1] + worldToScreen[2][1] * point[2] + worldToScreen[3][1];

	push	0
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [esi+4]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR -96+[ebp]
	push	1
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [esi+4]
	fmul	DWORD PTR [eax+4]
	fadd	DWORD PTR -96+[ebp]
	fstp	DWORD PTR -100+[ebp]
	push	2
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [esi+4]
	fmul	DWORD PTR [eax+8]
	fadd	DWORD PTR -100+[ebp]
	fstp	DWORD PTR -104+[ebp]
	push	3
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR -104+[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR -108+[ebp]
	mov	ecx, DWORD PTR _screen$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, DWORD PTR -108+[ebp]
	mov	DWORD PTR [eax+4], edx

; 241  : 	w = worldToScreen[0][3] * point[0] + worldToScreen[1][3] * point[1] + worldToScreen[2][3] * point[2] + worldToScreen[3][3];

	push	0
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [esi+12]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR -112+[ebp]
	push	1
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [esi+12]
	fmul	DWORD PTR [eax+4]
	fadd	DWORD PTR -112+[ebp]
	fstp	DWORD PTR -116+[ebp]
	push	2
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [esi+12]
	fmul	DWORD PTR [eax+8]
	fadd	DWORD PTR -116+[ebp]
	fstp	DWORD PTR -120+[ebp]
	push	3
	lea	ecx, DWORD PTR _worldToScreen$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR -120+[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR _w$[ebp]

; 242  : 	screen[2] = 0.0f; // just so we have something valid here

	mov	ecx, DWORD PTR _screen$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR [eax+8], 0

; 243  : 
; 244  : 	if( w < 0.001f )

	fld	DWORD PTR _w$[ebp]
	fcomp	DWORD PTR __real@4@3ff583126f0000000000
	fnstsw	ax
	test	ah, 1
	je	SHORT $L72211

; 246  : 		screen[0] *= 100000;

	mov	ecx, DWORD PTR _screen$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR -124+[ebp], eax
	mov	eax, DWORD PTR -124+[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR __real@4@400fc350000000000000
	mov	ecx, DWORD PTR -124+[ebp]
	fstp	DWORD PTR [ecx]

; 247  : 		screen[1] *= 100000;

	mov	ecx, DWORD PTR _screen$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	add	eax, 4
	mov	DWORD PTR -128+[ebp], eax
	mov	edx, DWORD PTR -128+[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR __real@4@400fc350000000000000
	mov	eax, DWORD PTR -128+[ebp]
	fstp	DWORD PTR [eax]

; 248  : 		behind = true;

	mov	DWORD PTR _behind$[ebp], 1

; 250  : 	else

	jmp	SHORT $L72212
$L72211:

; 252  : 		float invw = 1.0f / w;

	fld	DWORD PTR __real@4@3fff8000000000000000
	fdiv	DWORD PTR _w$[ebp]
	fstp	DWORD PTR _invw$72213[ebp]

; 253  : 		screen[0] *= invw;

	mov	ecx, DWORD PTR _screen$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR -132+[ebp], eax
	mov	ecx, DWORD PTR -132+[ebp]
	fld	DWORD PTR _invw$72213[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR -132+[ebp]
	fstp	DWORD PTR [edx]

; 254  : 		screen[1] *= invw;

	mov	ecx, DWORD PTR _screen$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	add	eax, 4
	mov	DWORD PTR -136+[ebp], eax
	mov	eax, DWORD PTR -136+[ebp]
	fld	DWORD PTR _invw$72213[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR -136+[ebp]
	fstp	DWORD PTR [ecx]

; 255  : 		behind = false;

	mov	DWORD PTR _behind$[ebp], 0
$L72212:

; 257  : 
; 258  : 	return behind;

	mov	eax, DWORD PTR _behind$[ebp]

; 259  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_WorldToScreen@@YAHABVVector@@AAV1@@Z ENDP		; R_WorldToScreen
_TEXT	ENDS
;	COMDAT ??BVector@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4
??BVector@@QAEPAMXZ PROC NEAR				; Vector::operator float *, COMDAT

; 228  : 	operator float *()				{ return &x; } // Vectors will now automatically convert to float * when needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector@@QAEPAMXZ ENDP				; Vector::operator float *
_TEXT	ENDS
;	COMDAT ??BVector@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4
??BVector@@QBEPBMXZ PROC NEAR				; Vector::operator float const *, COMDAT

; 229  : 	operator const float *() const		{ return &x; } 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector@@QBEPBMXZ ENDP				; Vector::operator float const *
_TEXT	ENDS
PUBLIC	??BVector4D@@QAEPAMXZ				; Vector4D::operator float *
;	COMDAT ??Amatrix4x4@@QAEPAMH@Z
_TEXT	SEGMENT
_i$ = 8
_this$ = -4
??Amatrix4x4@@QAEPAMH@Z PROC NEAR			; matrix4x4::operator[], COMDAT

; 952  : 	float* operator[]( int i ) { return mat[i]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, eax
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Amatrix4x4@@QAEPAMH@Z ENDP				; matrix4x4::operator[]
_TEXT	ENDS
;	COMDAT ??BVector4D@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4
??BVector4D@@QAEPAMXZ PROC NEAR				; Vector4D::operator float *, COMDAT

; 325  : 	operator float *()					{ return &x; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector4D@@QAEPAMXZ ENDP				; Vector4D::operator float *
_TEXT	ENDS
PUBLIC	?R_ScreenToWorld@@YAXABVVector@@AAV1@@Z		; R_ScreenToWorld
PUBLIC	??XVector@@QAEAAV0@M@Z				; Vector::operator*=
PUBLIC	__real@4@c0008000000000000000
PUBLIC	__real@4@00000000000000000000
EXTRN	?InvertFull@matrix4x4@@QBE?AV1@XZ:NEAR		; matrix4x4::InvertFull
;	COMDAT __real@4@c0008000000000000000
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
__real@4@c0008000000000000000 DD 0c0000000r	; -2
CONST	ENDS
;	COMDAT __real@4@00000000000000000000
CONST	SEGMENT
__real@4@00000000000000000000 DD 000000000r	; 0
CONST	ENDS
;	COMDAT ?R_ScreenToWorld@@YAXABVVector@@AAV1@@Z
_TEXT	SEGMENT
$T73164 = -144
_screen$ = 8
_point$ = 12
_screenToWorld$ = -64
_temp$ = -76
_w$ = -80
?R_ScreenToWorld@@YAXABVVector@@AAV1@@Z PROC NEAR	; R_ScreenToWorld, COMDAT

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi

; 263  : 	matrix4x4	screenToWorld;

	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 264  : 	Vector	temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 265  : 	float	w;
; 266  : 
; 267  : 	screenToWorld = RI->worldviewProjectionMatrix.InvertFull();

	lea	eax, DWORD PTR $T73164[ebp]
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 608				; 00000260H
	call	?InvertFull@matrix4x4@@QBE?AV1@XZ	; matrix4x4::InvertFull
	push	eax
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 268  : 
; 269  : 	temp[0] = 2.0f * (screen[0] - RI->viewport[0]) / RI->viewport[2] - 1;

	mov	ecx, DWORD PTR _screen$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fild	DWORD PTR [ecx+32]
	fsubr	DWORD PTR [eax]
	fadd	ST(0), ST(0)
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fidiv	DWORD PTR [edx+40]
	fsub	DWORD PTR __real@4@3fff8000000000000000
	fstp	DWORD PTR -148+[ebp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -148+[ebp]
	mov	DWORD PTR [eax], ecx

; 270  : 	temp[1] = -2.0f * (screen[1] - RI->viewport[1]) / RI->viewport[3] + 1;

	mov	ecx, DWORD PTR _screen$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fild	DWORD PTR [edx+36]
	fsubr	DWORD PTR [eax+4]
	fmul	DWORD PTR __real@4@c0008000000000000000
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fidiv	DWORD PTR [eax+44]
	fadd	DWORD PTR __real@4@3fff8000000000000000
	fstp	DWORD PTR -152+[ebp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -152+[ebp]
	mov	DWORD PTR [eax+4], ecx

; 271  : 	temp[2] = 0.0f; // just so we have something valid here

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR [eax+8], 0

; 272  : 
; 273  : 	point[0] = temp[0] * screenToWorld[0][0] + temp[1] * screenToWorld[0][1] + temp[2] * screenToWorld[0][2] + screenToWorld[0][3];

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR -156+[ebp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi+4]
	fmul	DWORD PTR [eax+4]
	fadd	DWORD PTR -156+[ebp]
	fstp	DWORD PTR -160+[ebp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi+8]
	fmul	DWORD PTR [eax+8]
	fadd	DWORD PTR -160+[ebp]
	fstp	DWORD PTR -164+[ebp]
	push	0
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR -164+[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR -168+[ebp]
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, DWORD PTR -168+[ebp]
	mov	DWORD PTR [eax], edx

; 274  : 	point[1] = temp[0] * screenToWorld[1][0] + temp[1] * screenToWorld[1][1] + temp[2] * screenToWorld[1][2] + screenToWorld[1][3];

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR -172+[ebp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi+4]
	fmul	DWORD PTR [eax+4]
	fadd	DWORD PTR -172+[ebp]
	fstp	DWORD PTR -176+[ebp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi+8]
	fmul	DWORD PTR [eax+8]
	fadd	DWORD PTR -176+[ebp]
	fstp	DWORD PTR -180+[ebp]
	push	1
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR -180+[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR -184+[ebp]
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -184+[ebp]
	mov	DWORD PTR [eax+4], ecx

; 275  : 	point[2] = temp[0] * screenToWorld[2][0] + temp[1] * screenToWorld[2][1] + temp[2] * screenToWorld[2][2] + screenToWorld[2][3];

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR -188+[ebp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi+4]
	fmul	DWORD PTR [eax+4]
	fadd	DWORD PTR -188+[ebp]
	fstp	DWORD PTR -192+[ebp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi+8]
	fmul	DWORD PTR [eax+8]
	fadd	DWORD PTR -192+[ebp]
	fstp	DWORD PTR -196+[ebp]
	push	2
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR -196+[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR -200+[ebp]
	mov	ecx, DWORD PTR _point$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, DWORD PTR -200+[ebp]
	mov	DWORD PTR [eax+8], edx

; 276  : 	w = temp[0] * screenToWorld[3][0] + temp[1] * screenToWorld[3][1] + temp[2] * screenToWorld[3][2] + screenToWorld[3][3];

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	3
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR -204+[ebp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	3
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi+4]
	fmul	DWORD PTR [eax+4]
	fadd	DWORD PTR -204+[ebp]
	fstp	DWORD PTR -208+[ebp]
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	esi, eax
	push	3
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR [esi+8]
	fmul	DWORD PTR [eax+8]
	fadd	DWORD PTR -208+[ebp]
	fstp	DWORD PTR -212+[ebp]
	push	3
	lea	ecx, DWORD PTR _screenToWorld$[ebp]
	call	??Amatrix4x4@@QAEPAMH@Z			; matrix4x4::operator[]
	fld	DWORD PTR -212+[ebp]
	fadd	DWORD PTR [eax+12]
	fstp	DWORD PTR _w$[ebp]

; 277  : 	if( w ) point *= ( 1.0f / w );

	fld	DWORD PTR _w$[ebp]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L72222
	fld	DWORD PTR __real@4@3fff8000000000000000
	fdiv	DWORD PTR _w$[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _point$[ebp]
	call	??XVector@@QAEAAV0@M@Z			; Vector::operator*=
$L72222:

; 278  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_ScreenToWorld@@YAXABVVector@@AAV1@@Z ENDP		; R_ScreenToWorld
_TEXT	ENDS
;	COMDAT ??XVector@@QAEAAV0@M@Z
_TEXT	SEGMENT
_s$ = 8
_this$ = -4
??XVector@@QAEAAV0@M@Z PROC NEAR			; Vector::operator*=, COMDAT

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 		x *= s; y *= s; z *= s;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _s$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _s$[ebp]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _s$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 176  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 177  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XVector@@QAEAAV0@M@Z ENDP				; Vector::operator*=
_TEXT	ENDS
PUBLIC	?R_CheckChanges@@YAXXZ				; R_CheckChanges
PUBLIC	?R_StudioClearLightCache@@YAXXZ			; R_StudioClearLightCache
PUBLIC	__real@4@4001c000000000000000
PUBLIC	??_C@_0BD@PHDP@gl_recursion_depth?$AA@		; `string'
EXTRN	?gEngfuncs@@3Ucl_enginefuncs_s@@A:BYTE		; gEngfuncs
EXTRN	?r_test@@3PAUcvar_s@@A:DWORD			; r_test
EXTRN	?r_shadows@@3PAUcvar_s@@A:DWORD			; r_shadows
EXTRN	?r_lightmap@@3PAUcvar_s@@A:DWORD		; r_lightmap
EXTRN	?r_fullbright@@3PAUcvar_s@@A:DWORD		; r_fullbright
EXTRN	?r_drawentities@@3PAUcvar_s@@A:DWORD		; r_drawentities
EXTRN	?r_allow_mirrors@@3PAUcvar_s@@A:DWORD		; r_allow_mirrors
EXTRN	?r_allow_portals@@3PAUcvar_s@@A:DWORD		; r_allow_portals
EXTRN	?r_allow_screens@@3PAUcvar_s@@A:DWORD		; r_allow_screens
EXTRN	?r_recursion_depth@@3PAUcvar_s@@A:DWORD		; r_recursion_depth
EXTRN	?r_detailtextures@@3PAUcvar_s@@A:DWORD		; r_detailtextures
EXTRN	?r_lighting_modulate@@3PAUcvar_s@@A:DWORD	; r_lighting_modulate
EXTRN	?r_recursive_world_node@@3PAUcvar_s@@A:DWORD	; r_recursive_world_node
EXTRN	?r_grass@@3PAUcvar_s@@A:DWORD			; r_grass
EXTRN	?vid_gamma@@3PAUcvar_s@@A:DWORD			; vid_gamma
EXTRN	?vid_brightness@@3PAUcvar_s@@A:DWORD		; vid_brightness
_BSS	SEGMENT
_?fog_enabled_old@?1??R_CheckChanges@@YAXXZ@4_NA DB 01H DUP (?)
	ALIGN	4

_?waveheight_old@?1??R_CheckChanges@@YAXXZ@4MA DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BD@PHDP@gl_recursion_depth?$AA@
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
??_C@_0BD@PHDP@gl_recursion_depth?$AA@ DB 'gl_recursion_depth', 00H ; `string'
CONST	ENDS
;	COMDAT __real@4@4001c000000000000000
CONST	SEGMENT
__real@4@4001c000000000000000 DD 040c00000r	; 6
CONST	ENDS
;	COMDAT ?R_CheckChanges@@YAXXZ
_TEXT	SEGMENT
_settings_changed$ = -4
_depth$72232 = -8
_i$72248 = -12
?R_CheckChanges@@YAXXZ PROC NEAR			; R_CheckChanges, COMDAT

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 287  : 	static bool	fog_enabled_old;
; 288  : 	static float	waveheight_old;
; 289  : 	bool		settings_changed = false;

	mov	BYTE PTR _settings_changed$[ebp], 0

; 290  : 
; 291  : 	if( FBitSet( r_recursion_depth->flags, FCVAR_CHANGED ))

	mov	eax, DWORD PTR ?r_recursion_depth@@3PAUcvar_s@@A ; r_recursion_depth
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8192				; 00002000H
	test	ecx, ecx
	je	SHORT $L72231

; 293  : 		float depth = bound( 0.0f, r_recursion_depth->value, MAX_REF_STACK - 2 );

	mov	edx, DWORD PTR ?r_recursion_depth@@3PAUcvar_s@@A ; r_recursion_depth
	fld	DWORD PTR [edx+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L73177
	mov	eax, DWORD PTR ?r_recursion_depth@@3PAUcvar_s@@A ; r_recursion_depth
	fld	DWORD PTR [eax+12]
	fcomp	DWORD PTR __real@4@4001c000000000000000
	fnstsw	ax
	test	ah, 1
	je	SHORT $L73175
	mov	ecx, DWORD PTR ?r_recursion_depth@@3PAUcvar_s@@A ; r_recursion_depth
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR -16+[ebp]
	jmp	SHORT $L73176
$L73175:
	mov	DWORD PTR -16+[ebp], 1086324736		; 40c00000H
$L73176:
	mov	edx, DWORD PTR -16+[ebp]
	mov	DWORD PTR -20+[ebp], edx
	jmp	SHORT $L73178
$L73177:
	mov	DWORD PTR -20+[ebp], 0
$L73178:
	mov	eax, DWORD PTR -20+[ebp]
	mov	DWORD PTR _depth$72232[ebp], eax

; 294  : 		CVAR_SET_FLOAT( "gl_recursion_depth", depth );

	mov	ecx, DWORD PTR _depth$72232[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_0BD@PHDP@gl_recursion_depth?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+148
	add	esp, 8

; 295  : 		ClearBits( r_recursion_depth->flags, FCVAR_CHANGED );

	mov	edx, DWORD PTR ?r_recursion_depth@@3PAUcvar_s@@A ; r_recursion_depth
	mov	eax, DWORD PTR [edx+8]
	and	ah, -33					; ffffffdfH
	mov	ecx, DWORD PTR ?r_recursion_depth@@3PAUcvar_s@@A ; r_recursion_depth
	mov	DWORD PTR [ecx+8], eax
$L72231:

; 297  : 
; 298  : 	if( FBitSet( r_drawentities->flags, FCVAR_CHANGED ))

	mov	edx, DWORD PTR ?r_drawentities@@3PAUcvar_s@@A ; r_drawentities
	mov	eax, DWORD PTR [edx+8]
	and	eax, 8192				; 00002000H
	test	eax, eax
	je	SHORT $L72234

; 300  : 		ClearBits( r_drawentities->flags, FCVAR_CHANGED );

	mov	ecx, DWORD PTR ?r_drawentities@@3PAUcvar_s@@A ; r_drawentities
	mov	edx, DWORD PTR [ecx+8]
	and	dh, -33					; ffffffdfH
	mov	eax, DWORD PTR ?r_drawentities@@3PAUcvar_s@@A ; r_drawentities
	mov	DWORD PTR [eax+8], edx

; 301  : 		tr.params_changed = true;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1411996, 1
$L72234:

; 303  : 
; 304  : 	if( FBitSet( r_lightmap->flags, FCVAR_CHANGED ))

	mov	ecx, DWORD PTR ?r_lightmap@@3PAUcvar_s@@A ; r_lightmap
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 8192				; 00002000H
	test	edx, edx
	je	SHORT $L72235

; 306  : 		ClearBits( r_lightmap->flags, FCVAR_CHANGED );

	mov	eax, DWORD PTR ?r_lightmap@@3PAUcvar_s@@A ; r_lightmap
	mov	ecx, DWORD PTR [eax+8]
	and	ch, -33					; ffffffdfH
	mov	edx, DWORD PTR ?r_lightmap@@3PAUcvar_s@@A ; r_lightmap
	mov	DWORD PTR [edx+8], ecx

; 307  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72235:

; 309  : 
; 310  : 	if( FBitSet( r_allow_mirrors->flags, FCVAR_CHANGED ))

	mov	eax, DWORD PTR ?r_allow_mirrors@@3PAUcvar_s@@A ; r_allow_mirrors
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8192				; 00002000H
	test	ecx, ecx
	je	SHORT $L72236

; 312  : 		ClearBits( r_allow_mirrors->flags, FCVAR_CHANGED );

	mov	edx, DWORD PTR ?r_allow_mirrors@@3PAUcvar_s@@A ; r_allow_mirrors
	mov	eax, DWORD PTR [edx+8]
	and	ah, -33					; ffffffdfH
	mov	ecx, DWORD PTR ?r_allow_mirrors@@3PAUcvar_s@@A ; r_allow_mirrors
	mov	DWORD PTR [ecx+8], eax

; 313  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72236:

; 315  : 
; 316  : 	if( FBitSet( r_allow_portals->flags, FCVAR_CHANGED ))

	mov	edx, DWORD PTR ?r_allow_portals@@3PAUcvar_s@@A ; r_allow_portals
	mov	eax, DWORD PTR [edx+8]
	and	eax, 8192				; 00002000H
	test	eax, eax
	je	SHORT $L72237

; 318  : 		ClearBits( r_allow_portals->flags, FCVAR_CHANGED );

	mov	ecx, DWORD PTR ?r_allow_portals@@3PAUcvar_s@@A ; r_allow_portals
	mov	edx, DWORD PTR [ecx+8]
	and	dh, -33					; ffffffdfH
	mov	eax, DWORD PTR ?r_allow_portals@@3PAUcvar_s@@A ; r_allow_portals
	mov	DWORD PTR [eax+8], edx

; 319  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72237:

; 321  : 
; 322  : 	if( FBitSet( r_allow_screens->flags, FCVAR_CHANGED ))

	mov	ecx, DWORD PTR ?r_allow_screens@@3PAUcvar_s@@A ; r_allow_screens
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 8192				; 00002000H
	test	edx, edx
	je	SHORT $L72238

; 324  : 		ClearBits( r_allow_screens->flags, FCVAR_CHANGED );

	mov	eax, DWORD PTR ?r_allow_screens@@3PAUcvar_s@@A ; r_allow_screens
	mov	ecx, DWORD PTR [eax+8]
	and	ch, -33					; ffffffdfH
	mov	edx, DWORD PTR ?r_allow_screens@@3PAUcvar_s@@A ; r_allow_screens
	mov	DWORD PTR [edx+8], ecx

; 325  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72238:

; 327  : 
; 328  : 	if( FBitSet( r_detailtextures->flags, FCVAR_CHANGED ))

	mov	eax, DWORD PTR ?r_detailtextures@@3PAUcvar_s@@A ; r_detailtextures
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8192				; 00002000H
	test	ecx, ecx
	je	SHORT $L72239

; 330  : 		ClearBits( r_detailtextures->flags, FCVAR_CHANGED );

	mov	edx, DWORD PTR ?r_detailtextures@@3PAUcvar_s@@A ; r_detailtextures
	mov	eax, DWORD PTR [edx+8]
	and	ah, -33					; ffffffdfH
	mov	ecx, DWORD PTR ?r_detailtextures@@3PAUcvar_s@@A ; r_detailtextures
	mov	DWORD PTR [ecx+8], eax

; 331  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72239:

; 333  : 
; 334  : 	if( FBitSet( r_fullbright->flags, FCVAR_CHANGED ))

	mov	edx, DWORD PTR ?r_fullbright@@3PAUcvar_s@@A ; r_fullbright
	mov	eax, DWORD PTR [edx+8]
	and	eax, 8192				; 00002000H
	test	eax, eax
	je	SHORT $L72240

; 336  : 		ClearBits( r_fullbright->flags, FCVAR_CHANGED );

	mov	ecx, DWORD PTR ?r_fullbright@@3PAUcvar_s@@A ; r_fullbright
	mov	edx, DWORD PTR [ecx+8]
	and	dh, -33					; ffffffdfH
	mov	eax, DWORD PTR ?r_fullbright@@3PAUcvar_s@@A ; r_fullbright
	mov	DWORD PTR [eax+8], edx

; 337  : 		R_StudioClearLightCache();

	call	?R_StudioClearLightCache@@YAXXZ		; R_StudioClearLightCache

; 338  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72240:

; 340  : 
; 341  : 	if( FBitSet( r_lighting_modulate->flags, FCVAR_CHANGED ))

	mov	ecx, DWORD PTR ?r_lighting_modulate@@3PAUcvar_s@@A ; r_lighting_modulate
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 8192				; 00002000H
	test	edx, edx
	je	SHORT $L72241

; 343  : 		ClearBits( r_lighting_modulate->flags, FCVAR_CHANGED );

	mov	eax, DWORD PTR ?r_lighting_modulate@@3PAUcvar_s@@A ; r_lighting_modulate
	mov	ecx, DWORD PTR [eax+8]
	and	ch, -33					; ffffffdfH
	mov	edx, DWORD PTR ?r_lighting_modulate@@3PAUcvar_s@@A ; r_lighting_modulate
	mov	DWORD PTR [edx+8], ecx

; 344  : 		R_StudioClearLightCache();

	call	?R_StudioClearLightCache@@YAXXZ		; R_StudioClearLightCache

; 345  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72241:

; 347  : 
; 348  : 	if( FBitSet( r_test->flags, FCVAR_CHANGED ))

	mov	eax, DWORD PTR ?r_test@@3PAUcvar_s@@A	; r_test
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8192				; 00002000H
	test	ecx, ecx
	je	SHORT $L72242

; 350  : 		ClearBits( r_test->flags, FCVAR_CHANGED );

	mov	edx, DWORD PTR ?r_test@@3PAUcvar_s@@A	; r_test
	mov	eax, DWORD PTR [edx+8]
	and	ah, -33					; ffffffdfH
	mov	ecx, DWORD PTR ?r_test@@3PAUcvar_s@@A	; r_test
	mov	DWORD PTR [ecx+8], eax

; 351  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72242:

; 353  : 
; 354  : 	if( FBitSet( r_recursive_world_node->flags, FCVAR_CHANGED ))

	mov	edx, DWORD PTR ?r_recursive_world_node@@3PAUcvar_s@@A ; r_recursive_world_node
	mov	eax, DWORD PTR [edx+8]
	and	eax, 8192				; 00002000H
	test	eax, eax
	je	SHORT $L72243

; 356  : 		ClearBits( r_recursive_world_node->flags, FCVAR_CHANGED );

	mov	ecx, DWORD PTR ?r_recursive_world_node@@3PAUcvar_s@@A ; r_recursive_world_node
	mov	edx, DWORD PTR [ecx+8]
	and	dh, -33					; ffffffdfH
	mov	eax, DWORD PTR ?r_recursive_world_node@@3PAUcvar_s@@A ; r_recursive_world_node
	mov	DWORD PTR [eax+8], edx

; 357  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72243:

; 359  : 
; 360  : 	if( FBitSet( r_grass->flags, FCVAR_CHANGED ))

	mov	ecx, DWORD PTR ?r_grass@@3PAUcvar_s@@A	; r_grass
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 8192				; 00002000H
	test	edx, edx
	je	SHORT $L72244

; 362  : 		ClearBits( r_grass->flags, FCVAR_CHANGED );

	mov	eax, DWORD PTR ?r_grass@@3PAUcvar_s@@A	; r_grass
	mov	ecx, DWORD PTR [eax+8]
	and	ch, -33					; ffffffdfH
	mov	edx, DWORD PTR ?r_grass@@3PAUcvar_s@@A	; r_grass
	mov	DWORD PTR [edx+8], ecx

; 363  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72244:

; 365  : 
; 366  : 	if( FBitSet( r_shadows->flags, FCVAR_CHANGED ))

	mov	eax, DWORD PTR ?r_shadows@@3PAUcvar_s@@A ; r_shadows
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8192				; 00002000H
	test	ecx, ecx
	je	SHORT $L72245

; 368  : 		ClearBits( r_shadows->flags, FCVAR_CHANGED );

	mov	edx, DWORD PTR ?r_shadows@@3PAUcvar_s@@A ; r_shadows
	mov	eax, DWORD PTR [edx+8]
	and	ah, -33					; ffffffdfH
	mov	ecx, DWORD PTR ?r_shadows@@3PAUcvar_s@@A ; r_shadows
	mov	DWORD PTR [ecx+8], eax

; 369  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72245:

; 371  : 
; 372  : 	if( FBitSet( vid_gamma->flags, FCVAR_CHANGED ) || FBitSet( vid_brightness->flags, FCVAR_CHANGED ))

	mov	edx, DWORD PTR ?vid_gamma@@3PAUcvar_s@@A ; vid_gamma
	mov	eax, DWORD PTR [edx+8]
	and	eax, 8192				; 00002000H
	test	eax, eax
	jne	SHORT $L72247
	mov	ecx, DWORD PTR ?vid_brightness@@3PAUcvar_s@@A ; vid_brightness
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 8192				; 00002000H
	test	edx, edx
	je	SHORT $L72246
$L72247:

; 374  : 		for( int i = 0; i < worldmodel->numsurfaces; i++ )

	mov	DWORD PTR _i$72248[ebp], 0
	jmp	SHORT $L72249
$L72250:
	mov	eax, DWORD PTR _i$72248[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72248[ebp], eax
$L72249:
	mov	ecx, DWORD PTR ?worldmodel@@3PAUmodel_s@@A ; worldmodel
	mov	edx, DWORD PTR _i$72248[ebp]
	cmp	edx, DWORD PTR [ecx+176]
	jge	SHORT $L72251

; 375  : 			SetBits( worldmodel->surfaces[i].flags, SURF_LM_UPDATE );

	mov	eax, DWORD PTR _i$72248[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR ?worldmodel@@3PAUmodel_s@@A ; worldmodel
	mov	edx, DWORD PTR [ecx+180]
	mov	eax, DWORD PTR [edx+eax+8]
	or	eax, 268435456				; 10000000H
	mov	ecx, DWORD PTR _i$72248[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR ?worldmodel@@3PAUmodel_s@@A ; worldmodel
	mov	edx, DWORD PTR [edx+180]
	mov	DWORD PTR [edx+ecx+8], eax
	jmp	SHORT $L72250
$L72251:

; 376  : 		R_StudioClearLightCache();

	call	?R_StudioClearLightCache@@YAXXZ		; R_StudioClearLightCache

; 377  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72246:

; 379  : 
; 380  : 	if( tr.fogEnabled != fog_enabled_old )

	xor	eax, eax
	mov	al, BYTE PTR ?tr@@3Uref_globals_t@@A+1411956
	xor	ecx, ecx
	mov	cl, BYTE PTR _?fog_enabled_old@?1??R_CheckChanges@@YAXXZ@4_NA
	cmp	eax, ecx
	je	SHORT $L72252

; 382  : 		fog_enabled_old = tr.fogEnabled;

	mov	dl, BYTE PTR ?tr@@3Uref_globals_t@@A+1411956
	mov	BYTE PTR _?fog_enabled_old@?1??R_CheckChanges@@YAXXZ@4_NA, dl

; 383  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72252:

; 385  : 
; 386  : 	if( tr.movevars->waveHeight != waveheight_old )

	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	fld	DWORD PTR [eax+60]
	fcomp	DWORD PTR _?waveheight_old@?1??R_CheckChanges@@YAXXZ@4MA
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L72253

; 388  : 		waveheight_old = tr.movevars->waveHeight;

	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _?waveheight_old@?1??R_CheckChanges@@YAXXZ@4MA, edx

; 389  : 		settings_changed = true;

	mov	BYTE PTR _settings_changed$[ebp], 1
$L72253:

; 391  : 
; 392  : 	if( settings_changed )

	mov	eax, DWORD PTR _settings_changed$[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L72254

; 394  : 		tr.glsl_valid_sequence++; // now all uber-shaders are invalidate and possible need for recompile

	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+1412000
	add	ecx, 1
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1412000, ecx

; 395  : 		tr.params_changed = true;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1411996, 1
$L72254:

; 397  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_CheckChanges@@YAXXZ ENDP				; R_CheckChanges
_TEXT	ENDS
EXTRN	?ClearLightCache@CStudioModelRenderer@@QAEXXZ:NEAR ; CStudioModelRenderer::ClearLightCache
;	COMDAT ?R_StudioClearLightCache@@YAXXZ
_TEXT	SEGMENT
?R_StudioClearLightCache@@YAXXZ PROC NEAR		; R_StudioClearLightCache, COMDAT

; 706  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 707  : 	g_StudioRenderer.ClearLightCache();

	mov	ecx, OFFSET FLAT:?g_StudioRenderer@@3VCStudioModelRenderer@@A
	call	?ClearLightCache@CStudioModelRenderer@@QAEXXZ ; CStudioModelRenderer::ClearLightCache

; 708  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_StudioClearLightCache@@YAXXZ ENDP			; R_StudioClearLightCache
_TEXT	ENDS
PUBLIC	?CL_FxBlend@@YAHPAUcl_entity_s@@@Z		; CL_FxBlend
PUBLIC	??GVector@@QBE?AV0@ABV0@@Z			; Vector::operator-
PUBLIC	__real@4@4007b580000000000000
PUBLIC	__real@8@40058000000000000000
PUBLIC	__real@8@40028000000000000000
PUBLIC	__real@8@40038000000000000000
PUBLIC	__real@8@40018000000000000000
PUBLIC	__real@8@4003a000000000000000
PUBLIC	__real@8@40049000000000000000
PUBLIC	__real@8@40038800000000000000
PUBLIC	__real@8@4003b800000000000000
PUBLIC	__real@4@4005c800000000000000
PUBLIC	__real@4@3ff6a3d70a0000000000
PUBLIC	?DotProduct@@YAMABVVector@@0@Z			; DotProduct
EXTRN	_sin:NEAR
EXTRN	__ftol:NEAR
;	COMDAT __real@4@4007b580000000000000
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
__real@4@4007b580000000000000 DD 043b58000r	; 363
CONST	ENDS
;	COMDAT __real@8@40058000000000000000
CONST	SEGMENT
__real@8@40058000000000000000 DQ 04050000000000000r ; 64
CONST	ENDS
;	COMDAT __real@8@40028000000000000000
CONST	SEGMENT
__real@8@40028000000000000000 DQ 04020000000000000r ; 8
CONST	ENDS
;	COMDAT __real@8@40038000000000000000
CONST	SEGMENT
__real@8@40038000000000000000 DQ 04030000000000000r ; 16
CONST	ENDS
;	COMDAT __real@8@40018000000000000000
CONST	SEGMENT
__real@8@40018000000000000000 DQ 04010000000000000r ; 4
CONST	ENDS
;	COMDAT __real@8@4003a000000000000000
CONST	SEGMENT
__real@8@4003a000000000000000 DQ 04034000000000000r ; 20
CONST	ENDS
;	COMDAT __real@8@40049000000000000000
CONST	SEGMENT
__real@8@40049000000000000000 DQ 04042000000000000r ; 36
CONST	ENDS
;	COMDAT __real@8@40038800000000000000
CONST	SEGMENT
__real@8@40038800000000000000 DQ 04031000000000000r ; 17
CONST	ENDS
;	COMDAT __real@8@4003b800000000000000
CONST	SEGMENT
__real@8@4003b800000000000000 DQ 04037000000000000r ; 23
CONST	ENDS
;	COMDAT __real@4@4005c800000000000000
CONST	SEGMENT
__real@4@4005c800000000000000 DD 042c80000r	; 100
CONST	ENDS
;	COMDAT __real@4@3ff6a3d70a0000000000
CONST	SEGMENT
__real@4@3ff6a3d70a0000000000 DD 03b23d70ar	; 0.0025
CONST	ENDS
;	COMDAT ?CL_FxBlend@@YAHPAUcl_entity_s@@@Z
_TEXT	SEGMENT
$T73185 = -36
_e$ = 8
_blend$ = -4
_offset$ = -8
_dist$ = -12
_tmp$ = -24
?CL_FxBlend@@YAHPAUcl_entity_s@@@Z PROC NEAR		; CL_FxBlend, COMDAT

; 405  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	ebx
	push	esi
	push	edi

; 406  : 	int	blend = 0;

	mov	DWORD PTR _blend$[ebp], 0

; 407  : 	float	offset, dist;
; 408  : 	Vector	tmp;

	lea	ecx, DWORD PTR _tmp$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 409  : 
; 410  : 	if( RENDER_GET_PARM( PARAM_GAMEPAUSED, 0 ))

	push	0
	push	18					; 00000012H
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A
	add	esp, 8
	test	eax, eax
	je	SHORT $L72262

; 411  : 		return e->curstate.renderamt;

	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [eax+764]
	jmp	$L72257
$L72262:

; 412  : 
; 413  : 	offset = ((int)e->index ) * 363.0f; // Use ent index to de-sync these fx

	mov	ecx, DWORD PTR _e$[ebp]
	fild	DWORD PTR [ecx]
	fmul	DWORD PTR __real@4@4007b580000000000000
	fstp	DWORD PTR _offset$[ebp]

; 416  : 	{

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+772]
	mov	DWORD PTR -40+[ebp], eax
	mov	ecx, DWORD PTR -40+[ebp]
	sub	ecx, 1
	mov	DWORD PTR -40+[ebp], ecx
	cmp	DWORD PTR -40+[ebp], 15			; 0000000fH
	ja	$L72311
	mov	edx, DWORD PTR -40+[ebp]
	jmp	DWORD PTR $L73215[edx*4]
$L72268:

; 417  : 	case kRenderFxPulseSlowWide:
; 418  : 		blend = e->curstate.renderamt + 0x40 * sin( tr.time * 2 + offset );	

	mov	eax, DWORD PTR _e$[ebp]
	fild	DWORD PTR [eax+764]
	fstp	QWORD PTR -48+[ebp]
	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fadd	ST(0), ST(0)
	fadd	DWORD PTR _offset$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fmul	QWORD PTR __real@8@40058000000000000000
	fadd	QWORD PTR -48+[ebp]
	call	__ftol
	mov	DWORD PTR _blend$[ebp], eax

; 419  : 		break;

	jmp	$L72265
$L72269:

; 420  : 	case kRenderFxPulseFastWide:
; 421  : 		blend = e->curstate.renderamt + 0x40 * sin( tr.time * 8 + offset );

	mov	ecx, DWORD PTR _e$[ebp]
	fild	DWORD PTR [ecx+764]
	fstp	QWORD PTR -56+[ebp]
	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fmul	QWORD PTR __real@8@40028000000000000000
	fadd	DWORD PTR _offset$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fmul	QWORD PTR __real@8@40058000000000000000
	fadd	QWORD PTR -56+[ebp]
	call	__ftol
	mov	DWORD PTR _blend$[ebp], eax

; 422  : 		break;

	jmp	$L72265
$L72270:

; 423  : 	case kRenderFxPulseSlow:
; 424  : 		blend = e->curstate.renderamt + 0x10 * sin( tr.time * 2 + offset );

	mov	edx, DWORD PTR _e$[ebp]
	fild	DWORD PTR [edx+764]
	fstp	QWORD PTR -64+[ebp]
	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fadd	ST(0), ST(0)
	fadd	DWORD PTR _offset$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fmul	QWORD PTR __real@8@40038000000000000000
	fadd	QWORD PTR -64+[ebp]
	call	__ftol
	mov	DWORD PTR _blend$[ebp], eax

; 425  : 		break;

	jmp	$L72265
$L72271:

; 426  : 	case kRenderFxPulseFast:
; 427  : 		blend = e->curstate.renderamt + 0x10 * sin( tr.time * 8 + offset );

	mov	eax, DWORD PTR _e$[ebp]
	fild	DWORD PTR [eax+764]
	fstp	QWORD PTR -72+[ebp]
	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fmul	QWORD PTR __real@8@40028000000000000000
	fadd	DWORD PTR _offset$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fmul	QWORD PTR __real@8@40038000000000000000
	fadd	QWORD PTR -72+[ebp]
	call	__ftol
	mov	DWORD PTR _blend$[ebp], eax

; 428  : 		break;

	jmp	$L72265
$L72272:

; 429  : 	case kRenderFxFadeSlow:			
; 430  : 		if( RP_NORMALPASS( ))

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx]
	and	edx, 483				; 000001e3H
	test	edx, edx
	jne	SHORT $L72275

; 432  : 			if( e->curstate.renderamt > 0 ) 

	mov	eax, DWORD PTR _e$[ebp]
	cmp	DWORD PTR [eax+764], 0
	jle	SHORT $L72274

; 433  : 				e->curstate.renderamt -= 1;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+764]
	sub	edx, 1
	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax+764], edx

; 434  : 			else e->curstate.renderamt = 0;

	jmp	SHORT $L72275
$L72274:
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [ecx+764], 0
$L72275:

; 436  : 		blend = e->curstate.renderamt;

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+764]
	mov	DWORD PTR _blend$[ebp], eax

; 437  : 		break;

	jmp	$L72265
$L72276:

; 438  : 	case kRenderFxFadeFast:
; 439  : 		if( RP_NORMALPASS( ))

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx]
	and	edx, 483				; 000001e3H
	test	edx, edx
	jne	SHORT $L72279

; 441  : 			if( e->curstate.renderamt > 3 ) 

	mov	eax, DWORD PTR _e$[ebp]
	cmp	DWORD PTR [eax+764], 3
	jle	SHORT $L72278

; 442  : 				e->curstate.renderamt -= 4;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+764]
	sub	edx, 4
	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax+764], edx

; 443  : 			else e->curstate.renderamt = 0;

	jmp	SHORT $L72279
$L72278:
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [ecx+764], 0
$L72279:

; 445  : 		blend = e->curstate.renderamt;

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+764]
	mov	DWORD PTR _blend$[ebp], eax

; 446  : 		break;

	jmp	$L72265
$L72280:

; 447  : 	case kRenderFxSolidSlow:
; 448  : 		if( RP_NORMALPASS( ))

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx]
	and	edx, 483				; 000001e3H
	test	edx, edx
	jne	SHORT $L72283

; 450  : 			if( e->curstate.renderamt < 255 ) 

	mov	eax, DWORD PTR _e$[ebp]
	cmp	DWORD PTR [eax+764], 255		; 000000ffH
	jge	SHORT $L72282

; 451  : 				e->curstate.renderamt += 1;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+764]
	add	edx, 1
	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax+764], edx

; 452  : 			else e->curstate.renderamt = 255;

	jmp	SHORT $L72283
$L72282:
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [ecx+764], 255		; 000000ffH
$L72283:

; 454  : 		blend = e->curstate.renderamt;

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+764]
	mov	DWORD PTR _blend$[ebp], eax

; 455  : 		break;

	jmp	$L72265
$L72284:

; 456  : 	case kRenderFxSolidFast:
; 457  : 		if( RP_NORMALPASS( ))

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx]
	and	edx, 483				; 000001e3H
	test	edx, edx
	jne	SHORT $L72287

; 459  : 			if( e->curstate.renderamt < 252 ) 

	mov	eax, DWORD PTR _e$[ebp]
	cmp	DWORD PTR [eax+764], 252		; 000000fcH
	jge	SHORT $L72286

; 460  : 				e->curstate.renderamt += 4;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+764]
	add	edx, 4
	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax+764], edx

; 461  : 			else e->curstate.renderamt = 255;

	jmp	SHORT $L72287
$L72286:
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [ecx+764], 255		; 000000ffH
$L72287:

; 463  : 		blend = e->curstate.renderamt;

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+764]
	mov	DWORD PTR _blend$[ebp], eax

; 464  : 		break;

	jmp	$L72265
$L72288:

; 465  : 	case kRenderFxStrobeSlow:
; 466  : 		blend = 20 * sin( tr.time * 4 + offset );

	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fmul	QWORD PTR __real@8@40018000000000000000
	fadd	DWORD PTR _offset$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fmul	QWORD PTR __real@8@4003a000000000000000
	call	__ftol
	mov	DWORD PTR _blend$[ebp], eax

; 467  : 		if( blend < 0 ) blend = 0;

	cmp	DWORD PTR _blend$[ebp], 0
	jge	SHORT $L72289
	mov	DWORD PTR _blend$[ebp], 0

; 468  : 		else blend = e->curstate.renderamt;

	jmp	SHORT $L72290
$L72289:
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+764]
	mov	DWORD PTR _blend$[ebp], edx
$L72290:

; 469  : 		break;

	jmp	$L72265
$L72291:

; 470  : 	case kRenderFxStrobeFast:
; 471  : 		blend = 20 * sin( tr.time * 16 + offset );

	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fmul	QWORD PTR __real@8@40038000000000000000
	fadd	DWORD PTR _offset$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fmul	QWORD PTR __real@8@4003a000000000000000
	call	__ftol
	mov	DWORD PTR _blend$[ebp], eax

; 472  : 		if( blend < 0 ) blend = 0;

	cmp	DWORD PTR _blend$[ebp], 0
	jge	SHORT $L72292
	mov	DWORD PTR _blend$[ebp], 0

; 473  : 		else blend = e->curstate.renderamt;

	jmp	SHORT $L72293
$L72292:
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+764]
	mov	DWORD PTR _blend$[ebp], ecx
$L72293:

; 474  : 		break;

	jmp	$L72265
$L72294:

; 475  : 	case kRenderFxStrobeFaster:
; 476  : 		blend = 20 * sin( tr.time * 36 + offset );

	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fmul	QWORD PTR __real@8@40049000000000000000
	fadd	DWORD PTR _offset$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fmul	QWORD PTR __real@8@4003a000000000000000
	call	__ftol
	mov	DWORD PTR _blend$[ebp], eax

; 477  : 		if( blend < 0 ) blend = 0;

	cmp	DWORD PTR _blend$[ebp], 0
	jge	SHORT $L72295
	mov	DWORD PTR _blend$[ebp], 0

; 478  : 		else blend = e->curstate.renderamt;

	jmp	SHORT $L72296
$L72295:
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+764]
	mov	DWORD PTR _blend$[ebp], eax
$L72296:

; 479  : 		break;

	jmp	$L72265
$L72297:

; 480  : 	case kRenderFxFlickerSlow:
; 481  : 		blend = 20 * (sin( tr.time * 2 ) + sin( tr.time * 17 + offset ));

	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fadd	ST(0), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	fstp	QWORD PTR -80+[ebp]
	add	esp, 8
	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fmul	QWORD PTR __real@8@40038800000000000000
	fadd	DWORD PTR _offset$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fadd	QWORD PTR -80+[ebp]
	fmul	QWORD PTR __real@8@4003a000000000000000
	call	__ftol
	mov	DWORD PTR _blend$[ebp], eax

; 482  : 		if( blend < 0 ) blend = 0;

	cmp	DWORD PTR _blend$[ebp], 0
	jge	SHORT $L72298
	mov	DWORD PTR _blend$[ebp], 0

; 483  : 		else blend = e->curstate.renderamt;

	jmp	SHORT $L72299
$L72298:
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+764]
	mov	DWORD PTR _blend$[ebp], edx
$L72299:

; 484  : 		break;

	jmp	$L72265
$L72300:

; 485  : 	case kRenderFxFlickerFast:
; 486  : 		blend = 20 * (sin( tr.time * 16 ) + sin( tr.time * 23 + offset ));

	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fmul	QWORD PTR __real@8@40038000000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	fstp	QWORD PTR -88+[ebp]
	add	esp, 8
	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fmul	QWORD PTR __real@8@4003b800000000000000
	fadd	DWORD PTR _offset$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fadd	QWORD PTR -88+[ebp]
	fmul	QWORD PTR __real@8@4003a000000000000000
	call	__ftol
	mov	DWORD PTR _blend$[ebp], eax

; 487  : 		if( blend < 0 ) blend = 0;

	cmp	DWORD PTR _blend$[ebp], 0
	jge	SHORT $L72301
	mov	DWORD PTR _blend$[ebp], 0

; 488  : 		else blend = e->curstate.renderamt;

	jmp	SHORT $L72302
$L72301:
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+764]
	mov	DWORD PTR _blend$[ebp], ecx
$L72302:

; 489  : 		break;

	jmp	$L72265
$L72303:

; 490  : 	case kRenderFxHologram:
; 491  : 	case kRenderFxDistort:
; 492  : 		tmp = e->origin - RI->vieworg;

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 204				; 000000ccH
	push	edx
	lea	eax, DWORD PTR $T73185[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	add	ecx, 2888				; 00000b48H
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tmp$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tmp$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _tmp$[ebp+8], eax

; 493  : 		dist = DotProduct( tmp, RI->vforward );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 216				; 000000d8H
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	?DotProduct@@YAMABVVector@@0@Z		; DotProduct
	add	esp, 8
	fstp	DWORD PTR _dist$[ebp]

; 494  : 			
; 495  : 		// Turn off distance fade
; 496  : 		if( e->curstate.renderfx == kRenderFxDistort )

	mov	eax, DWORD PTR _e$[ebp]
	cmp	DWORD PTR [eax+772], 15			; 0000000fH
	jne	SHORT $L72305

; 497  : 			dist = 1;

	mov	DWORD PTR _dist$[ebp], 1065353216	; 3f800000H
$L72305:

; 498  : 
; 499  : 		if( dist <= 0 )

	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L72306

; 501  : 			blend = 0;

	mov	DWORD PTR _blend$[ebp], 0

; 503  : 		else 

	jmp	SHORT $L72307
$L72306:

; 505  : 			e->curstate.renderamt = 180;

	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [ecx+764], 180		; 000000b4H

; 506  : 			if( dist <= 100 ) blend = e->curstate.renderamt;

	fld	DWORD PTR _dist$[ebp]
	fcomp	DWORD PTR __real@4@4005c800000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L72308
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+764]
	mov	DWORD PTR _blend$[ebp], eax

; 507  : 			else blend = (int) ((1.0f - ( dist - 100 ) * ( 1.0f / 400.0f )) * e->curstate.renderamt );

	jmp	SHORT $L72309
$L72308:
	fld	DWORD PTR _dist$[ebp]
	fsub	DWORD PTR __real@4@4005c800000000000000
	fmul	DWORD PTR __real@4@3ff6a3d70a0000000000
	fsubr	DWORD PTR __real@4@3fff8000000000000000
	mov	ecx, DWORD PTR _e$[ebp]
	fimul	DWORD PTR [ecx+764]
	call	__ftol
	mov	DWORD PTR _blend$[ebp], eax
$L72309:

; 508  : 			blend += RANDOM_LONG( -32, 31 );

	push	31					; 0000001fH
	push	-32					; ffffffe0H
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+272
	add	esp, 8
	mov	edx, DWORD PTR _blend$[ebp]
	add	edx, eax
	mov	DWORD PTR _blend$[ebp], edx
$L72307:

; 510  : 		break;

	jmp	SHORT $L72265
$L72311:

; 511  : 	default:
; 512  : 		blend = e->curstate.renderamt;

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+764]
	mov	DWORD PTR _blend$[ebp], ecx
$L72265:

; 515  : 
; 516  : 	blend = bound( 0, blend, 255 );

	cmp	DWORD PTR _blend$[ebp], 0
	jl	SHORT $L73188
	cmp	DWORD PTR _blend$[ebp], 255		; 000000ffH
	jge	SHORT $L73186
	mov	edx, DWORD PTR _blend$[ebp]
	mov	DWORD PTR -92+[ebp], edx
	jmp	SHORT $L73187
$L73186:
	mov	DWORD PTR -92+[ebp], 255		; 000000ffH
$L73187:
	mov	eax, DWORD PTR -92+[ebp]
	mov	DWORD PTR -96+[ebp], eax
	jmp	SHORT $L73189
$L73188:
	mov	DWORD PTR -96+[ebp], 0
$L73189:
	mov	ecx, DWORD PTR -96+[ebp]
	mov	DWORD PTR _blend$[ebp], ecx

; 517  : 
; 518  : 	return blend;

	mov	eax, DWORD PTR _blend$[ebp]
$L72257:

; 519  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L73215:
	DD	$L72270
	DD	$L72271
	DD	$L72268
	DD	$L72269
	DD	$L72272
	DD	$L72276
	DD	$L72280
	DD	$L72284
	DD	$L72288
	DD	$L72291
	DD	$L72294
	DD	$L72297
	DD	$L72300
	DD	$L72311
	DD	$L72303
	DD	$L72303
?CL_FxBlend@@YAHPAUcl_entity_s@@@Z ENDP			; CL_FxBlend
_TEXT	ENDS
PUBLIC	??0Vector@@QAE@MMM@Z				; Vector::Vector
PUBLIC	??0Vector@@QAE@ABV0@@Z				; Vector::Vector
;	COMDAT ??GVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
_v$ = 12
___$ReturnUdt$ = 8
_this$ = -4
$T73218 = -16
??GVector@@QBE?AV0@ABV0@@Z PROC NEAR			; Vector::operator-, COMDAT

; 150  : 	inline Vector operator-(const Vector& v) const	{ return Vector(x-v.x, y-v.y, z-v.z);	   }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [edx]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T73218[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??GVector@@QBE?AV0@ABV0@@Z ENDP				; Vector::operator-
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT
_X$ = 8
_Y$ = 12
_Z$ = 16
_this$ = -4
??0Vector@@QAE@MMM@Z PROC NEAR				; Vector::Vector, COMDAT

; 135  : 	inline Vector(float X, float Y, float Z)	{ x = X; y = Y; z = Z;                     }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _X$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _Y$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _Z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector@@QAE@MMM@Z ENDP				; Vector::Vector
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8
_this$ = -4
??0Vector@@QAE@ABV0@@Z PROC NEAR			; Vector::Vector, COMDAT

; 136  : 	inline Vector(const Vector& v)		{ x = v.x; y = v.y; z = v.z;		   }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector@@QAE@ABV0@@Z ENDP				; Vector::Vector
_TEXT	ENDS
;	COMDAT ?DotProduct@@YAMABVVector@@0@Z
_TEXT	SEGMENT
_a$ = 8
_b$ = 12
?DotProduct@@YAMABVVector@@0@Z PROC NEAR		; DotProduct, COMDAT

; 289  : inline float DotProduct(const Vector& a, const Vector& b ) { return( a.x * b.x + a.y * b.y + a.z * b.z ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DotProduct@@YAMABVVector@@0@Z ENDP			; DotProduct
_TEXT	ENDS
PUBLIC	?GL_CacheState@@YAGABVVector@@0@Z		; GL_CacheState
PUBLIC	??0matrix4x4@@QAE@ABVVector@@0M@Z		; matrix4x4::matrix4x4
PUBLIC	?CopyToArray@matrix4x4@@QBEXPAM@Z		; matrix4x4::CopyToArray
PUBLIC	??_C@_0CC@LPPL@too?5many?5brush?5entities?5in?5frame@ ; `string'
EXTRN	?ALERT@@YAXW4ALERT_TYPE@@PADZZ:NEAR		; ALERT
EXTRN	_memcmp:NEAR
;	COMDAT ??_C@_0CC@LPPL@too?5many?5brush?5entities?5in?5frame@
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
??_C@_0CC@LPPL@too?5many?5brush?5entities?5in?5frame@ DB 'too many brush '
	DB	'entities in frame', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ?GL_CacheState@@YAGABVVector@@0@Z
_TEXT	SEGMENT
$T73227 = -196
_origin$ = 8
_angles$ = 12
_modelMatrix$ = -64
_findMatrix$ = -128
_i$ = -132
?GL_CacheState@@YAGABVVector@@0@Z PROC NEAR		; GL_CacheState, COMDAT

; 529  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi

; 530  : 	matrix4x4	modelMatrix;

	lea	ecx, DWORD PTR _modelMatrix$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 531  : 	GLfloat	findMatrix[16];
; 532  : 	int	i;
; 533  : 
; 534  : 	modelMatrix = matrix4x4( origin, angles, 1.0f );

	push	1065353216				; 3f800000H
	mov	eax, DWORD PTR _angles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _origin$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T73227[ebp]
	call	??0matrix4x4@@QAE@ABVVector@@0M@Z	; matrix4x4::matrix4x4
	push	eax
	lea	ecx, DWORD PTR _modelMatrix$[ebp]
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 535  : 	modelMatrix.CopyToArray( findMatrix );

	lea	edx, DWORD PTR _findMatrix$[ebp]
	push	edx
	lea	ecx, DWORD PTR _modelMatrix$[ebp]
	call	?CopyToArray@matrix4x4@@QBEXPAM@Z	; matrix4x4::CopyToArray

; 536  : 
; 537  : 	for( i = 0; i < tr.num_cached_states; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L72320
$L72321:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L72320:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+72052
	jge	SHORT $L72322

; 539  : 		if( !memcmp( tr.cached_state[i].modelMatrix, findMatrix, sizeof( findMatrix )))

	push	64					; 00000040H
	lea	edx, DWORD PTR _findMatrix$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	add	eax, OFFSET FLAT:?tr@@3Uref_globals_t@@A+6516
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L72323

; 540  : 			return i;	// already cached?

	mov	ax, WORD PTR _i$[ebp]
	jmp	SHORT $L72315
$L72323:

; 541  : 	}

	jmp	SHORT $L72321
$L72322:

; 542  : 
; 543  : 	if( tr.num_cached_states >= MAX_CACHED_STATES )

	cmp	DWORD PTR ?tr@@3Uref_globals_t@@A+72052, 512 ; 00000200H
	jl	SHORT $L72324

; 545  : 		ALERT( at_error, "too many brush entities in frame\n" );

	push	OFFSET FLAT:??_C@_0CC@LPPL@too?5many?5brush?5entities?5in?5frame@ ; `string'
	push	4
	call	?ALERT@@YAXW4ALERT_TYPE@@PADZZ		; ALERT
	add	esp, 8

; 546  : 		return WORLD_MATRIX;

	xor	ax, ax
	jmp	SHORT $L72315
$L72324:

; 548  : 
; 549  : 	// store results
; 550  : 	modelMatrix.CopyToArray( tr.cached_state[i].modelMatrix );

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	add	ecx, OFFSET FLAT:?tr@@3Uref_globals_t@@A+6516
	push	ecx
	lea	ecx, DWORD PTR _modelMatrix$[ebp]
	call	?CopyToArray@matrix4x4@@QBEXPAM@Z	; matrix4x4::CopyToArray

; 551  : 	tr.cached_state[i].transform = modelMatrix;

	lea	edx, DWORD PTR _modelMatrix$[ebp]
	push	edx
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	add	ecx, OFFSET FLAT:?tr@@3Uref_globals_t@@A+6580
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 552  : 
; 553  : 	return tr.num_cached_states++;

	mov	ax, WORD PTR ?tr@@3Uref_globals_t@@A+72052
	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+72052
	add	ecx, 1
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+72052, ecx
$L72315:

; 554  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GL_CacheState@@YAGABVVector@@0@Z ENDP			; GL_CacheState
_TEXT	ENDS
PUBLIC	?SinCos@@YAXMPAM0@Z				; SinCos
PUBLIC	__real@8@3ff98efa351294e9c800
;	COMDAT __real@8@3ff98efa351294e9c800
; File z:\xashxtsrc\game_shared\matrix.h
CONST	SEGMENT
__real@8@3ff98efa351294e9c800 DQ 03f91df46a2529d39r ; 0.0174533
CONST	ENDS
;	COMDAT ??0matrix4x4@@QAE@ABVVector@@0M@Z
_TEXT	SEGMENT
_origin$ = 8
_angles$ = 12
_scale$ = 16
_this$ = -4
_angle$ = -8
_sr$ = -12
_sp$ = -16
_sy$ = -20
_cr$ = -24
_cp$ = -28
_cy$ = -32
??0matrix4x4@@QAE@ABVVector@@0M@Z PROC NEAR		; matrix4x4::matrix4x4, COMDAT

; 701  : 	_forceinline matrix4x4( const Vector &origin, const Vector &angles, float scale = 1.0f )

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET FLAT:??0Vector4D@@QAE@XZ		; Vector4D::Vector4D
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EX0@Z@Z			; `vector constructor iterator'

; 702  : 	{
; 703  : 		float	angle, sr, sp, sy, cr, cp, cy;
; 704  : 
; 705  : 		if( angles[ROLL] )

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	$L55744

; 707  : 			angle = angles[YAW] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [eax+4]
	fmul	QWORD PTR __real@8@3ff98efa351294e9c800
	fstp	DWORD PTR _angle$[ebp]

; 708  : 			SinCos( angle, &sy, &cy );

	lea	ecx, DWORD PTR _cy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sy$[ebp]
	push	edx
	mov	eax, DWORD PTR _angle$[ebp]
	push	eax
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 709  : 			angle = angles[PITCH] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@8@3ff98efa351294e9c800
	fstp	DWORD PTR _angle$[ebp]

; 710  : 			SinCos( angle, &sp, &cp );

	lea	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sp$[ebp]
	push	edx
	mov	eax, DWORD PTR _angle$[ebp]
	push	eax
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 711  : 			angle = angles[ROLL] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR __real@8@3ff98efa351294e9c800
	fstp	DWORD PTR _angle$[ebp]

; 712  : 			SinCos( angle, &sr, &cr );

	lea	ecx, DWORD PTR _cr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sr$[ebp]
	push	edx
	mov	eax, DWORD PTR _angle$[ebp]
	push	eax
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 713  : 
; 714  : 			mat[0][0] = (cp*cy) * scale;

	fld	DWORD PTR _cp$[ebp]
	fmul	DWORD PTR _cy$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -36+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR -36+[ebp]
	mov	DWORD PTR [eax], ecx

; 715  : 			mat[1][0] = (sr*sp*cy+cr*-sy) * scale;

	fld	DWORD PTR _sr$[ebp]
	fmul	DWORD PTR _sp$[ebp]
	fmul	DWORD PTR _cy$[ebp]
	fld	DWORD PTR _sy$[ebp]
	fchs
	fmul	DWORD PTR _cr$[ebp]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -40+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR -40+[ebp]
	mov	DWORD PTR [eax], edx

; 716  : 			mat[2][0] = (cr*sp*cy+-sr*-sy) * scale;

	fld	DWORD PTR _cr$[ebp]
	fmul	DWORD PTR _sp$[ebp]
	fmul	DWORD PTR _cy$[ebp]
	fld	DWORD PTR _sr$[ebp]
	fchs
	fld	DWORD PTR _sy$[ebp]
	fchs
	fmulp	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -44+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR -44+[ebp]
	mov	DWORD PTR [eax], ecx

; 717  : 			mat[3][0] = origin.x;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 718  : 			mat[0][1] = (cp*sy) * scale;

	fld	DWORD PTR _cp$[ebp]
	fmul	DWORD PTR _sy$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -48+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR -48+[ebp]
	mov	DWORD PTR [eax+4], edx

; 719  : 			mat[1][1] = (sr*sp*sy+cr*cy) * scale;

	fld	DWORD PTR _sr$[ebp]
	fmul	DWORD PTR _sp$[ebp]
	fmul	DWORD PTR _sy$[ebp]
	fld	DWORD PTR _cr$[ebp]
	fmul	DWORD PTR _cy$[ebp]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -52+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR -52+[ebp]
	mov	DWORD PTR [eax+4], ecx

; 720  : 			mat[2][1] = (cr*sp*sy+-sr*cy) * scale;

	fld	DWORD PTR _cr$[ebp]
	fmul	DWORD PTR _sp$[ebp]
	fmul	DWORD PTR _sy$[ebp]
	fld	DWORD PTR _sr$[ebp]
	fchs
	fmul	DWORD PTR _cy$[ebp]
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -56+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR -56+[ebp]
	mov	DWORD PTR [eax+4], edx

; 721  : 			mat[3][1] = origin.y;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 722  : 			mat[0][2] = (-sp) * scale;

	fld	DWORD PTR _sp$[ebp]
	fchs
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -60+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR -60+[ebp]
	mov	DWORD PTR [eax+8], ecx

; 723  : 			mat[1][2] = (sr*cp) * scale;

	fld	DWORD PTR _sr$[ebp]
	fmul	DWORD PTR _cp$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -64+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR -64+[ebp]
	mov	DWORD PTR [eax+8], edx

; 724  : 			mat[2][2] = (cr*cp) * scale;

	fld	DWORD PTR _cr$[ebp]
	fmul	DWORD PTR _cp$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -68+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR -68+[ebp]
	mov	DWORD PTR [eax+8], ecx

; 725  : 			mat[3][2] = origin.z;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx

; 726  : 			mat[0][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 727  : 			mat[1][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 728  : 			mat[2][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 729  : 			mat[3][3] = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 1065353216		; 3f800000H

; 731  : 		else if( angles[PITCH] )

	jmp	$L55749
$L55744:
	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	$L55746

; 733  : 			angle = angles[YAW] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [eax+4]
	fmul	QWORD PTR __real@8@3ff98efa351294e9c800
	fstp	DWORD PTR _angle$[ebp]

; 734  : 			SinCos( angle, &sy, &cy );

	lea	edx, DWORD PTR _cy$[ebp]
	push	edx
	lea	eax, DWORD PTR _sy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _angle$[ebp]
	push	ecx
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 735  : 			angle = angles[PITCH] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [eax]
	fmul	QWORD PTR __real@8@3ff98efa351294e9c800
	fstp	DWORD PTR _angle$[ebp]

; 736  : 			SinCos( angle, &sp, &cp );

	lea	edx, DWORD PTR _cp$[ebp]
	push	edx
	lea	eax, DWORD PTR _sp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _angle$[ebp]
	push	ecx
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 737  : 
; 738  : 			mat[0][0] = (cp*cy) * scale;

	fld	DWORD PTR _cp$[ebp]
	fmul	DWORD PTR _cy$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -72+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR -72+[ebp]
	mov	DWORD PTR [eax], edx

; 739  : 			mat[1][0] = (-sy) * scale;

	fld	DWORD PTR _sy$[ebp]
	fchs
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -76+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR -76+[ebp]
	mov	DWORD PTR [eax], ecx

; 740  : 			mat[2][0] = (sp*cy) * scale;

	fld	DWORD PTR _sp$[ebp]
	fmul	DWORD PTR _cy$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -80+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR -80+[ebp]
	mov	DWORD PTR [eax], edx

; 741  : 			mat[3][0] = origin.x;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 742  : 			mat[0][1] = (cp*sy) * scale;

	fld	DWORD PTR _cp$[ebp]
	fmul	DWORD PTR _sy$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -84+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR -84+[ebp]
	mov	DWORD PTR [eax+4], ecx

; 743  : 			mat[1][1] = (cy) * scale;

	fld	DWORD PTR _cy$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -88+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR -88+[ebp]
	mov	DWORD PTR [eax+4], edx

; 744  : 			mat[2][1] = (sp*sy) * scale;

	fld	DWORD PTR _sp$[ebp]
	fmul	DWORD PTR _sy$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -92+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR -92+[ebp]
	mov	DWORD PTR [eax+4], ecx

; 745  : 			mat[3][1] = origin.y;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx

; 746  : 			mat[0][2] = (-sp) * scale;

	fld	DWORD PTR _sp$[ebp]
	fchs
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -96+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR -96+[ebp]
	mov	DWORD PTR [eax+8], edx

; 747  : 			mat[1][2] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+8], 0

; 748  : 			mat[2][2] = (cp) * scale;

	fld	DWORD PTR _cp$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -100+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR -100+[ebp]
	mov	DWORD PTR [eax+8], ecx

; 749  : 			mat[3][2] = origin.z;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx

; 750  : 			mat[0][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 751  : 			mat[1][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 752  : 			mat[2][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 753  : 			mat[3][3] = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 1065353216		; 3f800000H

; 755  : 		else if( angles[YAW] )

	jmp	$L55749
$L55746:
	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [eax+4]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	$L55748

; 757  : 			angle = angles[YAW] * (M_PI*2 / 360);

	mov	ecx, DWORD PTR _angles$[ebp]
	call	??BVector@@QBEPBMXZ			; Vector::operator float const *
	fld	DWORD PTR [eax+4]
	fmul	QWORD PTR __real@8@3ff98efa351294e9c800
	fstp	DWORD PTR _angle$[ebp]

; 758  : 			SinCos( angle, &sy, &cy );

	lea	edx, DWORD PTR _cy$[ebp]
	push	edx
	lea	eax, DWORD PTR _sy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _angle$[ebp]
	push	ecx
	call	?SinCos@@YAXMPAM0@Z			; SinCos
	add	esp, 12					; 0000000cH

; 759  : 
; 760  : 			mat[0][0] = (cy) * scale;

	fld	DWORD PTR _cy$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -104+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR -104+[ebp]
	mov	DWORD PTR [eax], edx

; 761  : 			mat[1][0] = (-sy) * scale;

	fld	DWORD PTR _sy$[ebp]
	fchs
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -108+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR -108+[ebp]
	mov	DWORD PTR [eax], ecx

; 762  : 			mat[2][0] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax], 0

; 763  : 			mat[3][0] = origin.x;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 764  : 			mat[0][1] = (sy) * scale;

	fld	DWORD PTR _sy$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -112+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR -112+[ebp]
	mov	DWORD PTR [eax+4], edx

; 765  : 			mat[1][1] = (cy) * scale;

	fld	DWORD PTR _cy$[ebp]
	fmul	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR -116+[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR -116+[ebp]
	mov	DWORD PTR [eax+4], ecx

; 766  : 			mat[2][1] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+4], 0

; 767  : 			mat[3][1] = origin.y;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx

; 768  : 			mat[0][2] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+8], 0

; 769  : 			mat[1][2] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+8], 0

; 770  : 			mat[2][2] = scale;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [eax+8], edx

; 771  : 			mat[3][2] = origin.z;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 772  : 			mat[0][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 773  : 			mat[1][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 774  : 			mat[2][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 775  : 			mat[3][3] = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 1065353216		; 3f800000H

; 777  : 		else

	jmp	$L55749
$L55748:

; 779  : 			mat[0][0] = scale;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [eax], ecx

; 780  : 			mat[1][0] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax], 0

; 781  : 			mat[2][0] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax], 0

; 782  : 			mat[3][0] = origin.x;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 783  : 			mat[0][1] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+4], 0

; 784  : 			mat[1][1] = scale;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [eax+4], edx

; 785  : 			mat[2][1] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+4], 0

; 786  : 			mat[3][1] = origin.y;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 787  : 			mat[0][2] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+8], 0

; 788  : 			mat[1][2] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+8], 0

; 789  : 			mat[2][2] = scale;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 790  : 			mat[3][2] = origin.z;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	edx, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx

; 791  : 			mat[0][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 792  : 			mat[1][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 793  : 			mat[2][3] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 0

; 794  : 			mat[3][3] = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QAEPAMXZ			; Vector4D::operator float *
	mov	DWORD PTR [eax+12], 1065353216		; 3f800000H
$L55749:

; 796  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0matrix4x4@@QAE@ABVVector@@0M@Z ENDP			; matrix4x4::matrix4x4
_TEXT	ENDS
;	COMDAT ?SinCos@@YAXMPAM0@Z
_TEXT	SEGMENT
_angle$ = 8
_sine$ = 12
_cosine$ = 16
?SinCos@@YAXMPAM0@Z PROC NEAR				; SinCos, COMDAT

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 37   : 	__asm
; 38   : 	{
; 39   : 		push	ecx

	push	ecx

; 40   : 		fld	dword ptr angle

	fld	DWORD PTR _angle$[ebp]

; 41   : 		fsincos

	fsincos

; 42   : 		mov	ecx, dword ptr[cosine]

	mov	ecx, DWORD PTR _cosine$[ebp]

; 43   : 		fstp      dword ptr [ecx]

	fstp	DWORD PTR [ecx]

; 44   : 		mov 	ecx, dword ptr[sine]

	mov	ecx, DWORD PTR _sine$[ebp]

; 45   : 		fstp	dword ptr [ecx]

	fstp	DWORD PTR [ecx]

; 46   : 		pop	ecx

	pop	ecx

; 47   : 	}
; 48   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SinCos@@YAXMPAM0@Z ENDP				; SinCos
_TEXT	ENDS
PUBLIC	??BVector4D@@QBEPBMXZ				; Vector4D::operator float const *
;	COMDAT ?CopyToArray@matrix4x4@@QBEXPAM@Z
_TEXT	SEGMENT
_rgfl$ = 8
_this$ = -4
?CopyToArray@matrix4x4@@QBEXPAM@Z PROC NEAR		; matrix4x4::CopyToArray, COMDAT

; 1055 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1056 : 		rgfl[ 0] = mat[0][0];

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 1057 : 		rgfl[ 1] = mat[0][1];

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx

; 1058 : 		rgfl[ 2] = mat[0][2];

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx

; 1059 : 		rgfl[ 3] = mat[0][3];

	mov	ecx, DWORD PTR _this$[ebp]
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx

; 1060 : 		rgfl[ 4] = mat[1][0];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+16], edx

; 1061 : 		rgfl[ 5] = mat[1][1];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+20], edx

; 1062 : 		rgfl[ 6] = mat[1][2];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+24], edx

; 1063 : 		rgfl[ 7] = mat[1][3];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+28], edx

; 1064 : 		rgfl[ 8] = mat[2][0];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+32], edx

; 1065 : 		rgfl[ 9] = mat[2][1];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+36], edx

; 1066 : 		rgfl[10] = mat[2][2];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+40], edx

; 1067 : 		rgfl[11] = mat[2][3];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+44], edx

; 1068 : 		rgfl[12] = mat[3][0];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+48], edx

; 1069 : 		rgfl[13] = mat[3][1];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+52], edx

; 1070 : 		rgfl[14] = mat[3][2];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+56], edx

; 1071 : 		rgfl[15] = mat[3][3];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BVector4D@@QBEPBMXZ			; Vector4D::operator float const *
	mov	ecx, DWORD PTR _rgfl$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+60], edx

; 1072 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?CopyToArray@matrix4x4@@QBEXPAM@Z ENDP			; matrix4x4::CopyToArray
_TEXT	ENDS
;	COMDAT ??BVector4D@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4
??BVector4D@@QBEPBMXZ PROC NEAR				; Vector4D::operator float const *, COMDAT

; 326  : 	operator const float *() const			{ return &x; } 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector4D@@QBEPBMXZ ENDP				; Vector4D::operator float const *
_TEXT	ENDS
PUBLIC	__real@4@4005f000000000000000
PUBLIC	??_C@_08NKJJ@viewsize?$AA@			; `string'
EXTRN	?R_AnimateLight@@YAXXZ:NEAR			; R_AnimateLight
EXTRN	?CL_DecayLights@@YAXXZ:NEAR			; CL_DecayLights
EXTRN	?g_vecZero@@3VVector@@B:BYTE			; g_vecZero
EXTRN	?cl_viewsize@@3PAUcvar_s@@A:DWORD		; cl_viewsize
;	COMDAT ??_C@_08NKJJ@viewsize?$AA@
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
??_C@_08NKJJ@viewsize?$AA@ DB 'viewsize', 00H		; `string'
CONST	ENDS
;	COMDAT __real@4@4005f000000000000000
CONST	SEGMENT
__real@4@4005f000000000000000 DD 042f00000r	; 120
CONST	ENDS
;	COMDAT ?R_ClearScene@@YAXXZ
_TEXT	SEGMENT
?R_ClearScene@@YAXXZ PROC NEAR				; R_ClearScene, COMDAT

; 562  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 563  : 	tr.time = GET_CLIENT_TIME();

	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+216
	fstp	QWORD PTR ?tr@@3Uref_globals_t@@A+8

; 564  : 	tr.oldtime = GET_CLIENT_OLDTIME();

	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+420
	fstp	QWORD PTR ?tr@@3Uref_globals_t@@A+16

; 565  : 
; 566  : 	if( cl_viewsize != NULL && cl_viewsize->value != 120.0f )

	cmp	DWORD PTR ?cl_viewsize@@3PAUcvar_s@@A, 0 ; cl_viewsize
	je	SHORT $L72329
	mov	eax, DWORD PTR ?cl_viewsize@@3PAUcvar_s@@A ; cl_viewsize
	fld	DWORD PTR [eax+12]
	fcomp	DWORD PTR __real@4@4005f000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L72329

; 567  : 		CVAR_SET_FLOAT( "viewsize", 120.0f );

	push	1123024896				; 42f00000H
	push	OFFSET FLAT:??_C@_08NKJJ@viewsize?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+148
	add	esp, 8
$L72329:

; 568  : 
; 569  : 	memset( &r_stats, 0, sizeof( r_stats ));

	push	104					; 00000068H
	push	0
	push	OFFSET FLAT:?r_stats@@3Uref_stats_t@@A	; r_stats
	call	_memset
	add	esp, 12					; 0000000cH

; 570  : 	tr.num_cached_states = 0;

	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+72052, 0

; 571  : 
; 572  : 	R_CheckChanges();

	call	?R_CheckChanges@@YAXXZ			; R_CheckChanges

; 573  : 
; 574  : 	CL_DecayLights();

	call	?CL_DecayLights@@YAXXZ			; CL_DecayLights

; 575  : 
; 576  : 	R_AnimateLight();

	call	?R_AnimateLight@@YAXXZ			; R_AnimateLight

; 577  : 
; 578  : 	// world matrix is bound to 0
; 579  : 	GET_ENTITY( 0 )->hCachedMatrix = GL_CacheState( g_vecZero, g_vecZero );

	push	OFFSET FLAT:?g_vecZero@@3VVector@@B	; g_vecZero
	push	OFFSET FLAT:?g_vecZero@@3VVector@@B	; g_vecZero
	call	?GL_CacheState@@YAGABVVector@@0@Z	; GL_CacheState
	add	esp, 8
	mov	si, ax
	push	0
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+212
	add	esp, 4
	mov	WORD PTR [eax+2976], si

; 580  : 	GET_ENTITY( 0 )->curstate.messagenum = r_currentMessageNum;

	push	0
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+212
	add	esp, 4
	mov	ecx, DWORD PTR ?r_currentMessageNum@@3HA ; r_currentMessageNum
	mov	DWORD PTR [eax+700], ecx

; 581  : 
; 582  : 	tr.num_solid_entities = tr.num_trans_entities = 0;

	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+346752, 0
	mov	edx, DWORD PTR ?tr@@3Uref_globals_t@@A+346752
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+346748, edx

; 583  : 	tr.local_client_added = false;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1411997, 0

; 584  : 	tr.num_shadows_used = 0;

	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+5460, 0

; 585  : 	tr.sky_camera = NULL;

	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1411712, 0

; 586  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_ClearScene@@YAXXZ ENDP				; R_ClearScene
_TEXT	ENDS
PUBLIC	?R_AddEntity@@YAHPAUcl_entity_s@@H@Z		; R_AddEntity
;	COMDAT ?R_AddEntity@@YAHPAUcl_entity_s@@H@Z
_TEXT	SEGMENT
_clent$ = 8
_entityType$ = 12
?R_AddEntity@@YAHPAUcl_entity_s@@H@Z PROC NEAR		; R_AddEntity, COMDAT

; 594  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 595  : 	if( RENDER_GET_PARM( PARAM_GAMEPAUSED, 0 ))

	push	0
	push	18					; 00000012H
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A
	add	esp, 8
	test	eax, eax
	je	SHORT $L72335

; 596  : 		return true;

	mov	eax, 1
	jmp	$L72334
$L72335:

; 597  : 
; 598  : 	if( FBitSet( clent->curstate.effects, EF_PROJECTED_LIGHT|EF_DYNAMIC_LIGHT ))

	mov	eax, DWORD PTR _clent$[ebp]
	mov	ecx, DWORD PTR [eax+748]
	and	ecx, 24576				; 00006000H
	test	ecx, ecx
	je	SHORT $L72336

; 599  : 		return true; // no reason to drawing this entity

	mov	eax, 1
	jmp	$L72334
$L72336:

; 600  : 
; 601  : 	if( !CVAR_TO_BOOL( r_drawentities ))

	cmp	DWORD PTR ?r_drawentities@@3PAUcvar_s@@A, 0 ; r_drawentities
	je	SHORT $L73244
	mov	edx, DWORD PTR ?r_drawentities@@3PAUcvar_s@@A ; r_drawentities
	fld	DWORD PTR [edx+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L73244
	mov	BYTE PTR -4+[ebp], 1
	jmp	SHORT $L73245
$L73244:
	mov	BYTE PTR -4+[ebp], 0
$L73245:
	mov	eax, DWORD PTR -4+[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	jne	SHORT $L72337

; 602  : 		return false; // not allow to drawing

	xor	eax, eax
	jmp	$L72334
$L72337:

; 603  : 
; 604  : 	if( !clent || !clent->model )

	cmp	DWORD PTR _clent$[ebp], 0
	je	SHORT $L72339
	mov	ecx, DWORD PTR _clent$[ebp]
	cmp	DWORD PTR [ecx+2964], 0
	jne	SHORT $L72338
$L72339:

; 605  : 		return false; // if set to invisible, skip

	xor	eax, eax
	jmp	$L72334
$L72338:

; 606  : 
; 607  : 	if( FBitSet( clent->curstate.effects, EF_NODRAW ))

	mov	edx, DWORD PTR _clent$[ebp]
	mov	eax, DWORD PTR [edx+748]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $L72340

; 608  : 		return false; // done

	xor	eax, eax
	jmp	$L72334
$L72340:

; 609  : 
; 610  : 	if( !R_ModelOpaque( clent->curstate.rendermode ) && CL_FxBlend( clent ) <= 0 )

	mov	ecx, DWORD PTR _clent$[ebp]
	cmp	DWORD PTR [ecx+760], 0
	je	SHORT $L72341
	mov	edx, DWORD PTR _clent$[ebp]
	push	edx
	call	?CL_FxBlend@@YAHPAUcl_entity_s@@@Z	; CL_FxBlend
	add	esp, 4
	test	eax, eax
	jg	SHORT $L72341

; 611  : 		return true; // invisible

	mov	eax, 1
	jmp	$L72334
$L72341:

; 612  : 
; 613  : 	if( entityType == ET_PLAYER && RP_LOCALCLIENT( clent ))

	cmp	DWORD PTR _entityType$[ebp], 1
	jne	SHORT $L72342
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+204
	test	eax, eax
	je	SHORT $L72342
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+204
	mov	ecx, DWORD PTR _clent$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $L72342
	mov	eax, DWORD PTR _clent$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $L72342

; 615  : 		if( tr.local_client_added )

	xor	ecx, ecx
	mov	cl, BYTE PTR ?tr@@3Uref_globals_t@@A+1411997
	test	ecx, ecx
	je	SHORT $L72343

; 616  : 			return false; // already present in list

	xor	eax, eax
	jmp	$L72334
$L72343:

; 617  : 		tr.local_client_added = true;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1411997, 1
$L72342:

; 619  : 
; 620  : 	if( entityType == ET_FRAGMENTED )

	cmp	DWORD PTR _entityType$[ebp], 4
	jne	SHORT $L72344

; 622  : 		// non-solid statics wants a new lighting too :-)
; 623  : 		SetBits( clent->curstate.iuser1, CF_STATIC_ENTITY );

	mov	edx, DWORD PTR _clent$[ebp]
	mov	eax, DWORD PTR [edx+948]
	or	al, 64					; 00000040H
	mov	ecx, DWORD PTR _clent$[ebp]
	mov	DWORD PTR [ecx+948], eax

; 624  : 		r_stats.c_client_ents++;

	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+60
	add	edx, 1
	mov	DWORD PTR ?r_stats@@3Uref_stats_t@@A+60, edx
$L72344:

; 626  : 
; 627  : 	if( R_OpaqueEntity( clent ))

	mov	eax, DWORD PTR _clent$[ebp]
	push	eax
	call	?R_OpaqueEntity@@YAHPAUcl_entity_s@@@Z	; R_OpaqueEntity
	add	esp, 4
	test	eax, eax
	je	SHORT $L72345

; 629  : 		// opaque
; 630  : 		if( tr.num_solid_entities >= MAX_VISIBLE_PACKET )

	cmp	DWORD PTR ?tr@@3Uref_globals_t@@A+346748, 1024 ; 00000400H
	jl	SHORT $L72346

; 631  : 			return false;

	xor	eax, eax
	jmp	$L72334
$L72346:

; 632  : 
; 633  : 		tr.solid_entities[tr.num_solid_entities] = clent;

	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+346748
	mov	edx, DWORD PTR _clent$[ebp]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A[ecx*4+337788], edx

; 634  : 		tr.num_solid_entities++;

	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+346748
	add	eax, 1
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+346748, eax

; 636  : 	else

	jmp	SHORT $L72347
$L72345:

; 638  : 		// translucent
; 639  : 		if( tr.num_trans_entities >= MAX_VISIBLE_PACKET )

	cmp	DWORD PTR ?tr@@3Uref_globals_t@@A+346752, 1024 ; 00000400H
	jl	SHORT $L72348

; 640  : 			return false;

	xor	eax, eax
	jmp	SHORT $L72334
$L72348:

; 641  : 
; 642  : 		tr.trans_entities[tr.num_trans_entities] = clent;

	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+346752
	mov	edx, DWORD PTR _clent$[ebp]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A[ecx*4+341884], edx

; 643  : 		tr.num_trans_entities++;

	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+346752
	add	eax, 1
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+346752, eax
$L72347:

; 645  : 
; 646  : 	if( clent->model->type == mod_brush )

	mov	ecx, DWORD PTR _clent$[ebp]
	mov	edx, DWORD PTR [ecx+2964]
	cmp	DWORD PTR [edx+68], 0
	jne	SHORT $L72349

; 647  : 		clent->hCachedMatrix = GL_CacheState( clent->origin, clent->angles );

	mov	eax, DWORD PTR _clent$[ebp]
	add	eax, 2900				; 00000b54H
	push	eax
	mov	ecx, DWORD PTR _clent$[ebp]
	add	ecx, 2888				; 00000b48H
	push	ecx
	call	?GL_CacheState@@YAGABVVector@@0@Z	; GL_CacheState
	add	esp, 8
	mov	edx, DWORD PTR _clent$[ebp]
	mov	WORD PTR [edx+2976], ax
$L72349:

; 648  : 
; 649  : 	if( entityType == ET_FRAGMENTED )

	cmp	DWORD PTR _entityType$[ebp], 4
	jne	SHORT $L72350

; 651  : 		clent->curstate.messagenum = r_currentMessageNum;

	mov	eax, DWORD PTR _clent$[ebp]
	mov	ecx, DWORD PTR ?r_currentMessageNum@@3HA ; r_currentMessageNum
	mov	DWORD PTR [eax+700], ecx

; 652  : 		clent->visframe = tr.realframecount;

	mov	edx, DWORD PTR _clent$[ebp]
	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+1411992
	mov	DWORD PTR [edx+2980], eax
$L72350:

; 654  : 
; 655  : 	return true;

	mov	eax, 1
$L72334:

; 656  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_AddEntity@@YAHPAUcl_entity_s@@H@Z ENDP		; R_AddEntity
_TEXT	ENDS
PUBLIC	?R_GetEntityRenderMode@@YAHPAUcl_entity_s@@@Z	; R_GetEntityRenderMode
;	COMDAT ?R_OpaqueEntity@@YAHPAUcl_entity_s@@@Z
_TEXT	SEGMENT
_ent$ = 8
_rendermode$ = -4
?R_OpaqueEntity@@YAHPAUcl_entity_s@@@Z PROC NEAR	; R_OpaqueEntity, COMDAT

; 177  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 178  : 	int rendermode = R_GetEntityRenderMode( ent );

	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	call	?R_GetEntityRenderMode@@YAHPAUcl_entity_s@@@Z ; R_GetEntityRenderMode
	add	esp, 4
	mov	DWORD PTR _rendermode$[ebp], eax

; 179  : 
; 180  : 	if( R_ModelOpaque( rendermode ))

	cmp	DWORD PTR _rendermode$[ebp], 0
	jne	SHORT $L72169

; 181  : 		return true;

	mov	eax, 1
	jmp	SHORT $L72167
$L72169:

; 182  : 	return false;

	xor	eax, eax
$L72167:

; 183  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_OpaqueEntity@@YAHPAUcl_entity_s@@@Z ENDP		; R_OpaqueEntity
_TEXT	ENDS
EXTRN	?GetEntityRenderMode@CStudioModelRenderer@@QAEHPAUcl_entity_s@@@Z:NEAR ; CStudioModelRenderer::GetEntityRenderMode
;	COMDAT ?R_GetEntityRenderMode@@YAHPAUcl_entity_s@@@Z
_TEXT	SEGMENT
_ent$ = 8
?R_GetEntityRenderMode@@YAHPAUcl_entity_s@@@Z PROC NEAR	; R_GetEntityRenderMode, COMDAT

; 673  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 674  : 	return g_StudioRenderer.GetEntityRenderMode( ent );

	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	mov	ecx, OFFSET FLAT:?g_StudioRenderer@@3VCStudioModelRenderer@@A
	call	?GetEntityRenderMode@CStudioModelRenderer@@QAEHPAUcl_entity_s@@@Z ; CStudioModelRenderer::GetEntityRenderMode

; 675  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_GetEntityRenderMode@@YAHPAUcl_entity_s@@@Z ENDP	; R_GetEntityRenderMode
_TEXT	ENDS
PUBLIC	??0matrix4x4@@QAE@ABV0@@Z			; matrix4x4::matrix4x4
PUBLIC	?R_RestoreGLState@@YAXXZ			; R_RestoreGLState
EXTRN	?pglViewport@@3P6GXHHHH@ZA:DWORD		; pglViewport
EXTRN	?pglDepthMask@@3P6GXE@ZA:DWORD			; pglDepthMask
EXTRN	?pglMatrixMode@@3P6GXI@ZA:DWORD			; pglMatrixMode
EXTRN	?GL_LoadMatrix@@YAXVmatrix4x4@@@Z:NEAR		; GL_LoadMatrix
EXTRN	?GL_Cull@@YAXI@Z:NEAR				; GL_Cull
;	COMDAT ?R_RestoreGLState@@YAXXZ
_TEXT	SEGMENT
?R_RestoreGLState@@YAXXZ PROC NEAR			; R_RestoreGLState, COMDAT

; 704  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 705  : 	pglViewport( RI->viewport[0], RI->viewport[1], RI->viewport[2], RI->viewport[3] );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR ?pglViewport@@3P6GXHHHH@ZA	; pglViewport

; 706  : 
; 707  : 	pglMatrixMode( GL_PROJECTION );

	push	5889					; 00001701H
	call	DWORD PTR ?pglMatrixMode@@3P6GXI@ZA	; pglMatrixMode

; 708  : 	GL_LoadMatrix( RI->projectionMatrix );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 544				; 00000220H
	sub	esp, 64					; 00000040H
	mov	ecx, esp
	push	edx
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	call	?GL_LoadMatrix@@YAXVmatrix4x4@@@Z	; GL_LoadMatrix
	add	esp, 64					; 00000040H

; 709  : 
; 710  : 	pglMatrixMode( GL_MODELVIEW );

	push	5888					; 00001700H
	call	DWORD PTR ?pglMatrixMode@@3P6GXI@ZA	; pglMatrixMode

; 711  : 	GL_LoadMatrix( RI->worldviewMatrix );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 416				; 000001a0H
	sub	esp, 64					; 00000040H
	mov	ecx, esp
	push	eax
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	call	?GL_LoadMatrix@@YAXVmatrix4x4@@@Z	; GL_LoadMatrix
	add	esp, 64					; 00000040H

; 712  : 
; 713  : 	pglEnable( GL_DEPTH_TEST );

	push	2929					; 00000b71H
	call	DWORD PTR ?pglEnable@@3P6GXI@ZA		; pglEnable

; 714  : 	pglDepthMask( GL_TRUE );

	push	1
	call	DWORD PTR ?pglDepthMask@@3P6GXE@ZA	; pglDepthMask

; 715  : 	pglDisable( GL_BLEND );

	push	3042					; 00000be2H
	call	DWORD PTR ?pglDisable@@3P6GXI@ZA	; pglDisable

; 716  : 	GL_Cull( GL_FRONT );

	push	1028					; 00000404H
	call	?GL_Cull@@YAXI@Z			; GL_Cull
	add	esp, 4

; 717  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_RestoreGLState@@YAXXZ ENDP				; R_RestoreGLState
_TEXT	ENDS
PUBLIC	??0Vector4D@@QAE@ABV0@@Z			; Vector4D::Vector4D
;	COMDAT ??0matrix4x4@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
_$S7$ = -8
_$S8$ = -12
_$S9$ = -16
??0matrix4x4@@QAE@ABV0@@Z PROC NEAR			; matrix4x4::matrix4x4, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR _$S7$[ebp], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _$S8$[ebp], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR _$S9$[ebp], ecx
$L55903:
	mov	edx, DWORD PTR _$S9$[ebp]
	push	edx
	mov	ecx, DWORD PTR _$S8$[ebp]
	call	??0Vector4D@@QAE@ABV0@@Z		; Vector4D::Vector4D
	mov	eax, DWORD PTR _$S8$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _$S8$[ebp], eax
	mov	ecx, DWORD PTR _$S9$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _$S9$[ebp], ecx
	mov	edx, DWORD PTR _$S7$[ebp]
	sub	edx, 1
	mov	DWORD PTR _$S7$[ebp], edx
	cmp	DWORD PTR _$S7$[ebp], 0
	ja	SHORT $L55903
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0matrix4x4@@QAE@ABV0@@Z ENDP				; matrix4x4::matrix4x4
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8
_this$ = -4
??0Vector4D@@QAE@ABV0@@Z PROC NEAR			; Vector4D::Vector4D, COMDAT

; 313  : 	inline Vector4D( const Vector4D& v ) { x = v.x; y = v.y; z = v.z, w = v.w; } 

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector4D@@QAE@ABV0@@Z ENDP				; Vector4D::Vector4D
_TEXT	ENDS
PUBLIC	?R_SetupFrustum@@YAXXZ				; R_SetupFrustum
PUBLIC	?SetForward@matrix4x4@@QAEXABVVector@@@Z	; matrix4x4::SetForward
PUBLIC	?SetRight@matrix4x4@@QAEXABVVector@@@Z		; matrix4x4::SetRight
PUBLIC	?SetUp@matrix4x4@@QAEXABVVector@@@Z		; matrix4x4::SetUp
PUBLIC	?SetOrigin@matrix4x4@@QAEXABVVector@@@Z		; matrix4x4::SetOrigin
PUBLIC	__real@4@40008000000000000000
PUBLIC	__real@4@3ff98efa350000000000
PUBLIC	__real@8@3fffc000000000000000
PUBLIC	__real@8@3ff9f5c28f5c28f5c000
PUBLIC	__real@8@3ffef851eb851eb85000
PUBLIC	__real@8@3fff83d70a3d70a3d800
PUBLIC	__real@4@40078000000000000000
PUBLIC	__real@4@3ffe8000000000000000
EXTRN	_atan:NEAR
EXTRN	_tan:NEAR
EXTRN	?InitProjection@CFrustum@@QAEXABVmatrix4x4@@MMMM@Z:NEAR ; CFrustum::InitProjection
EXTRN	?InitOrthogonal@CFrustum@@QAEXABVmatrix4x4@@MMMMMM@Z:NEAR ; CFrustum::InitOrthogonal
;	COMDAT __real@4@40008000000000000000
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
__real@4@40008000000000000000 DD 040000000r	; 2
CONST	ENDS
;	COMDAT __real@4@3ff98efa350000000000
CONST	SEGMENT
__real@4@3ff98efa350000000000 DD 03c8efa35r	; 0.0174533
CONST	ENDS
;	COMDAT __real@8@3fffc000000000000000
CONST	SEGMENT
__real@8@3fffc000000000000000 DQ 03ff8000000000000r ; 1.5
CONST	ENDS
;	COMDAT __real@8@3ff9f5c28f5c28f5c000
CONST	SEGMENT
__real@8@3ff9f5c28f5c28f5c000 DQ 03f9eb851eb851eb8r ; 0.03
CONST	ENDS
;	COMDAT __real@8@3ffef851eb851eb85000
CONST	SEGMENT
__real@8@3ffef851eb851eb85000 DQ 03fef0a3d70a3d70ar ; 0.97
CONST	ENDS
;	COMDAT __real@8@3fff83d70a3d70a3d800
CONST	SEGMENT
__real@8@3fff83d70a3d70a3d800 DQ 03ff07ae147ae147br ; 1.03
CONST	ENDS
;	COMDAT __real@4@40078000000000000000
CONST	SEGMENT
__real@4@40078000000000000000 DD 043800000r	; 256
CONST	ENDS
;	COMDAT __real@4@3ffe8000000000000000
CONST	SEGMENT
__real@4@3ffe8000000000000000 DD 03f000000r	; 0.5
CONST	ENDS
;	COMDAT ?R_SetupFrustum@@YAXXZ
_TEXT	SEGMENT
_ov$ = -4
_cullMatrix$ = -68
?R_SetupFrustum@@YAXXZ PROC NEAR			; R_SetupFrustum, COMDAT

; 736  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	ebx
	push	esi
	push	edi

; 737  : 	const ref_overview_t *ov = GET_OVERVIEW_PARMS();

	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+200
	mov	DWORD PTR _ov$[ebp], eax

; 738  : 	matrix4x4 cullMatrix;

	lea	ecx, DWORD PTR _cullMatrix$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 739  : 
; 740  : 	if( RP_NORMALPASS() && ( tr.viewparams.waterlevel >= 3 ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 483				; 000001e3H
	test	ecx, ecx
	jne	$L72375
	cmp	DWORD PTR ?tr@@3Uref_globals_t@@A+1411804, 3
	jl	$L72375

; 742  : 		RI->fov_x = atan( tan( DEG2RAD( RI->fov_x ) / 2 ) * ( 0.97 + sin( tr.time * 1.5 ) * 0.03 )) * 2 / (M_PI / 180.0);

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fld	DWORD PTR [edx+8]
	fmul	DWORD PTR __real@4@3ff98efa350000000000
	fdiv	DWORD PTR __real@4@40008000000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_tan
	fstp	QWORD PTR -76+[ebp]
	add	esp, 8
	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fmul	QWORD PTR __real@8@3fffc000000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fmul	QWORD PTR __real@8@3ff9f5c28f5c28f5c000
	fadd	QWORD PTR __real@8@3ffef851eb851eb85000
	fmul	QWORD PTR -76+[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_atan
	add	esp, 8
	fadd	ST(0), ST(0)
	fdiv	QWORD PTR __real@8@3ff98efa351294e9c800
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fstp	DWORD PTR [eax+8]

; 743  : 		RI->fov_y = atan( tan( DEG2RAD( RI->fov_y ) / 2 ) * ( 1.03 - sin( tr.time * 1.5 ) * 0.03 )) * 2 / (M_PI / 180.0);

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fld	DWORD PTR [ecx+12]
	fmul	DWORD PTR __real@4@3ff98efa350000000000
	fdiv	DWORD PTR __real@4@40008000000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_tan
	fstp	QWORD PTR -84+[ebp]
	add	esp, 8
	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fmul	QWORD PTR __real@8@3fffc000000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fmul	QWORD PTR __real@8@3ff9f5c28f5c28f5c000
	fsubr	QWORD PTR __real@8@3fff83d70a3d70a3d800
	fmul	QWORD PTR -84+[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_atan
	add	esp, 8
	fadd	ST(0), ST(0)
	fdiv	QWORD PTR __real@8@3ff98efa351294e9c800
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fstp	DWORD PTR [edx+12]
$L72375:

; 745  : 
; 746  : 	// build the transformation matrix for the given view angles
; 747  : 	AngleVectors( RI->viewangles, RI->vforward, RI->vright, RI->vup );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 240				; 000000f0H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 228				; 000000e4H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 216				; 000000d8H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 192				; 000000c0H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+96
	add	esp, 16					; 00000010H

; 748  : 	RI->farClip = Q_max( 256.0f, R_GetFarClip());

	call	?R_GetFarClip@@YAMXZ			; R_GetFarClip
	fcomp	DWORD PTR __real@4@40078000000000000000
	fnstsw	ax
	test	ah, 1
	je	SHORT $L73260
	mov	DWORD PTR -88+[ebp], 1132462080		; 43800000H
	jmp	SHORT $L73261
$L73260:
	call	?R_GetFarClip@@YAMXZ			; R_GetFarClip
	fstp	DWORD PTR -88+[ebp]
$L73261:
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR -88+[ebp]
	mov	DWORD PTR [eax+252], ecx

; 749  : 	cullMatrix.SetForward( RI->vforward );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 216				; 000000d8H
	push	edx
	lea	ecx, DWORD PTR _cullMatrix$[ebp]
	call	?SetForward@matrix4x4@@QAEXABVVector@@@Z ; matrix4x4::SetForward

; 750  : 	cullMatrix.SetRight( RI->vright );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 228				; 000000e4H
	push	eax
	lea	ecx, DWORD PTR _cullMatrix$[ebp]
	call	?SetRight@matrix4x4@@QAEXABVVector@@@Z	; matrix4x4::SetRight

; 751  : 	cullMatrix.SetUp( RI->vup );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 240				; 000000f0H
	push	ecx
	lea	ecx, DWORD PTR _cullMatrix$[ebp]
	call	?SetUp@matrix4x4@@QAEXABVVector@@@Z	; matrix4x4::SetUp

; 752  : 	cullMatrix.SetOrigin( RI->vieworg );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 204				; 000000ccH
	push	edx
	lea	ecx, DWORD PTR _cullMatrix$[ebp]
	call	?SetOrigin@matrix4x4@@QAEXABVVector@@@Z	; matrix4x4::SetOrigin

; 753  : 
; 754  : 	if( FBitSet( RI->params, RP_OVERVIEW ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 512				; 00000200H
	test	ecx, ecx
	je	SHORT $L72380

; 755  : 		RI->frustum.InitOrthogonal( cullMatrix, ov->xLeft, ov->xRight, ov->yTop, ov->yBottom, ov->zNear, ov->zFar );

	mov	edx, DWORD PTR _ov$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _ov$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _ov$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _ov$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _ov$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _ov$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	lea	edx, DWORD PTR _cullMatrix$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 48					; 00000030H
	call	?InitOrthogonal@CFrustum@@QAEXABVmatrix4x4@@MMMMMM@Z ; CFrustum::InitOrthogonal

; 756  : 	else RI->frustum.InitProjection( cullMatrix, 0.0f, RI->farClip, RI->fov_x, RI->fov_y ); // NOTE: we ignore nearplane here (mirrors only)

	jmp	SHORT $L72381
$L72380:
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+252]
	push	edx
	push	0
	lea	eax, DWORD PTR _cullMatrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 48					; 00000030H
	call	?InitProjection@CFrustum@@QAEXABVmatrix4x4@@MMMM@Z ; CFrustum::InitProjection
$L72381:

; 757  : 
; 758  : 	tr.lodScale = tan( DEG2RAD( RI->fov_x ) * 0.5f );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR __real@4@3ff98efa350000000000
	fmul	DWORD PTR __real@4@3ffe8000000000000000
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_tan
	add	esp, 8
	fstp	DWORD PTR ?tr@@3Uref_globals_t@@A+1411980

; 759  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_SetupFrustum@@YAXXZ ENDP				; R_SetupFrustum
_TEXT	ENDS
PUBLIC	??0Vector4D@@QAE@MMMM@Z				; Vector4D::Vector4D
;	COMDAT ?SetForward@matrix4x4@@QAEXABVVector@@@Z
_TEXT	SEGMENT
_vForward$ = 8
_this$ = -4
$T73278 = -20
?SetForward@matrix4x4@@QAEXABVVector@@@Z PROC NEAR	; matrix4x4::SetForward, COMDAT

; 985  : 	void	SetForward( const Vector &vForward ) { mat[0] = Vector4D( vForward.x, vForward.y, vForward.z, 1.0f ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1065353216				; 3f800000H
	mov	eax, DWORD PTR _vForward$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vForward$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _vForward$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR $T73278[ebp]
	call	??0Vector4D@@QAE@MMMM@Z			; Vector4D::Vector4D
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetForward@matrix4x4@@QAEXABVVector@@@Z ENDP		; matrix4x4::SetForward
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@MMMM@Z
_TEXT	SEGMENT
_X$ = 8
_Y$ = 12
_Z$ = 16
_W$ = 20
_this$ = -4
??0Vector4D@@QAE@MMMM@Z PROC NEAR			; Vector4D::Vector4D, COMDAT

; 312  : 	inline Vector4D( float X, float Y, float Z, float W ) { x = X; y = Y; z = Z; w = W; }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _X$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _Y$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _Z$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _W$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector4D@@QAE@MMMM@Z ENDP				; Vector4D::Vector4D
_TEXT	ENDS
;	COMDAT ?SetRight@matrix4x4@@QAEXABVVector@@@Z
_TEXT	SEGMENT
_vRight$ = 8
_this$ = -4
$T73283 = -20
?SetRight@matrix4x4@@QAEXABVVector@@@Z PROC NEAR	; matrix4x4::SetRight, COMDAT

; 986  : 	void	SetRight( const Vector &vRight ) { mat[1] = Vector4D( vRight.x, vRight.y, vRight.z, 1.0f ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1065353216				; 3f800000H
	mov	eax, DWORD PTR _vRight$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vRight$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _vRight$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR $T73283[ebp]
	call	??0Vector4D@@QAE@MMMM@Z			; Vector4D::Vector4D
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRight@matrix4x4@@QAEXABVVector@@@Z ENDP		; matrix4x4::SetRight
_TEXT	ENDS
;	COMDAT ?SetUp@matrix4x4@@QAEXABVVector@@@Z
_TEXT	SEGMENT
_vUp$ = 8
_this$ = -4
$T73286 = -20
?SetUp@matrix4x4@@QAEXABVVector@@@Z PROC NEAR		; matrix4x4::SetUp, COMDAT

; 987  : 	void	SetUp( const Vector &vUp ) { mat[2] = Vector4D( vUp.x, vUp.y, vUp.z, 1.0f ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1065353216				; 3f800000H
	mov	eax, DWORD PTR _vUp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vUp$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _vUp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR $T73286[ebp]
	call	??0Vector4D@@QAE@MMMM@Z			; Vector4D::Vector4D
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUp@matrix4x4@@QAEXABVVector@@@Z ENDP		; matrix4x4::SetUp
_TEXT	ENDS
;	COMDAT ?SetOrigin@matrix4x4@@QAEXABVVector@@@Z
_TEXT	SEGMENT
_vOrigin$ = 8
_this$ = -4
$T73289 = -20
?SetOrigin@matrix4x4@@QAEXABVVector@@@Z PROC NEAR	; matrix4x4::SetOrigin, COMDAT

; 989  : 	void	SetOrigin( const Vector &vOrigin ) { mat[3] = Vector4D( vOrigin.x, vOrigin.y, vOrigin.z, 1.0f ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	push	1065353216				; 3f800000H
	mov	eax, DWORD PTR _vOrigin$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vOrigin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _vOrigin$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR $T73289[ebp]
	call	??0Vector4D@@QAE@MMMM@Z			; Vector4D::Vector4D
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetOrigin@matrix4x4@@QAEXABVVector@@@Z ENDP		; matrix4x4::SetOrigin
_TEXT	ENDS
PUBLIC	__real@4@3fffdd70a40000000000
;	COMDAT __real@4@3fffdd70a40000000000
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
__real@4@3fffdd70a40000000000 DD 03fdd70a4r	; 1.73
CONST	ENDS
;	COMDAT ?R_GetFarClip@@YAMXZ
_TEXT	SEGMENT
?R_GetFarClip@@YAMXZ PROC NEAR				; R_GetFarClip, COMDAT

; 726  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 727  : 	return tr.movevars->zmax * 1.73f;

	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	fld	DWORD PTR [eax+56]
	fmul	DWORD PTR __real@4@3fffdd70a40000000000

; 728  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_GetFarClip@@YAMXZ ENDP				; R_GetFarClip
_TEXT	ENDS
PUBLIC	?R_SetupProjectionMatrix@@YAXMMAAVmatrix4x4@@@Z	; R_SetupProjectionMatrix
EXTRN	?CreateProjection@matrix4x4@@QAEXMMMM@Z:NEAR	; matrix4x4::CreateProjection
EXTRN	?CreateOrtho@matrix4x4@@QAEXMMMMMM@Z:NEAR	; matrix4x4::CreateOrtho
;	COMDAT ?R_SetupProjectionMatrix@@YAXMMAAVmatrix4x4@@@Z
_TEXT	SEGMENT
_fov_x$ = 8
_fov_y$ = 12
_m$ = 16
_ov$72390 = -4
?R_SetupProjectionMatrix@@YAXMMAAVmatrix4x4@@@Z PROC NEAR ; R_SetupProjectionMatrix, COMDAT

; 767  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 768  : 	if( FBitSet( RI->params, RP_OVERVIEW ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 512				; 00000200H
	test	ecx, ecx
	je	SHORT $L72389

; 770  : 		const ref_overview_t *ov = GET_OVERVIEW_PARMS();

	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+200
	mov	DWORD PTR _ov$72390[ebp], eax

; 771  : 
; 772  : 		m.CreateOrtho( ov->xLeft, ov->xRight, ov->yTop, ov->yBottom, ov->zNear, ov->zFar );

	mov	edx, DWORD PTR _ov$72390[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _ov$72390[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _ov$72390[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _ov$72390[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _ov$72390[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _ov$72390[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _m$[ebp]
	call	?CreateOrtho@matrix4x4@@QAEXMMMMMM@Z	; matrix4x4::CreateOrtho

; 774  : 	else

	jmp	SHORT $L72391
$L72389:

; 776  : 		m.CreateProjection( fov_x, fov_y, Z_NEAR, RI->farClip );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+252]
	push	eax
	push	1082130432				; 40800000H
	mov	ecx, DWORD PTR _fov_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fov_x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _m$[ebp]
	call	?CreateProjection@matrix4x4@@QAEXMMMM@Z	; matrix4x4::CreateProjection
$L72391:

; 778  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_SetupProjectionMatrix@@YAXMMAAVmatrix4x4@@@Z ENDP	; R_SetupProjectionMatrix
_TEXT	ENDS
PUBLIC	?R_SetupModelviewMatrix@@YAXAAVmatrix4x4@@@Z	; R_SetupModelviewMatrix
PUBLIC	?ConcatTranslate@matrix4x4@@QAEXMMM@Z		; matrix4x4::ConcatTranslate
PUBLIC	?ConcatRotate@matrix4x4@@QAEXMMMM@Z		; matrix4x4::ConcatRotate
EXTRN	?CreateModelview@matrix4x4@@QAEXXZ:NEAR		; matrix4x4::CreateModelview
;	COMDAT ?R_SetupModelviewMatrix@@YAXAAVmatrix4x4@@@Z
_TEXT	SEGMENT
_m$ = 8
?R_SetupModelviewMatrix@@YAXAAVmatrix4x4@@@Z PROC NEAR	; R_SetupModelviewMatrix, COMDAT

; 786  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 787  : 	m.CreateModelview(); // init quake world orientation

	mov	ecx, DWORD PTR _m$[ebp]
	call	?CreateModelview@matrix4x4@@QAEXXZ	; matrix4x4::CreateModelview

; 788  : 	m.ConcatRotate( -RI->viewangles[2], 1, 0, 0 );

	push	0
	push	0
	push	1065353216				; 3f800000H
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 192				; 000000c0H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _m$[ebp]
	call	?ConcatRotate@matrix4x4@@QAEXMMMM@Z	; matrix4x4::ConcatRotate

; 789  : 	m.ConcatRotate( -RI->viewangles[0], 0, 1, 0 );

	push	0
	push	1065353216				; 3f800000H
	push	0
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 192				; 000000c0H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _m$[ebp]
	call	?ConcatRotate@matrix4x4@@QAEXMMMM@Z	; matrix4x4::ConcatRotate

; 790  : 	m.ConcatRotate( -RI->viewangles[1], 0, 0, 1 );

	push	1065353216				; 3f800000H
	push	0
	push	0
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 192				; 000000c0H
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _m$[ebp]
	call	?ConcatRotate@matrix4x4@@QAEXMMMM@Z	; matrix4x4::ConcatRotate

; 791  : 	m.ConcatTranslate( -RI->vieworg[0], -RI->vieworg[1], -RI->vieworg[2] );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 204				; 000000ccH
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax+8]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 204				; 000000ccH
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 204				; 000000ccH
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _m$[ebp]
	call	?ConcatTranslate@matrix4x4@@QAEXMMM@Z	; matrix4x4::ConcatTranslate

; 792  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_SetupModelviewMatrix@@YAXAAVmatrix4x4@@@Z ENDP	; R_SetupModelviewMatrix
_TEXT	ENDS
EXTRN	?CreateTranslate@matrix4x4@@QAEXMMM@Z:NEAR	; matrix4x4::CreateTranslate
EXTRN	?Concat@matrix4x4@@QAE?AV1@V1@@Z:NEAR		; matrix4x4::Concat
;	COMDAT ?ConcatTranslate@matrix4x4@@QAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_z$ = 16
_this$ = -4
_temp$ = -68
$T73301 = -136
?ConcatTranslate@matrix4x4@@QAEXMMM@Z PROC NEAR		; matrix4x4::ConcatTranslate, COMDAT

; 1093 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1094 : 		matrix4x4 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 1095 : 		temp.CreateTranslate( x, y, z );

	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	?CreateTranslate@matrix4x4@@QAEXMMM@Z	; matrix4x4::CreateTranslate

; 1096 : 		*this = Concat( temp );

	sub	esp, 64					; 00000040H
	mov	ecx, esp
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	lea	ecx, DWORD PTR $T73301[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Concat@matrix4x4@@QAE?AV1@V1@@Z	; matrix4x4::Concat
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 1097 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ConcatTranslate@matrix4x4@@QAEXMMM@Z ENDP		; matrix4x4::ConcatTranslate
_TEXT	ENDS
EXTRN	?CreateRotate@matrix4x4@@QAEXMMMM@Z:NEAR	; matrix4x4::CreateRotate
;	COMDAT ?ConcatRotate@matrix4x4@@QAEXMMMM@Z
_TEXT	SEGMENT
_angle$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_this$ = -4
_temp$ = -68
$T73305 = -136
?ConcatRotate@matrix4x4@@QAEXMMMM@Z PROC NEAR		; matrix4x4::ConcatRotate, COMDAT

; 1100 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1101 : 		matrix4x4 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0matrix4x4@@QAE@XZ			; matrix4x4::matrix4x4

; 1102 : 		temp.CreateRotate( angle, x, y, z );

	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _angle$[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	call	?CreateRotate@matrix4x4@@QAEXMMMM@Z	; matrix4x4::CreateRotate

; 1103 : 		*this = Concat( temp );

	sub	esp, 64					; 00000040H
	mov	ecx, esp
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	lea	eax, DWORD PTR $T73305[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Concat@matrix4x4@@QAE?AV1@V1@@Z	; matrix4x4::Concat
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 1104 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ConcatRotate@matrix4x4@@QAEXMMMM@Z ENDP		; matrix4x4::ConcatRotate
_TEXT	ENDS
PUBLIC	?R_LoadIdentity@@YAXXZ				; R_LoadIdentity
EXTRN	?Identity@matrix4x4@@QAEXXZ:NEAR		; matrix4x4::Identity
;	COMDAT ?R_LoadIdentity@@YAXXZ
_TEXT	SEGMENT
?R_LoadIdentity@@YAXXZ PROC NEAR			; R_LoadIdentity, COMDAT

; 800  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 801  : 	if( tr.modelviewIdentity ) return;

	xor	eax, eax
	mov	al, BYTE PTR ?tr@@3Uref_globals_t@@A+1411984
	test	eax, eax
	je	SHORT $L72398
	jmp	SHORT $L72397
$L72398:

; 802  : 
; 803  : 	RI->objectMatrix.Identity();

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 352				; 00000160H
	call	?Identity@matrix4x4@@QAEXXZ		; matrix4x4::Identity

; 804  : 	RI->modelviewMatrix = RI->worldviewMatrix;

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 416				; 000001a0H
	push	ecx
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 480				; 000001e0H
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 805  : 
; 806  : 	pglMatrixMode( GL_MODELVIEW );

	push	5888					; 00001700H
	call	DWORD PTR ?pglMatrixMode@@3P6GXI@ZA	; pglMatrixMode

; 807  : 	GL_LoadMatrix( RI->modelviewMatrix );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 480				; 000001e0H
	sub	esp, 64					; 00000040H
	mov	ecx, esp
	push	edx
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	call	?GL_LoadMatrix@@YAXVmatrix4x4@@@Z	; GL_LoadMatrix
	add	esp, 64					; 00000040H

; 808  : 	tr.modelviewIdentity = true;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1411984, 1
$L72397:

; 809  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_LoadIdentity@@YAXXZ ENDP				; R_LoadIdentity
_TEXT	ENDS
PUBLIC	?R_RotateForEntity@@YAXPAUcl_entity_s@@@Z	; R_RotateForEntity
EXTRN	?ConcatTransforms@matrix4x4@@QAE?AV1@V1@@Z:NEAR	; matrix4x4::ConcatTransforms
;	COMDAT ?R_RotateForEntity@@YAXPAUcl_entity_s@@@Z
_TEXT	SEGMENT
$T73311 = -72
$T73313 = -140
_e$ = 8
_scale$ = -4
_glm$72407 = -8
?R_RotateForEntity@@YAXPAUcl_entity_s@@@Z PROC NEAR	; R_RotateForEntity, COMDAT

; 817  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi

; 818  : 	float	scale = 1.0f;

	mov	DWORD PTR _scale$[ebp], 1065353216	; 3f800000H

; 819  : 
; 820  : 	if( e == GET_ENTITY( 0 ))

	push	0
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+212
	add	esp, 4
	cmp	DWORD PTR _e$[ebp], eax
	jne	SHORT $L72404

; 822  : 		R_LoadIdentity();

	call	?R_LoadIdentity@@YAXXZ			; R_LoadIdentity

; 823  : 		return;

	jmp	$L72402
$L72404:

; 825  : 
; 826  : 	if( e->model->type != mod_brush && e->curstate.scale > 0.0f )

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+2964]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $L72405
	mov	edx, DWORD PTR _e$[ebp]
	fld	DWORD PTR [edx+752]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L72405

; 827  : 		scale = e->curstate.scale;

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+752]
	mov	DWORD PTR _scale$[ebp], ecx
$L72405:

; 828  : 
; 829  : 	if( e->model->type == mod_brush )

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+2964]
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $L72406

; 831  : 		gl_state_t *glm = &tr.cached_state[e->hCachedMatrix];

	mov	ecx, DWORD PTR _e$[ebp]
	xor	edx, edx
	mov	dx, WORD PTR [ecx+2976]
	shl	edx, 7
	add	edx, OFFSET FLAT:?tr@@3Uref_globals_t@@A+6516
	mov	DWORD PTR _glm$72407[ebp], edx

; 832  : 		RI->objectMatrix = glm->transform;

	mov	eax, DWORD PTR _glm$72407[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 352				; 00000160H
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 834  : 	else

	jmp	SHORT $L72408
$L72406:

; 836  : 		RI->objectMatrix = matrix4x4( e->origin, e->angles, scale );

	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	add	edx, 2900				; 00000b54H
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	add	eax, 2888				; 00000b48H
	push	eax
	lea	ecx, DWORD PTR $T73311[ebp]
	call	??0matrix4x4@@QAE@ABVVector@@0M@Z	; matrix4x4::matrix4x4
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 352				; 00000160H
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=
$L72408:

; 838  : 	RI->modelviewMatrix = RI->worldviewMatrix.ConcatTransforms( RI->objectMatrix );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 352				; 00000160H
	sub	esp, 64					; 00000040H
	mov	edx, esp
	push	ecx
	mov	ecx, edx
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	lea	eax, DWORD PTR $T73313[ebp]
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 416				; 000001a0H
	call	?ConcatTransforms@matrix4x4@@QAE?AV1@V1@@Z ; matrix4x4::ConcatTransforms
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 480				; 000001e0H
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 839  : 
; 840  : 	pglMatrixMode( GL_MODELVIEW );

	push	5888					; 00001700H
	call	DWORD PTR ?pglMatrixMode@@3P6GXI@ZA	; pglMatrixMode

; 841  : 	GL_LoadMatrix( RI->modelviewMatrix );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 480				; 000001e0H
	sub	esp, 64					; 00000040H
	mov	edx, esp
	push	ecx
	mov	ecx, edx
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	call	?GL_LoadMatrix@@YAXVmatrix4x4@@@Z	; GL_LoadMatrix
	add	esp, 64					; 00000040H

; 842  : 	tr.modelviewIdentity = false;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1411984, 0
$L72402:

; 843  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_RotateForEntity@@YAXPAUcl_entity_s@@@Z ENDP		; R_RotateForEntity
_TEXT	ENDS
PUBLIC	?R_TranslateForEntity@@YAXPAUcl_entity_s@@@Z	; R_TranslateForEntity
;	COMDAT ?R_TranslateForEntity@@YAXPAUcl_entity_s@@@Z
_TEXT	SEGMENT
$T73317 = -72
$T73319 = -140
_e$ = 8
_scale$ = -4
_glm$72420 = -8
?R_TranslateForEntity@@YAXPAUcl_entity_s@@@Z PROC NEAR	; R_TranslateForEntity, COMDAT

; 851  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi

; 852  : 	float	scale = 1.0f;

	mov	DWORD PTR _scale$[ebp], 1065353216	; 3f800000H

; 853  : 
; 854  : 	if( e == GET_ENTITY( 0 ))

	push	0
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+212
	add	esp, 4
	cmp	DWORD PTR _e$[ebp], eax
	jne	SHORT $L72417

; 856  : 		R_LoadIdentity();

	call	?R_LoadIdentity@@YAXXZ			; R_LoadIdentity

; 857  : 		return;

	jmp	$L72415
$L72417:

; 859  : 
; 860  : 	if( e->model->type != mod_brush && e->curstate.scale > 0.0f )

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+2964]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $L72418
	mov	edx, DWORD PTR _e$[ebp]
	fld	DWORD PTR [edx+752]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L72418

; 861  : 		scale = e->curstate.scale;

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+752]
	mov	DWORD PTR _scale$[ebp], ecx
$L72418:

; 862  : 
; 863  : 	if( e->model->type == mod_brush )

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+2964]
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $L72419

; 865  : 		gl_state_t *glm = &tr.cached_state[e->hCachedMatrix];

	mov	ecx, DWORD PTR _e$[ebp]
	xor	edx, edx
	mov	dx, WORD PTR [ecx+2976]
	shl	edx, 7
	add	edx, OFFSET FLAT:?tr@@3Uref_globals_t@@A+6516
	mov	DWORD PTR _glm$72420[ebp], edx

; 866  : 		RI->objectMatrix = glm->transform;

	mov	eax, DWORD PTR _glm$72420[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 352				; 00000160H
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 868  : 	else

	jmp	SHORT $L72421
$L72419:

; 870  : 		RI->objectMatrix = matrix4x4( e->origin, g_vecZero, scale );

	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	push	OFFSET FLAT:?g_vecZero@@3VVector@@B	; g_vecZero
	mov	edx, DWORD PTR _e$[ebp]
	add	edx, 2888				; 00000b48H
	push	edx
	lea	ecx, DWORD PTR $T73317[ebp]
	call	??0matrix4x4@@QAE@ABVVector@@0M@Z	; matrix4x4::matrix4x4
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 352				; 00000160H
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=
$L72421:

; 872  : 	RI->modelviewMatrix = RI->worldviewMatrix.ConcatTransforms( RI->objectMatrix );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 352				; 00000160H
	sub	esp, 64					; 00000040H
	mov	ecx, esp
	push	eax
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	lea	ecx, DWORD PTR $T73319[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 416				; 000001a0H
	call	?ConcatTransforms@matrix4x4@@QAE?AV1@V1@@Z ; matrix4x4::ConcatTransforms
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 480				; 000001e0H
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 873  : 
; 874  : 	pglMatrixMode( GL_MODELVIEW );

	push	5888					; 00001700H
	call	DWORD PTR ?pglMatrixMode@@3P6GXI@ZA	; pglMatrixMode

; 875  : 	GL_LoadMatrix( RI->modelviewMatrix );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 480				; 000001e0H
	sub	esp, 64					; 00000040H
	mov	ecx, esp
	push	edx
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	call	?GL_LoadMatrix@@YAXVmatrix4x4@@@Z	; GL_LoadMatrix
	add	esp, 64					; 00000040H

; 876  : 	tr.modelviewIdentity = false;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1411984, 0
$L72415:

; 877  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_TranslateForEntity@@YAXPAUcl_entity_s@@@Z ENDP	; R_TranslateForEntity
_TEXT	ENDS
PUBLIC	?R_TransformForEntity@@YAXABVmatrix4x4@@@Z	; R_TransformForEntity
;	COMDAT ?R_TransformForEntity@@YAXABVmatrix4x4@@@Z
_TEXT	SEGMENT
$T73324 = -68
_transform$ = 8
?R_TransformForEntity@@YAXABVmatrix4x4@@@Z PROC NEAR	; R_TransformForEntity, COMDAT

; 885  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi

; 886  : 	RI->objectMatrix = transform;

	mov	eax, DWORD PTR _transform$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 352				; 00000160H
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 887  : 	RI->modelviewMatrix = RI->worldviewMatrix.ConcatTransforms( RI->objectMatrix );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 352				; 00000160H
	sub	esp, 64					; 00000040H
	mov	edx, esp
	push	ecx
	mov	ecx, edx
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	lea	eax, DWORD PTR $T73324[ebp]
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 416				; 000001a0H
	call	?ConcatTransforms@matrix4x4@@QAE?AV1@V1@@Z ; matrix4x4::ConcatTransforms
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 480				; 000001e0H
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 888  : 
; 889  : 	pglMatrixMode( GL_MODELVIEW );

	push	5888					; 00001700H
	call	DWORD PTR ?pglMatrixMode@@3P6GXI@ZA	; pglMatrixMode

; 890  : 	GL_LoadMatrix( RI->modelviewMatrix );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 480				; 000001e0H
	sub	esp, 64					; 00000040H
	mov	edx, esp
	push	ecx
	mov	ecx, edx
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	call	?GL_LoadMatrix@@YAXVmatrix4x4@@@Z	; GL_LoadMatrix
	add	esp, 64					; 00000040H

; 891  : 	tr.modelviewIdentity = false;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1411984, 0

; 892  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_TransformForEntity@@YAXABVmatrix4x4@@@Z ENDP		; R_TransformForEntity
_TEXT	ENDS
PUBLIC	?R_FindViewLeaf@@YAXXZ				; R_FindViewLeaf
EXTRN	?Mod_PointInLeaf@@YAPAUmleaf_s@@VVector@@PAUmnode_s@@@Z:NEAR ; Mod_PointInLeaf
;	COMDAT ?R_FindViewLeaf@@YAXXZ
_TEXT	SEGMENT
?R_FindViewLeaf@@YAXXZ PROC NEAR			; R_FindViewLeaf, COMDAT

; 900  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 901  : 	RI->oldviewleaf = RI->viewleaf;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+172]
	mov	DWORD PTR [eax+176], edx

; 902  : 	RI->viewleaf = Mod_PointInLeaf( RI->pvsorigin, worldmodel->nodes );

	mov	eax, DWORD PTR ?worldmodel@@3PAUmodel_s@@A ; worldmodel
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 180				; 000000b4H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	push	edx
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	call	?Mod_PointInLeaf@@YAPAUmleaf_s@@VVector@@PAUmnode_s@@@Z ; Mod_PointInLeaf
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [ecx+172], eax

; 903  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_FindViewLeaf@@YAXXZ ENDP				; R_FindViewLeaf
_TEXT	ENDS
PUBLIC	?R_DrawFog@@YAXXZ				; R_DrawFog
EXTRN	?pglFogf@@3P6GXIM@ZA:DWORD			; pglFogf
EXTRN	?pglFogfv@@3P6GXIPBM@ZA:DWORD			; pglFogfv
EXTRN	?pglFogi@@3P6GXIH@ZA:DWORD			; pglFogi
EXTRN	?pglHint@@3P6GXII@ZA:DWORD			; pglHint
;	COMDAT ?R_DrawFog@@YAXXZ
_TEXT	SEGMENT
?R_DrawFog@@YAXXZ PROC NEAR				; R_DrawFog, COMDAT

; 1139 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1140 : 	if( !tr.fogEnabled ) return;

	xor	eax, eax
	mov	al, BYTE PTR ?tr@@3Uref_globals_t@@A+1411956
	test	eax, eax
	jne	SHORT $L72516
	jmp	SHORT $L72515
$L72516:

; 1141 : 
; 1142 : 	pglEnable( GL_FOG );

	push	2912					; 00000b60H
	call	DWORD PTR ?pglEnable@@3P6GXI@ZA		; pglEnable

; 1143 : 	pglFogi( GL_FOG_MODE, GL_EXP );

	push	2048					; 00000800H
	push	2917					; 00000b65H
	call	DWORD PTR ?pglFogi@@3P6GXIH@ZA		; pglFogi

; 1144 : 	pglFogf( GL_FOG_DENSITY, tr.fogDensity );

	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411972
	push	ecx
	push	2914					; 00000b62H
	call	DWORD PTR ?pglFogf@@3P6GXIM@ZA		; pglFogf

; 1145 : 	pglFogfv( GL_FOG_COLOR, tr.fogColor );

	mov	ecx, OFFSET FLAT:?tr@@3Uref_globals_t@@A+1411960
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	push	2918					; 00000b66H
	call	DWORD PTR ?pglFogfv@@3P6GXIPBM@ZA	; pglFogfv

; 1146 : 	pglHint( GL_FOG_HINT, GL_NICEST );

	push	4354					; 00001102H
	push	3156					; 00000c54H
	call	DWORD PTR ?pglHint@@3P6GXII@ZA		; pglHint
$L72515:

; 1147 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_DrawFog@@YAXXZ ENDP					; R_DrawFog
_TEXT	ENDS
PUBLIC	?R_DrawParticles@@YAXH@Z			; R_DrawParticles
PUBLIC	??0ref_viewpass_s@@QAE@XZ			; ref_viewpass_s::ref_viewpass_s
;	COMDAT ?R_DrawParticles@@YAXH@Z
_TEXT	SEGMENT
_trans$ = 8
_rvp$ = -56
?R_DrawParticles@@YAXH@Z PROC NEAR			; R_DrawParticles, COMDAT

; 1157 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	ebx
	push	esi
	push	edi

; 1158 : 	ref_viewpass_t	rvp;

	lea	ecx, DWORD PTR _rvp$[ebp]
	call	??0ref_viewpass_s@@QAE@XZ		; ref_viewpass_s::ref_viewpass_s

; 1159 : 
; 1160 : 	// BUGBUG: drawing particles through sky in too many cases
; 1161 : 	// because particles doesn't have individual check for pvs
; 1162 : 	if( FBitSet( RI->params, RP_SKYPORTALVIEW ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 32					; 00000020H
	test	ecx, ecx
	je	SHORT $L72521

; 1163 : 		return;

	jmp	$L72519
$L72521:

; 1164 : 
; 1165 : 	rvp.viewport[0] = RI->viewport[0];

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _rvp$[ebp], eax

; 1166 : 	rvp.viewport[1] = RI->viewport[1];

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _rvp$[ebp+4], edx

; 1167 : 	rvp.viewport[2] = RI->viewport[2];

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _rvp$[ebp+8], ecx

; 1168 : 	rvp.viewport[3] = RI->viewport[3];

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _rvp$[ebp+12], eax

; 1169 : 
; 1170 : 	rvp.viewangles = RI->viewangles;

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 192				; 000000c0H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _rvp$[ebp+28], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _rvp$[ebp+32], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _rvp$[ebp+36], ecx

; 1171 : 	rvp.vieworigin = RI->vieworg;

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 204				; 000000ccH
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _rvp$[ebp+16], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _rvp$[ebp+20], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _rvp$[ebp+24], edx

; 1172 : 	rvp.fov_x = RI->fov_x;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rvp$[ebp+44], ecx

; 1173 : 	rvp.fov_y = RI->fov_y;

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _rvp$[ebp+48], eax

; 1174 : 	rvp.flags = 0;

	mov	DWORD PTR _rvp$[ebp+52], 0

; 1175 : 
; 1176 : 	SetBits( rvp.flags, RF_DRAW_WORLD );

	mov	ecx, DWORD PTR _rvp$[ebp+52]
	or	ecx, 1
	mov	DWORD PTR _rvp$[ebp+52], ecx

; 1177 : 
; 1178 : 	if( RI->params & RP_ENVVIEW )

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx]
	and	eax, 2
	test	eax, eax
	je	SHORT $L72522

; 1179 : 		SetBits( rvp.flags, RF_DRAW_CUBEMAP );

	mov	ecx, DWORD PTR _rvp$[ebp+52]
	or	ecx, 2
	mov	DWORD PTR _rvp$[ebp+52], ecx
$L72522:

; 1180 : 	if( FBitSet( RI->params, RP_OVERVIEW ))

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $L72523

; 1181 : 		SetBits( rvp.flags, RF_DRAW_OVERVIEW );

	mov	ecx, DWORD PTR _rvp$[ebp+52]
	or	ecx, 4
	mov	DWORD PTR _rvp$[ebp+52], ecx
$L72523:

; 1182 : 	R_RestoreGLState();

	call	?R_RestoreGLState@@YAXXZ		; R_RestoreGLState

; 1183 : 
; 1184 : 	DRAW_PARTICLES( &rvp, trans, tr.frametime );

	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+24
	fst	DWORD PTR -60+[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _trans$[ebp]
	push	edx
	lea	eax, DWORD PTR _rvp$[ebp]
	push	eax
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+180
	add	esp, 12					; 0000000cH
$L72519:

; 1185 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_DrawParticles@@YAXH@Z ENDP				; R_DrawParticles
_TEXT	ENDS
;	COMDAT ??0ref_viewpass_s@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ref_viewpass_s@@QAE@XZ PROC NEAR			; ref_viewpass_s::ref_viewpass_s, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ref_viewpass_s@@QAE@XZ ENDP				; ref_viewpass_s::ref_viewpass_s
_TEXT	ENDS
PUBLIC	?R_DrawStudioModel@@YAXPAUcl_entity_s@@@Z	; R_DrawStudioModel
PUBLIC	?R_DrawViewModel@@YAXXZ				; R_DrawViewModel
PUBLIC	?R_DrawSpriteModel@@YAXPAUcl_entity_s@@@Z	; R_DrawSpriteModel
PUBLIC	__real@4@4006ff00000000000000
PUBLIC	?R_DrawEntitiesOnList@@YAXXZ			; R_DrawEntitiesOnList
PUBLIC	?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA ; `R_DrawEntitiesOnList'::`2'::__LINE__Var
EXTRN	?R_DrawBrushModel@@YAXPAUcl_entity_s@@@Z:NEAR	; R_DrawBrushModel
EXTRN	?HUD_DrawNormalTriangles@@YAXXZ:NEAR		; HUD_DrawNormalTriangles
EXTRN	?HUD_DrawTransparentTriangles@@YAXXZ:NEAR	; HUD_DrawTransparentTriangles
EXTRN	?GL_CheckForErrors_@@YAXPBDH@Z:NEAR		; GL_CheckForErrors_
EXTRN	?pglTexEnvi@@3P6GXIIH@ZA:DWORD			; pglTexEnvi
;	COMDAT ?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA
; File z:\xashxtsrc\client\render\r_main.cpp
_DATA	SEGMENT
?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA DW 04a9H ; `R_DrawEntitiesOnList'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT __real@4@4006ff00000000000000
CONST	SEGMENT
__real@4@4006ff00000000000000 DD 0437f0000r	; 255
CONST	ENDS
;	COMDAT ?R_DrawEntitiesOnList@@YAXXZ
_TEXT	SEGMENT
_i$ = -4
?R_DrawEntitiesOnList@@YAXXZ PROC NEAR			; R_DrawEntitiesOnList, COMDAT

; 1193 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1194 : 	int	i;
; 1195 : 
; 1196 : 	glState.drawTrans = false;

	mov	DWORD PTR ?glState@@3UglState_t@@A+32, 0

; 1197 : 	GL_CheckForErrors();

	movsx	eax, WORD PTR ?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA ; `R_DrawEntitiesOnList'::`2'::__LINE__Var
	add	eax, 4
	push	eax
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	call	?GL_CheckForErrors_@@YAXPBDH@Z		; GL_CheckForErrors_
	add	esp, 8

; 1198 : 	tr.blend = 1.0f;

	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1411976, 1065353216 ; 3f800000H

; 1199 : 
; 1200 : 	// first draw solid entities
; 1201 : 	for( i = 0; i < tr.num_solid_entities; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L72531
$L72532:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$L72531:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?tr@@3Uref_globals_t@@A+346748
	jge	$L72533

; 1203 : 		RI->currententity = tr.solid_entities[i];

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?tr@@3Uref_globals_t@@A[ecx*4+337788]
	mov	DWORD PTR [eax+16], edx

; 1204 : 		RI->currentmodel = RI->currententity->model;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [ecx+2964]
	mov	DWORD PTR [edx+20], eax

; 1205 : 
; 1206 : 		// tell engine about current entity
; 1207 : 		SET_CURRENT_ENTITY( RI->currententity );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+32
	add	esp, 4

; 1210 : 		{

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR -8+[ebp], edx
	cmp	DWORD PTR -8+[ebp], 0
	je	SHORT $L72538
	cmp	DWORD PTR -8+[ebp], 3
	je	SHORT $L72539
	jmp	SHORT $L72540
$L72538:

; 1211 : 		case mod_brush:
; 1212 : 			R_DrawBrushModel( RI->currententity );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	?R_DrawBrushModel@@YAXPAUcl_entity_s@@@Z ; R_DrawBrushModel
	add	esp, 4

; 1213 : 			break;

	jmp	SHORT $L72535
$L72539:

; 1214 : 		case mod_studio:
; 1215 : 			R_DrawStudioModel( RI->currententity );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	?R_DrawStudioModel@@YAXPAUcl_entity_s@@@Z ; R_DrawStudioModel
	add	esp, 4
$L72540:
$L72535:

; 1220 : 	}

	jmp	$L72532
$L72533:

; 1221 : 
; 1222 : 	GL_CheckForErrors();

	movsx	ecx, WORD PTR ?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA ; `R_DrawEntitiesOnList'::`2'::__LINE__Var
	add	ecx, 29					; 0000001dH
	push	ecx
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	call	?GL_CheckForErrors_@@YAXPBDH@Z		; GL_CheckForErrors_
	add	esp, 8

; 1223 : 
; 1224 : 	// draw sprites seperately, because of alpha blending
; 1225 : 	for( i = 0; i < tr.num_solid_entities; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L72541
$L72542:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$L72541:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+346748
	jge	SHORT $L72543

; 1227 : 		RI->currententity = tr.solid_entities[i];

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A[edx*4+337788]
	mov	DWORD PTR [ecx+16], eax

; 1228 : 		RI->currentmodel = RI->currententity->model;

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [edx+2964]
	mov	DWORD PTR [eax+20], ecx

; 1229 : 
; 1230 : 		// tell engine about current entity
; 1231 : 		SET_CURRENT_ENTITY( RI->currententity );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+32
	add	esp, 4

; 1234 : 		{

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR -12+[ebp], eax
	cmp	DWORD PTR -12+[ebp], 1
	je	SHORT $L72548
	jmp	SHORT $L72549
$L72548:

; 1235 : 		case mod_sprite:
; 1236 : 			R_DrawSpriteModel( RI->currententity );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	?R_DrawSpriteModel@@YAXPAUcl_entity_s@@@Z ; R_DrawSpriteModel
	add	esp, 4
$L72549:

; 1241 : 	}

	jmp	SHORT $L72542
$L72543:

; 1242 : 
; 1243 : 	GL_CheckForErrors();

	movsx	eax, WORD PTR ?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA ; `R_DrawEntitiesOnList'::`2'::__LINE__Var
	add	eax, 50					; 00000032H
	push	eax
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	call	?GL_CheckForErrors_@@YAXPBDH@Z		; GL_CheckForErrors_
	add	esp, 8

; 1244 : 
; 1245 : 	R_DrawParticles( false );

	push	0
	call	?R_DrawParticles@@YAXH@Z		; R_DrawParticles
	add	esp, 4

; 1246 : 
; 1247 : 	GL_CheckForErrors();

	movsx	ecx, WORD PTR ?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA ; `R_DrawEntitiesOnList'::`2'::__LINE__Var
	add	ecx, 54					; 00000036H
	push	ecx
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	call	?GL_CheckForErrors_@@YAXPBDH@Z		; GL_CheckForErrors_
	add	esp, 8

; 1248 : 
; 1249 : 	HUD_DrawNormalTriangles();

	call	?HUD_DrawNormalTriangles@@YAXXZ		; HUD_DrawNormalTriangles

; 1250 : 
; 1251 : 	GL_CheckForErrors();

	movsx	edx, WORD PTR ?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA ; `R_DrawEntitiesOnList'::`2'::__LINE__Var
	add	edx, 58					; 0000003aH
	push	edx
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	call	?GL_CheckForErrors_@@YAXPBDH@Z		; GL_CheckForErrors_
	add	esp, 8

; 1252 : 
; 1253 : 	glState.drawTrans = true;

	mov	DWORD PTR ?glState@@3UglState_t@@A+32, 1

; 1254 : 
; 1255 : 	// then draw translucent entities
; 1256 : 	for( i = 0; i < tr.num_trans_entities; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L72550
$L72551:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L72550:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+346752
	jge	$L72552

; 1258 : 		RI->currententity = tr.trans_entities[i];

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A[eax*4+341884]
	mov	DWORD PTR [edx+16], ecx

; 1259 : 		RI->currentmodel = RI->currententity->model;

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [eax+2964]
	mov	DWORD PTR [ecx+20], edx

; 1260 : 
; 1261 : 		// tell engine about current entity
; 1262 : 		SET_CURRENT_ENTITY( RI->currententity );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+32
	add	esp, 4

; 1263 : 
; 1264 : 		// handle studiomodels with custom rendermodes on texture
; 1265 : 		if( RI->currententity->curstate.rendermode != kRenderNormal )

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax+760], 0
	je	SHORT $L72553

; 1266 : 			tr.blend = CL_FxBlend( RI->currententity ) / 255.0f;

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	?CL_FxBlend@@YAHPAUcl_entity_s@@@Z	; CL_FxBlend
	add	esp, 4
	mov	DWORD PTR -16+[ebp], eax
	fild	DWORD PTR -16+[ebp]
	fdiv	DWORD PTR __real@4@4006ff00000000000000
	fstp	DWORD PTR ?tr@@3Uref_globals_t@@A+1411976

; 1267 : 		else tr.blend = 1.0f; // draw as solid but sorted by distance

	jmp	SHORT $L72554
$L72553:
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1411976, 1065353216 ; 3f800000H
$L72554:

; 1268 : 
; 1269 : 		if( tr.blend <= 0.0f ) continue;

	fld	DWORD PTR ?tr@@3Uref_globals_t@@A+1411976
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L72555
	jmp	$L72551
$L72555:

; 1272 : 		{

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR -20+[ebp], edx
	cmp	DWORD PTR -20+[ebp], 0
	je	SHORT $L72560
	cmp	DWORD PTR -20+[ebp], 1
	je	SHORT $L72562
	cmp	DWORD PTR -20+[ebp], 3
	je	SHORT $L72561
	jmp	SHORT $L72563
$L72560:

; 1273 : 		case mod_brush:
; 1274 : 			R_DrawBrushModel( RI->currententity );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	?R_DrawBrushModel@@YAXPAUcl_entity_s@@@Z ; R_DrawBrushModel
	add	esp, 4

; 1275 : 			break;

	jmp	SHORT $L72557
$L72561:

; 1276 : 		case mod_studio:
; 1277 : 			R_DrawStudioModel( RI->currententity );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	?R_DrawStudioModel@@YAXPAUcl_entity_s@@@Z ; R_DrawStudioModel
	add	esp, 4

; 1278 : 			break;

	jmp	SHORT $L72557
$L72562:

; 1279 : 		case mod_sprite:
; 1280 : 			R_DrawSpriteModel( RI->currententity );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	?R_DrawSpriteModel@@YAXPAUcl_entity_s@@@Z ; R_DrawSpriteModel
	add	esp, 4
$L72563:
$L72557:

; 1285 : 	}

	jmp	$L72551
$L72552:

; 1286 : 
; 1287 : 	GL_CheckForErrors();

	movsx	eax, WORD PTR ?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA ; `R_DrawEntitiesOnList'::`2'::__LINE__Var
	add	eax, 94					; 0000005eH
	push	eax
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	call	?GL_CheckForErrors_@@YAXPBDH@Z		; GL_CheckForErrors_
	add	esp, 8

; 1288 : 
; 1289 : 	R_RestoreGLState();

	call	?R_RestoreGLState@@YAXXZ		; R_RestoreGLState

; 1290 : 	pglTexEnvi( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE );

	push	8448					; 00002100H
	push	8704					; 00002200H
	push	8960					; 00002300H
	call	DWORD PTR ?pglTexEnvi@@3P6GXIIH@ZA	; pglTexEnvi

; 1291 : 	HUD_DrawTransparentTriangles();

	call	?HUD_DrawTransparentTriangles@@YAXXZ	; HUD_DrawTransparentTriangles

; 1292 : 
; 1293 : 	GL_CheckForErrors();

	movsx	ecx, WORD PTR ?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA ; `R_DrawEntitiesOnList'::`2'::__LINE__Var
	add	ecx, 100				; 00000064H
	push	ecx
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	call	?GL_CheckForErrors_@@YAXPBDH@Z		; GL_CheckForErrors_
	add	esp, 8

; 1294 : 
; 1295 : 	R_AllowFog( false );

	push	0
	call	?R_AllowFog@@YAXH@Z			; R_AllowFog
	add	esp, 4

; 1296 : 	R_DrawParticles( true );

	push	1
	call	?R_DrawParticles@@YAXH@Z		; R_DrawParticles
	add	esp, 4

; 1297 : 	R_AllowFog( true );

	push	1
	call	?R_AllowFog@@YAXH@Z			; R_AllowFog
	add	esp, 4

; 1298 : 
; 1299 : 	GL_CheckForErrors();

	movsx	edx, WORD PTR ?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA ; `R_DrawEntitiesOnList'::`2'::__LINE__Var
	add	edx, 106				; 0000006aH
	push	edx
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	call	?GL_CheckForErrors_@@YAXPBDH@Z		; GL_CheckForErrors_
	add	esp, 8

; 1300 : 
; 1301 : 	glState.drawTrans = false;

	mov	DWORD PTR ?glState@@3UglState_t@@A+32, 0

; 1302 : 	pglDisable( GL_BLEND );	// Trinity Render issues

	push	3042					; 00000be2H
	call	DWORD PTR ?pglDisable@@3P6GXI@ZA	; pglDisable

; 1303 : 
; 1304 : 	R_DrawViewModel();

	call	?R_DrawViewModel@@YAXXZ			; R_DrawViewModel

; 1305 : 
; 1306 : 	GL_CheckForErrors();

	movsx	eax, WORD PTR ?__LINE__Var@?1??R_DrawEntitiesOnList@@YAXXZ@4FA ; `R_DrawEntitiesOnList'::`2'::__LINE__Var
	add	eax, 113				; 00000071H
	push	eax
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	call	?GL_CheckForErrors_@@YAXPBDH@Z		; GL_CheckForErrors_
	add	esp, 8

; 1307 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_DrawEntitiesOnList@@YAXXZ ENDP			; R_DrawEntitiesOnList
_TEXT	ENDS
EXTRN	?DrawStudioModelInternal@CStudioModelRenderer@@QAEXPAUcl_entity_s@@@Z:NEAR ; CStudioModelRenderer::DrawStudioModelInternal
;	COMDAT ?R_DrawStudioModel@@YAXPAUcl_entity_s@@@Z
_TEXT	SEGMENT
_e$ = 8
?R_DrawStudioModel@@YAXPAUcl_entity_s@@@Z PROC NEAR	; R_DrawStudioModel, COMDAT

; 648  : inline void R_DrawStudioModel( cl_entity_t *e ) { g_StudioRenderer.DrawStudioModelInternal( e ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, OFFSET FLAT:?g_StudioRenderer@@3VCStudioModelRenderer@@A
	call	?DrawStudioModelInternal@CStudioModelRenderer@@QAEXPAUcl_entity_s@@@Z ; CStudioModelRenderer::DrawStudioModelInternal
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_DrawStudioModel@@YAXPAUcl_entity_s@@@Z ENDP		; R_DrawStudioModel
_TEXT	ENDS
EXTRN	?DrawViewModel@CStudioModelRenderer@@QAEXXZ:NEAR ; CStudioModelRenderer::DrawViewModel
;	COMDAT ?R_DrawViewModel@@YAXXZ
_TEXT	SEGMENT
?R_DrawViewModel@@YAXXZ PROC NEAR			; R_DrawViewModel, COMDAT

; 650  : inline void R_DrawViewModel( void ) { g_StudioRenderer.DrawViewModel(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET FLAT:?g_StudioRenderer@@3VCStudioModelRenderer@@A
	call	?DrawViewModel@CStudioModelRenderer@@QAEXXZ ; CStudioModelRenderer::DrawViewModel
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_DrawViewModel@@YAXXZ ENDP				; R_DrawViewModel
_TEXT	ENDS
EXTRN	?DrawSpriteModelInternal@CSpriteModelRenderer@@QAEXPAUcl_entity_s@@@Z:NEAR ; CSpriteModelRenderer::DrawSpriteModelInternal
EXTRN	?g_SpriteRenderer@@3VCSpriteModelRenderer@@A:BYTE ; g_SpriteRenderer
;	COMDAT ?R_DrawSpriteModel@@YAXPAUcl_entity_s@@@Z
_TEXT	SEGMENT
_e$ = 8
?R_DrawSpriteModel@@YAXPAUcl_entity_s@@@Z PROC NEAR	; R_DrawSpriteModel, COMDAT

; 106  : inline void R_DrawSpriteModel( cl_entity_t *e ) { g_SpriteRenderer.DrawSpriteModelInternal( e ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, OFFSET FLAT:?g_SpriteRenderer@@3VCSpriteModelRenderer@@A
	call	?DrawSpriteModelInternal@CSpriteModelRenderer@@QAEXPAUcl_entity_s@@@Z ; CSpriteModelRenderer::DrawSpriteModelInternal
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_DrawSpriteModel@@YAXPAUcl_entity_s@@@Z ENDP		; R_DrawSpriteModel
_TEXT	ENDS
PUBLIC	?R_RenderScene@@YAXXZ				; R_RenderScene
PUBLIC	??_C@_0BP@EKII@R_RenderView?3?5NULL?5worldmodel?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@FKNO@?$CFs?9?$DO?$CFd?5?$CFs?5?$CI?$CFd?5subview?$CJ?6?$AA@ ; `string'
EXTRN	?R_PushDlights@@YAXXZ:NEAR			; R_PushDlights
EXTRN	?RenderSunShafts@@YAXXZ:NEAR			; RenderSunShafts
EXTRN	?R_RenderShadowmaps@@YAXXZ:NEAR			; R_RenderShadowmaps
EXTRN	?R_RenderSubview@@YAXXZ:NEAR			; R_RenderSubview
EXTRN	?R_DrawWorld@@YAXXZ:NEAR			; R_DrawWorld
EXTRN	?R_CheckSkyPortal@@YAXPAUcl_entity_s@@@Z:NEAR	; R_CheckSkyPortal
EXTRN	?va@@YAPADPBDZZ:NEAR				; va
EXTRN	?r_speeds@@3PAUcvar_s@@A:DWORD			; r_speeds
;	COMDAT ??_C@_0BP@EKII@R_RenderView?3?5NULL?5worldmodel?6?$AA@
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
??_C@_0BP@EKII@R_RenderView?3?5NULL?5worldmodel?6?$AA@ DB 'R_RenderView: '
	DB	'NULL worldmodel', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FKNO@?$CFs?9?$DO?$CFd?5?$CFs?5?$CI?$CFd?5subview?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0BI@FKNO@?$CFs?9?$DO?$CFd?5?$CFs?5?$CI?$CFd?5subview?$CJ?6?$AA@ DB '%'
	DB	's->%d %s (%d subview)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ?R_RenderScene@@YAXXZ
_TEXT	SEGMENT
_empty$ = -8
_num_faces$72572 = -12
_i$72574 = -16
_string$72578 = -20
?R_RenderScene@@YAXXZ PROC NEAR				; R_RenderScene, COMDAT

; 1317 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1318 : 	char	empty[MAX_REF_STACK];
; 1319 : 
; 1320 : 	// set the worldmodel
; 1321 : 	if(( worldmodel = GET_ENTITY( 0 )->model ) == NULL )

	push	0
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+212
	add	esp, 4
	mov	eax, DWORD PTR [eax+2964]
	mov	DWORD PTR ?worldmodel@@3PAUmodel_s@@A, eax ; worldmodel
	cmp	DWORD PTR ?worldmodel@@3PAUmodel_s@@A, 0 ; worldmodel
	jne	SHORT $L72568

; 1322 : 		HOST_ERROR( "R_RenderView: NULL worldmodel\n" );

	push	OFFSET FLAT:??_C@_0BP@EKII@R_RenderView?3?5NULL?5worldmodel?6?$AA@ ; `string'
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+236
	add	esp, 4
$L72568:

; 1323 : 
; 1324 : 	if( (int)r_speeds->value == 7 )

	mov	ecx, DWORD PTR ?r_speeds@@3PAUcvar_s@@A	; r_speeds
	fld	DWORD PTR [ecx+12]
	call	__ftol
	cmp	eax, 7
	jne	$L72571

; 1326 : 		int	num_faces = 0;

	mov	DWORD PTR _num_faces$72572[ebp], 0

; 1327 : 
; 1328 : 		if( glState.stack_position > 0 )

	cmp	DWORD PTR ?glState@@3UglState_t@@A+112200, 0
	jbe	SHORT $L72573

; 1329 : 			num_faces = R_GetPrevInstance()->num_subview_faces;

	call	?R_GetPrevInstance@@YAPAUref_instance_t@@XZ ; R_GetPrevInstance
	mov	edx, DWORD PTR [eax+13988]
	mov	DWORD PTR _num_faces$72572[ebp], edx
$L72573:

; 1330 : 		for( unsigned int i = 0; i < glState.stack_position; i++ )

	mov	DWORD PTR _i$72574[ebp], 0
	jmp	SHORT $L72575
$L72576:
	mov	eax, DWORD PTR _i$72574[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72574[ebp], eax
$L72575:
	mov	ecx, DWORD PTR _i$72574[ebp]
	cmp	ecx, DWORD PTR ?glState@@3UglState_t@@A+112200
	jae	SHORT $L72577

; 1331 : 			empty[i] = ' ';

	mov	edx, DWORD PTR _i$72574[ebp]
	mov	BYTE PTR _empty$[ebp+edx], 32		; 00000020H
	jmp	SHORT $L72576
$L72577:

; 1332 : 		empty[i] = '\0';

	mov	eax, DWORD PTR _i$72574[ebp]
	mov	BYTE PTR _empty$[ebp+eax], 0

; 1333 : 
; 1334 : 		// build pass hierarchy
; 1335 : 		const char *string = va( "%s->%d %s (%d subview)\n", empty, glState.stack_position, R_GetNameForView( ), num_faces );

	mov	ecx, DWORD PTR _num_faces$72572[ebp]
	push	ecx
	call	?R_GetNameForView@@YAPBDXZ		; R_GetNameForView
	push	eax
	mov	edx, DWORD PTR ?glState@@3UglState_t@@A+112200
	push	edx
	lea	eax, DWORD PTR _empty$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BI@FKNO@?$CFs?9?$DO?$CFd?5?$CFs?5?$CI?$CFd?5subview?$CJ?6?$AA@ ; `string'
	call	?va@@YAPADPBDZZ				; va
	add	esp, 20					; 00000014H
	mov	DWORD PTR _string$72578[ebp], eax

; 1336 : 		Q_strncat( r_depth_msg, string, sizeof( r_depth_msg ));

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _string$72578[ebp]
	push	ecx
	push	OFFSET FLAT:?r_depth_msg@@3PADA		; r_depth_msg
	call	?Q_strncat@@YAIPADPBDI@Z		; Q_strncat
	add	esp, 12					; 0000000cH
$L72571:

; 1338 : 
; 1339 : 	// recursive draw mirrors, portals, etc
; 1340 : 	R_RenderSubview ();

	call	?R_RenderSubview@@YAXXZ			; R_RenderSubview

; 1341 : 
; 1342 : 	R_RenderShadowmaps();

	call	?R_RenderShadowmaps@@YAXXZ		; R_RenderShadowmaps

; 1343 : 
; 1344 : 	R_CheckSkyPortal( tr.sky_camera );

	mov	edx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411712
	push	edx
	call	?R_CheckSkyPortal@@YAXPAUcl_entity_s@@@Z ; R_CheckSkyPortal
	add	esp, 4

; 1345 : 
; 1346 : 	// frametime is valid only for normal pass
; 1347 : 	if( RP_NORMALPASS( ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 483				; 000001e3H
	test	ecx, ecx
	jne	SHORT $L72580

; 1348 : 		tr.frametime = tr.time - tr.oldtime;

	fld	QWORD PTR ?tr@@3Uref_globals_t@@A+8
	fsub	QWORD PTR ?tr@@3Uref_globals_t@@A+16
	fstp	QWORD PTR ?tr@@3Uref_globals_t@@A+24

; 1349 : 	else tr.frametime = 0.0;

	jmp	SHORT $L72581
$L72580:
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+24, 0
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+28, 0
$L72581:

; 1350 : 
; 1351 : 	r_stats.num_passes++;

	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+68
	add	edx, 1
	mov	DWORD PTR ?r_stats@@3Uref_stats_t@@A+68, edx

; 1352 : 
; 1353 : 	// begin a new frame
; 1354 : 	R_SetupFrustum();

	call	?R_SetupFrustum@@YAXXZ			; R_SetupFrustum

; 1355 : 	R_SetupFrame();

	call	?R_SetupFrame@@YAXXZ			; R_SetupFrame

; 1356 : 	R_SetupGL();

	call	?R_SetupGL@@YAXXZ			; R_SetupGL

; 1357 : 	R_Clear( ~0 );

	push	-1
	call	?R_Clear@@YAXH@Z			; R_Clear
	add	esp, 4

; 1358 : 
; 1359 : 	R_PushDlights();

	call	?R_PushDlights@@YAXXZ			; R_PushDlights

; 1360 : 	R_CheckFog();

	call	?R_CheckFog@@YAXXZ			; R_CheckFog

; 1361 : 
; 1362 : 	R_DrawWorld();

	call	?R_DrawWorld@@YAXXZ			; R_DrawWorld

; 1363 : 
; 1364 : 	R_DrawEntitiesOnList();

	call	?R_DrawEntitiesOnList@@YAXXZ		; R_DrawEntitiesOnList

; 1365 : 
; 1366 : 	R_EndGL();

	call	?R_EndGL@@YAXXZ				; R_EndGL

; 1367 : 
; 1368 : 	if( !FBitSet( RI->params, RP_MIRRORVIEW|RP_ENVVIEW|RP_SHADOWVIEW ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 259				; 00000103H
	test	ecx, ecx
	jne	SHORT $L72582

; 1369 : 		RenderSunShafts();

	call	?RenderSunShafts@@YAXXZ			; RenderSunShafts
$L72582:

; 1370 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_RenderScene@@YAXXZ ENDP				; R_RenderScene
_TEXT	ENDS
EXTRN	?pglClear@@3P6GXI@ZA:DWORD			; pglClear
EXTRN	?pglClearColor@@3P6GXMMMM@ZA:DWORD		; pglClearColor
EXTRN	?pglDepthFunc@@3P6GXI@ZA:DWORD			; pglDepthFunc
EXTRN	?pglDepthRange@@3P6GXNN@ZA:DWORD		; pglDepthRange
EXTRN	?r_clear@@3PAUcvar_s@@A:DWORD			; r_clear
EXTRN	?GL_Support@@YA_NH@Z:NEAR			; GL_Support
;	COMDAT ?R_Clear@@YAXH@Z
_TEXT	SEGMENT
_bitMask$ = 8
_bits$ = -4
?R_Clear@@YAXH@Z PROC NEAR				; R_Clear, COMDAT

; 664  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 665  : 	int	bits;
; 666  : 
; 667  : 	if( FBitSet( RI->params, RP_OVERVIEW ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 512				; 00000200H
	test	ecx, ecx
	je	SHORT $L72355

; 668  : 		pglClearColor( 0.0f, 1.0f, 0.0f, 1.0f ); // green background (Valve rules)

	push	1065353216				; 3f800000H
	push	0
	push	1065353216				; 3f800000H
	push	0
	call	DWORD PTR ?pglClearColor@@3P6GXMMMM@ZA	; pglClearColor

; 669  : 	else pglClearColor( 0.5f, 0.5f, 0.5f, 1.0f );

	jmp	SHORT $L72356
$L72355:
	push	1065353216				; 3f800000H
	push	1056964608				; 3f000000H
	push	1056964608				; 3f000000H
	push	1056964608				; 3f000000H
	call	DWORD PTR ?pglClearColor@@3P6GXMMMM@ZA	; pglClearColor
$L72356:

; 670  : 
; 671  : 	bits = GL_DEPTH_BUFFER_BIT;

	mov	DWORD PTR _bits$[ebp], 256		; 00000100H

; 672  : 
; 673  : 	// force to clearing screen to avoid ugly blur
; 674  : 	if( tr.fClearScreen && !CVAR_TO_BOOL( r_clear ))

	xor	edx, edx
	mov	dl, BYTE PTR ?tr@@3Uref_globals_t@@A+2
	test	edx, edx
	je	SHORT $L72357
	cmp	DWORD PTR ?r_clear@@3PAUcvar_s@@A, 0	; r_clear
	je	SHORT $L73349
	mov	eax, DWORD PTR ?r_clear@@3PAUcvar_s@@A	; r_clear
	fld	DWORD PTR [eax+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L73349
	mov	BYTE PTR -8+[ebp], 1
	jmp	SHORT $L73350
$L73349:
	mov	BYTE PTR -8+[ebp], 0
$L73350:
	mov	ecx, DWORD PTR -8+[ebp]
	and	ecx, 255				; 000000ffH
	test	ecx, ecx
	jne	SHORT $L72357

; 675  : 		bits |= GL_COLOR_BUFFER_BIT;

	mov	edx, DWORD PTR _bits$[ebp]
	or	dh, 64					; 00000040H
	mov	DWORD PTR _bits$[ebp], edx
$L72357:

; 676  : #if 0
; 677  : 	if( glState.stencilEnabled )
; 678  : 		bits |= GL_STENCIL_BUFFER_BIT;
; 679  : #endif
; 680  : 	bits &= bitMask;

	mov	eax, DWORD PTR _bits$[ebp]
	and	eax, DWORD PTR _bitMask$[ebp]
	mov	DWORD PTR _bits$[ebp], eax

; 681  : 
; 682  : 	pglClear( bits );

	mov	ecx, DWORD PTR _bits$[ebp]
	push	ecx
	call	DWORD PTR ?pglClear@@3P6GXI@ZA		; pglClear

; 683  : 
; 684  : 	// change ordering for overview
; 685  : 	if( FBitSet( RI->params, RP_OVERVIEW ))

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $L72358

; 687  : 		gldepthmin = 1.0f;

	mov	DWORD PTR ?gldepthmin@@3MA, 1065353216	; 3f800000H

; 688  : 		gldepthmax = 0.0f;

	mov	DWORD PTR ?gldepthmax@@3MA, 0

; 690  : 	else

	jmp	SHORT $L72359
$L72358:

; 692  : 		if( GL_Support( R_PARANOIA_EXT ))

	push	18					; 00000012H
	call	?GL_Support@@YA_NH@Z			; GL_Support
	add	esp, 4
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L72360

; 693  : 			gldepthmin = 0.0001f;

	mov	DWORD PTR ?gldepthmin@@3MA, 953267991	; 38d1b717H

; 694  : 		else gldepthmin = 0.0f;

	jmp	SHORT $L72361
$L72360:
	mov	DWORD PTR ?gldepthmin@@3MA, 0
$L72361:

; 695  : 		gldepthmax = 1.0f;

	mov	DWORD PTR ?gldepthmax@@3MA, 1065353216	; 3f800000H
$L72359:

; 697  : 
; 698  : 	pglDepthFunc( GL_LEQUAL );

	push	515					; 00000203H
	call	DWORD PTR ?pglDepthFunc@@3P6GXI@ZA	; pglDepthFunc

; 699  : 	pglDepthRange( gldepthmin, gldepthmax );

	fld	DWORD PTR ?gldepthmax@@3MA		; gldepthmax
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?gldepthmin@@3MA		; gldepthmin
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	DWORD PTR ?pglDepthRange@@3P6GXNN@ZA	; pglDepthRange

; 700  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_Clear@@YAXH@Z ENDP					; R_Clear
_TEXT	ENDS
EXTRN	_qsort:NEAR
EXTRN	?r_nosort@@3PAUcvar_s@@A:DWORD			; r_nosort
;	COMDAT ?R_SetupFrame@@YAXXZ
_TEXT	SEGMENT
?R_SetupFrame@@YAXXZ PROC NEAR				; R_SetupFrame, COMDAT

; 911  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 912  : 	// setup viewplane dist
; 913  : 	RI->viewplanedist = DotProduct( RI->vieworg, RI->vforward );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 216				; 000000d8H
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 204				; 000000ccH
	push	ecx
	call	?DotProduct@@YAMABVVector@@0@Z		; DotProduct
	add	esp, 8
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fstp	DWORD PTR [edx+13996]

; 914  : 
; 915  : 	if( !CVAR_TO_BOOL( r_nosort ))

	cmp	DWORD PTR ?r_nosort@@3PAUcvar_s@@A, 0	; r_nosort
	je	SHORT $L73353
	mov	eax, DWORD PTR ?r_nosort@@3PAUcvar_s@@A	; r_nosort
	fld	DWORD PTR [eax+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L73353
	mov	BYTE PTR -4+[ebp], 1
	jmp	SHORT $L73354
$L73353:
	mov	BYTE PTR -4+[ebp], 0
$L73354:
	mov	ecx, DWORD PTR -4+[ebp]
	and	ecx, 255				; 000000ffH
	test	ecx, ecx
	jne	SHORT $L72439

; 917  : 		// sort translucents entities by rendermode and distance
; 918  : 		qsort( tr.trans_entities, tr.num_trans_entities, sizeof( cl_entity_t* ), (cmpfunc)R_TransEntityCompare );

	push	OFFSET FLAT:?R_TransEntityCompare@@YAHPAPBUcl_entity_s@@0@Z ; R_TransEntityCompare
	push	4
	mov	edx, DWORD PTR ?tr@@3Uref_globals_t@@A+346752
	push	edx
	push	OFFSET FLAT:?tr@@3Uref_globals_t@@A+341884
	call	_qsort
	add	esp, 16					; 00000010H
$L72439:

; 920  : 
; 921  : 	// current viewleaf
; 922  : 	if( !FBitSet( RI->params, RP_OLDVIEWLEAF ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 4
	test	ecx, ecx
	jne	SHORT $L72442

; 923  : 		R_FindViewLeaf();

	call	?R_FindViewLeaf@@YAXXZ			; R_FindViewLeaf
$L72442:

; 924  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_SetupFrame@@YAXXZ ENDP				; R_SetupFrame
_TEXT	ENDS
PUBLIC	??HVector@@QBE?AV0@ABV0@@Z			; Vector::operator+
PUBLIC	??DVector@@QBE?AV0@M@Z				; Vector::operator*
;	COMDAT ?R_TransEntityCompare@@YAHPAPBUcl_entity_s@@0@Z
_TEXT	SEGMENT
_a$ = 8
_b$ = 12
_ent1$ = -4
_ent2$ = -8
_rendermode1$ = -12
_rendermode2$ = -16
_dist1$ = -20
_dist2$ = -24
_org$72184 = -36
_vecLen$72188 = -48
_org$72193 = -60
_vecLen$72197 = -72
$T73357 = -84
$T73358 = -96
$T73359 = -108
$T73360 = -120
$T73361 = -132
$T73362 = -144
$T73363 = -156
$T73364 = -168
?R_TransEntityCompare@@YAHPAPBUcl_entity_s@@0@Z PROC NEAR ; R_TransEntityCompare, COMDAT

; 193  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi

; 194  : 	cl_entity_t *ent1 = (cl_entity_t *)*a;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ent1$[ebp], ecx

; 195  : 	cl_entity_t *ent2 = (cl_entity_t *)*b;

	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _ent2$[ebp], eax

; 196  : 	int rendermode1 = R_GetEntityRenderMode( ent1 );

	mov	ecx, DWORD PTR _ent1$[ebp]
	push	ecx
	call	?R_GetEntityRenderMode@@YAHPAUcl_entity_s@@@Z ; R_GetEntityRenderMode
	add	esp, 4
	mov	DWORD PTR _rendermode1$[ebp], eax

; 197  : 	int rendermode2 = R_GetEntityRenderMode( ent2 );

	mov	edx, DWORD PTR _ent2$[ebp]
	push	edx
	call	?R_GetEntityRenderMode@@YAHPAUcl_entity_s@@@Z ; R_GetEntityRenderMode
	add	esp, 4
	mov	DWORD PTR _rendermode2$[ebp], eax

; 198  : 	float dist1, dist2;
; 199  : 
; 200  : 	// sort by distance
; 201  : 	if( ent1->model->type != mod_brush || rendermode1 != kRenderTransAlpha )

	mov	eax, DWORD PTR _ent1$[ebp]
	mov	ecx, DWORD PTR [eax+2964]
	cmp	DWORD PTR [ecx+68], 0
	jne	SHORT $L72183
	cmp	DWORD PTR _rendermode1$[ebp], 4
	je	$L72182
$L72183:

; 203  : 		Vector org = ent1->origin + ((ent1->model->mins + ent1->model->maxs) * 0.5f);

	push	1056964608				; 3f000000H
	lea	edx, DWORD PTR $T73358[ebp]
	push	edx
	mov	eax, DWORD PTR _ent1$[ebp]
	mov	ecx, DWORD PTR [eax+2964]
	add	ecx, 96					; 00000060H
	push	ecx
	lea	edx, DWORD PTR $T73357[ebp]
	push	edx
	mov	eax, DWORD PTR _ent1$[ebp]
	mov	ecx, DWORD PTR [eax+2964]
	add	ecx, 84					; 00000054H
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T73359[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ent1$[ebp]
	add	ecx, 2888				; 00000b48H
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	lea	ecx, DWORD PTR _org$72184[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 204  : 		Vector vecLen = RI->vieworg - org;

	lea	edx, DWORD PTR _org$72184[ebp]
	push	edx
	lea	eax, DWORD PTR $T73360[ebp]
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 204				; 000000ccH
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	push	eax
	lea	ecx, DWORD PTR _vecLen$72188[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 205  : 		dist1 = DotProduct( vecLen, vecLen );

	lea	ecx, DWORD PTR _vecLen$72188[ebp]
	push	ecx
	lea	edx, DWORD PTR _vecLen$72188[ebp]
	push	edx
	call	?DotProduct@@YAMABVVector@@0@Z		; DotProduct
	add	esp, 8
	fstp	DWORD PTR _dist1$[ebp]

; 207  : 	else dist1 = 1000000000;

	jmp	SHORT $L72190
$L72182:
	mov	DWORD PTR _dist1$[ebp], 1315859240	; 4e6e6b28H
$L72190:

; 208  : 
; 209  : 	if( ent2->model->type != mod_brush || rendermode2 != kRenderTransAlpha )

	mov	eax, DWORD PTR _ent2$[ebp]
	mov	ecx, DWORD PTR [eax+2964]
	cmp	DWORD PTR [ecx+68], 0
	jne	SHORT $L72192
	cmp	DWORD PTR _rendermode2$[ebp], 4
	je	$L72191
$L72192:

; 211  : 		Vector org = ent2->origin + ((ent2->model->mins + ent2->model->maxs) * 0.5f);

	push	1056964608				; 3f000000H
	lea	edx, DWORD PTR $T73362[ebp]
	push	edx
	mov	eax, DWORD PTR _ent2$[ebp]
	mov	ecx, DWORD PTR [eax+2964]
	add	ecx, 96					; 00000060H
	push	ecx
	lea	edx, DWORD PTR $T73361[ebp]
	push	edx
	mov	eax, DWORD PTR _ent2$[ebp]
	mov	ecx, DWORD PTR [eax+2964]
	add	ecx, 84					; 00000054H
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, eax
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	ecx, DWORD PTR $T73363[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ent2$[ebp]
	add	ecx, 2888				; 00000b48H
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	lea	ecx, DWORD PTR _org$72193[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 212  : 		Vector vecLen = RI->vieworg - org;

	lea	edx, DWORD PTR _org$72193[ebp]
	push	edx
	lea	eax, DWORD PTR $T73364[ebp]
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 204				; 000000ccH
	call	??GVector@@QBE?AV0@ABV0@@Z		; Vector::operator-
	push	eax
	lea	ecx, DWORD PTR _vecLen$72197[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 213  : 		dist2 = DotProduct( vecLen, vecLen );

	lea	ecx, DWORD PTR _vecLen$72197[ebp]
	push	ecx
	lea	edx, DWORD PTR _vecLen$72197[ebp]
	push	edx
	call	?DotProduct@@YAMABVVector@@0@Z		; DotProduct
	add	esp, 8
	fstp	DWORD PTR _dist2$[ebp]

; 215  : 	else dist2 = 1000000000;

	jmp	SHORT $L72199
$L72191:
	mov	DWORD PTR _dist2$[ebp], 1315859240	; 4e6e6b28H
$L72199:

; 216  : 
; 217  : 	if( dist1 > dist2 )

	fld	DWORD PTR _dist1$[ebp]
	fcomp	DWORD PTR _dist2$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L72200

; 218  : 		return -1;

	or	eax, -1
	jmp	SHORT $L72173
$L72200:

; 219  : 	if( dist1 < dist2 )

	fld	DWORD PTR _dist1$[ebp]
	fcomp	DWORD PTR _dist2$[ebp]
	fnstsw	ax
	test	ah, 1
	je	SHORT $L72201

; 220  : 		return 1;

	mov	eax, 1
	jmp	SHORT $L72173
$L72201:

; 221  : 
; 222  : 	// then sort by rendermode
; 223  : 	if( R_RankForRenderMode( rendermode1 ) > R_RankForRenderMode( rendermode2 ))

	mov	eax, DWORD PTR _rendermode1$[ebp]
	push	eax
	call	?R_RankForRenderMode@@YAHH@Z		; R_RankForRenderMode
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _rendermode2$[ebp]
	push	ecx
	call	?R_RankForRenderMode@@YAHH@Z		; R_RankForRenderMode
	add	esp, 4
	cmp	esi, eax
	jle	SHORT $L72202

; 224  : 		return 1;

	mov	eax, 1
	jmp	SHORT $L72173
$L72202:

; 225  : 	if( R_RankForRenderMode( rendermode1 ) < R_RankForRenderMode( rendermode2 ))

	mov	edx, DWORD PTR _rendermode1$[ebp]
	push	edx
	call	?R_RankForRenderMode@@YAHH@Z		; R_RankForRenderMode
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _rendermode2$[ebp]
	push	eax
	call	?R_RankForRenderMode@@YAHH@Z		; R_RankForRenderMode
	add	esp, 4
	cmp	esi, eax
	jge	SHORT $L72203

; 226  : 		return -1;

	or	eax, -1
	jmp	SHORT $L72173
$L72203:

; 227  : 
; 228  : 	return 0;

	xor	eax, eax
$L72173:

; 229  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_TransEntityCompare@@YAHPAPBUcl_entity_s@@0@Z ENDP	; R_TransEntityCompare
_TEXT	ENDS
;	COMDAT ??HVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
_v$ = 12
___$ReturnUdt$ = 8
_this$ = -4
$T73367 = -16
??HVector@@QBE?AV0@ABV0@@Z PROC NEAR			; Vector::operator+, COMDAT

; 149  : 	inline Vector operator+(const Vector& v) const	{ return Vector(x+v.x, y+v.y, z+v.z);	   }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+8]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fadd	DWORD PTR [eax+4]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fadd	DWORD PTR [edx]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T73367[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??HVector@@QBE?AV0@ABV0@@Z ENDP				; Vector::operator+
_TEXT	ENDS
;	COMDAT ??DVector@@QBE?AV0@M@Z
_TEXT	SEGMENT
_fl$ = 12
___$ReturnUdt$ = 8
_this$ = -4
$T73370 = -16
??DVector@@QBE?AV0@M@Z PROC NEAR			; Vector::operator*, COMDAT

; 153  : 	inline Vector operator*(float fl) const		{ return Vector(x*fl, y*fl, z*fl);	   }

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fl$[ebp]
	fmul	DWORD PTR [eax+8]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fl$[ebp]
	fmul	DWORD PTR [ecx+4]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fl$[ebp]
	fmul	DWORD PTR [edx]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T73370[ebp]
	call	??0Vector@@QAE@MMM@Z			; Vector::Vector
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??DVector@@QBE?AV0@M@Z ENDP				; Vector::operator*
_TEXT	ENDS
;	COMDAT ?R_RankForRenderMode@@YAHH@Z
_TEXT	SEGMENT
_rendermode$ = 8
?R_RankForRenderMode@@YAHH@Z PROC NEAR			; R_RankForRenderMode, COMDAT

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 140  : 	{

	mov	eax, DWORD PTR _rendermode$[ebp]
	mov	DWORD PTR -4+[ebp], eax
	cmp	DWORD PTR -4+[ebp], 2
	je	SHORT $L72153
	cmp	DWORD PTR -4+[ebp], 3
	je	SHORT $L72155
	cmp	DWORD PTR -4+[ebp], 5
	je	SHORT $L72154
	jmp	SHORT $L72150
$L72153:

; 141  : 	case kRenderTransTexture:
; 142  : 		return 1;	// draw second

	mov	eax, 1
	jmp	SHORT $L72148
$L72154:

; 143  : 	case kRenderTransAdd:
; 144  : 		return 2;	// draw third

	mov	eax, 2
	jmp	SHORT $L72148
$L72155:

; 145  : 	case kRenderGlow:
; 146  : 		return 3;	// must be last!

	mov	eax, 3
	jmp	SHORT $L72148
$L72150:

; 148  : 	return 0;

	xor	eax, eax
$L72148:

; 149  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_RankForRenderMode@@YAHH@Z ENDP			; R_RankForRenderMode
_TEXT	ENDS
EXTRN	?pglClipPlane@@3P6GXIPBN@ZA:DWORD		; pglClipPlane
EXTRN	?pglColor4f@@3P6GXMMMM@ZA:DWORD			; pglColor4f
EXTRN	_ceil:NEAR
EXTRN	_floor:NEAR
;	COMDAT ?R_SetupGL@@YAXXZ
_TEXT	SEGMENT
$T73376 = -120
_x$72449 = -4
_x2$72450 = -8
_y$72451 = -12
_y2$72452 = -16
_clip$72457 = -48
_p$72458 = -52
?R_SetupGL@@YAXXZ PROC NEAR				; R_SetupGL, COMDAT

; 932  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi

; 933  : 	R_SetupModelviewMatrix( RI->worldviewMatrix );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 416				; 000001a0H
	push	eax
	call	?R_SetupModelviewMatrix@@YAXAAVmatrix4x4@@@Z ; R_SetupModelviewMatrix
	add	esp, 4

; 934  : 	R_SetupProjectionMatrix( RI->fov_x, RI->fov_y, RI->projectionMatrix );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 544				; 00000220H
	push	ecx
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	?R_SetupProjectionMatrix@@YAXMMAAVmatrix4x4@@@Z ; R_SetupProjectionMatrix
	add	esp, 12					; 0000000cH

; 935  : 
; 936  : 	RI->worldviewProjectionMatrix = RI->projectionMatrix.Concat( RI->worldviewMatrix );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 416				; 000001a0H
	sub	esp, 64					; 00000040H
	mov	ecx, esp
	push	eax
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	lea	ecx, DWORD PTR $T73376[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 544				; 00000220H
	call	?Concat@matrix4x4@@QAE?AV1@V1@@Z	; matrix4x4::Concat
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 608				; 00000260H
	call	??4matrix4x4@@QAEAAV0@ABV0@@Z		; matrix4x4::operator=

; 937  : 
; 938  : 	if( RP_NORMALPASS( ))

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx]
	and	eax, 483				; 000001e3H
	test	eax, eax
	jne	$L72448

; 940  : 		// setup main viewport
; 941  : 		int x = floor( RI->viewport[0] * glState.width / glState.width );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [ecx+32]
	imul	eax, DWORD PTR ?glState@@3UglState_t@@A
	cdq
	idiv	DWORD PTR ?glState@@3UglState_t@@A
	mov	DWORD PTR -132+[ebp], eax
	fild	DWORD PTR -132+[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	call	__ftol
	mov	DWORD PTR _x$72449[ebp], eax

; 942  : 		int x2 = ceil(( RI->viewport[0] + RI->viewport[2] ) * glState.width / glState.width );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, DWORD PTR [ecx+40]
	imul	eax, DWORD PTR ?glState@@3UglState_t@@A
	cdq
	idiv	DWORD PTR ?glState@@3UglState_t@@A
	mov	DWORD PTR -136+[ebp], eax
	fild	DWORD PTR -136+[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_ceil
	add	esp, 8
	call	__ftol
	mov	DWORD PTR _x2$72450[ebp], eax

; 943  : 		int y = floor( glState.height - RI->viewport[1] * glState.height / glState.height );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+36]
	imul	eax, DWORD PTR ?glState@@3UglState_t@@A+4
	cdq
	idiv	DWORD PTR ?glState@@3UglState_t@@A+4
	mov	ecx, DWORD PTR ?glState@@3UglState_t@@A+4
	sub	ecx, eax
	mov	DWORD PTR -140+[ebp], ecx
	fild	DWORD PTR -140+[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	call	__ftol
	mov	DWORD PTR _y$72451[ebp], eax

; 944  : 		int y2 = ceil( glState.height - ( RI->viewport[1] + RI->viewport[3] ) * glState.height / glState.height );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, DWORD PTR [ecx+44]
	imul	eax, DWORD PTR ?glState@@3UglState_t@@A+4
	cdq
	idiv	DWORD PTR ?glState@@3UglState_t@@A+4
	mov	edx, DWORD PTR ?glState@@3UglState_t@@A+4
	sub	edx, eax
	mov	DWORD PTR -144+[ebp], edx
	fild	DWORD PTR -144+[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_ceil
	add	esp, 8
	call	__ftol
	mov	DWORD PTR _y2$72452[ebp], eax

; 945  : 		pglViewport( x, y2, x2 - x, y - y2 );

	mov	eax, DWORD PTR _y$72451[ebp]
	sub	eax, DWORD PTR _y2$72452[ebp]
	push	eax
	mov	ecx, DWORD PTR _x2$72450[ebp]
	sub	ecx, DWORD PTR _x$72449[ebp]
	push	ecx
	mov	edx, DWORD PTR _y2$72452[ebp]
	push	edx
	mov	eax, DWORD PTR _x$72449[ebp]
	push	eax
	call	DWORD PTR ?pglViewport@@3P6GXHHHH@ZA	; pglViewport

; 947  : 	else

	jmp	SHORT $L72453
$L72448:

; 949  : 		// setup sub viewport
; 950  : 		pglViewport( RI->viewport[0], RI->viewport[1], RI->viewport[2], RI->viewport[3] );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR ?pglViewport@@3P6GXHHHH@ZA	; pglViewport
$L72453:

; 952  : 
; 953  : 	pglMatrixMode( GL_PROJECTION );

	push	5889					; 00001701H
	call	DWORD PTR ?pglMatrixMode@@3P6GXI@ZA	; pglMatrixMode

; 954  : 	GL_LoadMatrix( RI->projectionMatrix );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 544				; 00000220H
	sub	esp, 64					; 00000040H
	mov	ecx, esp
	push	eax
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	call	?GL_LoadMatrix@@YAXVmatrix4x4@@@Z	; GL_LoadMatrix
	add	esp, 64					; 00000040H

; 955  : 
; 956  : 	pglMatrixMode( GL_MODELVIEW );

	push	5888					; 00001700H
	call	DWORD PTR ?pglMatrixMode@@3P6GXI@ZA	; pglMatrixMode

; 957  : 	GL_LoadMatrix( RI->worldviewMatrix );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 416				; 000001a0H
	sub	esp, 64					; 00000040H
	mov	edx, esp
	push	ecx
	mov	ecx, edx
	call	??0matrix4x4@@QAE@ABV0@@Z		; matrix4x4::matrix4x4
	call	?GL_LoadMatrix@@YAXVmatrix4x4@@@Z	; GL_LoadMatrix
	add	esp, 64					; 00000040H

; 958  : 
; 959  : 	if( FBitSet( RI->params, RP_CLIPPLANE ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 8
	test	ecx, ecx
	je	SHORT $L72456

; 961  : 		GLdouble	clip[4];
; 962  : 		mplane_t	*p = &RI->clipPlane;

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 14000				; 000036b0H
	mov	DWORD PTR _p$72458[ebp], edx

; 963  : 
; 964  : 		clip[0] = p->normal[0];

	mov	ecx, DWORD PTR _p$72458[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax]
	fstp	QWORD PTR _clip$72457[ebp]

; 965  : 		clip[1] = p->normal[1];

	mov	ecx, DWORD PTR _p$72458[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax+4]
	fstp	QWORD PTR _clip$72457[ebp+8]

; 966  : 		clip[2] = p->normal[2];

	mov	ecx, DWORD PTR _p$72458[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax+8]
	fstp	QWORD PTR _clip$72457[ebp+16]

; 967  : 		clip[3] = -p->dist;

	mov	eax, DWORD PTR _p$72458[ebp]
	fld	DWORD PTR [eax+12]
	fchs
	fstp	QWORD PTR _clip$72457[ebp+24]

; 968  : 
; 969  : 		pglClipPlane( GL_CLIP_PLANE0, clip );

	lea	ecx, DWORD PTR _clip$72457[ebp]
	push	ecx
	push	12288					; 00003000H
	call	DWORD PTR ?pglClipPlane@@3P6GXIPBN@ZA	; pglClipPlane

; 970  : 		pglEnable( GL_CLIP_PLANE0 );

	push	12288					; 00003000H
	call	DWORD PTR ?pglEnable@@3P6GXI@ZA		; pglEnable
$L72456:

; 972  : 
; 973  : 	GL_Cull( GL_FRONT );

	push	1028					; 00000404H
	call	?GL_Cull@@YAXI@Z			; GL_Cull
	add	esp, 4

; 974  : 
; 975  : 	pglDisable( GL_BLEND );

	push	3042					; 00000be2H
	call	DWORD PTR ?pglDisable@@3P6GXI@ZA	; pglDisable

; 976  : 	pglDisable( GL_ALPHA_TEST );

	push	3008					; 00000bc0H
	call	DWORD PTR ?pglDisable@@3P6GXI@ZA	; pglDisable

; 977  : 	pglColor4f( 1.0f, 1.0f, 1.0f, 1.0f );

	push	1065353216				; 3f800000H
	push	1065353216				; 3f800000H
	push	1065353216				; 3f800000H
	push	1065353216				; 3f800000H
	call	DWORD PTR ?pglColor4f@@3P6GXMMMM@ZA	; pglColor4f

; 978  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_SetupGL@@YAXXZ ENDP					; R_SetupGL
_TEXT	ENDS
;	COMDAT ?R_EndGL@@YAXXZ
_TEXT	SEGMENT
?R_EndGL@@YAXXZ PROC NEAR				; R_EndGL, COMDAT

; 986  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 987  : 	if( FBitSet( RI->params, RP_CLIPPLANE ))

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	and	ecx, 8
	test	ecx, ecx
	je	SHORT $L72462

; 988  : 		pglDisable( GL_CLIP_PLANE0 );

	push	12288					; 00003000H
	call	DWORD PTR ?pglDisable@@3P6GXI@ZA	; pglDisable
$L72462:

; 989  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_EndGL@@YAXXZ ENDP					; R_EndGL
_TEXT	ENDS
PUBLIC	__real@4@3ff0d1b7170000000000
PUBLIC	__real@4@3feda7c5ac0000000000
;	COMDAT __real@4@3ff0d1b7170000000000
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
__real@4@3ff0d1b7170000000000 DD 03851b717r	; 5e-005
CONST	ENDS
;	COMDAT __real@4@3feda7c5ac0000000000
CONST	SEGMENT
__real@4@3feda7c5ac0000000000 DD 036a7c5acr	; 5e-006
CONST	ENDS
;	COMDAT ?R_CheckFog@@YAXXZ
_TEXT	SEGMENT
_ent$ = -4
_texture$ = -8
_waterEntity$ = -12
_fogColor$ = -16
_fogDensity$ = -20
_i$72504 = -24
_surf$72508 = -28
?R_CheckFog@@YAXXZ PROC NEAR				; R_CheckFog, COMDAT

; 1072 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	ebx
	push	esi
	push	edi

; 1073 : 	cl_entity_t	*ent = NULL;

	mov	DWORD PTR _ent$[ebp], 0

; 1074 : 	int		texture = -1;

	mov	DWORD PTR _texture$[ebp], -1

; 1075 : 	int		waterEntity;
; 1076 : 	color24		fogColor;
; 1077 : 	byte		fogDensity;
; 1078 : 
; 1079 : 	tr.fogEnabled = false;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1411956, 0

; 1080 : 
; 1081 : 	// eyes above water
; 1082 : 	if( tr.viewparams.waterlevel < 3 )

	cmp	DWORD PTR ?tr@@3Uref_globals_t@@A+1411804, 3
	jge	$L72498

; 1084 : 		if( tr.movevars->fog_settings != 0 )

	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	cmp	DWORD PTR [eax+136], 0
	je	$L72499

; 1086 : 			// enable global exponential color
; 1087 : 			tr.fogColor[0] = ((tr.movevars->fog_settings & 0xFF000000) >> 24) / 255.0f;

	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	edx, DWORD PTR [ecx+136]
	and	edx, -16777216				; ff000000H
	shr	edx, 24					; 00000018H
	mov	DWORD PTR -36+[ebp], edx
	mov	DWORD PTR -36+[ebp+4], 0
	fild	QWORD PTR -36+[ebp]
	fdiv	DWORD PTR __real@4@4006ff00000000000000
	fstp	DWORD PTR -40+[ebp]
	mov	ecx, OFFSET FLAT:?tr@@3Uref_globals_t@@A+1411960
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -40+[ebp]
	mov	DWORD PTR [eax], ecx

; 1088 : 			tr.fogColor[1] = ((tr.movevars->fog_settings & 0xFF0000) >> 16) / 255.0f;

	mov	edx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	eax, DWORD PTR [edx+136]
	and	eax, 16711680				; 00ff0000H
	sar	eax, 16					; 00000010H
	mov	DWORD PTR -44+[ebp], eax
	fild	DWORD PTR -44+[ebp]
	fdiv	DWORD PTR __real@4@4006ff00000000000000
	fstp	DWORD PTR -48+[ebp]
	mov	ecx, OFFSET FLAT:?tr@@3Uref_globals_t@@A+1411960
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -48+[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1089 : 			tr.fogColor[2] = ((tr.movevars->fog_settings & 0xFF00) >> 8) / 255.0f;

	mov	edx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	eax, DWORD PTR [edx+136]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	DWORD PTR -52+[ebp], eax
	fild	DWORD PTR -52+[ebp]
	fdiv	DWORD PTR __real@4@4006ff00000000000000
	fstp	DWORD PTR -56+[ebp]
	mov	ecx, OFFSET FLAT:?tr@@3Uref_globals_t@@A+1411960
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -56+[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1090 : 			if( FBitSet( RI->params, RP_SKYPORTALVIEW ))

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $L72500

; 1091 : 				tr.fogDensity = (tr.movevars->fog_settings & 0xFF) * 0.00005f;

	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	edx, DWORD PTR [ecx+136]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR -60+[ebp], edx
	fild	DWORD PTR -60+[ebp]
	fmul	DWORD PTR __real@4@3ff0d1b7170000000000
	fstp	DWORD PTR ?tr@@3Uref_globals_t@@A+1411972

; 1092 : 			else tr.fogDensity = (tr.movevars->fog_settings & 0xFF) * 0.000005f;

	jmp	SHORT $L72501
$L72500:
	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	ecx, DWORD PTR [eax+136]
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR -64+[ebp], ecx
	fild	DWORD PTR -64+[ebp]
	fmul	DWORD PTR __real@4@3feda7c5ac0000000000
	fstp	DWORD PTR ?tr@@3Uref_globals_t@@A+1411972
$L72501:

; 1093 : 			tr.fogEnabled = true;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1411956, 1
$L72499:

; 1095 : 		return;

	jmp	$L72492
$L72498:

; 1097 : 
; 1098 : 	waterEntity = WATER_ENTITY( RI->vieworg );

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 204				; 000000ccH
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+232
	add	esp, 4
	mov	DWORD PTR _waterEntity$[ebp], eax

; 1099 : 	if( waterEntity >= 0 && waterEntity < tr.viewparams.max_entities )

	cmp	DWORD PTR _waterEntity$[ebp], 0
	jl	SHORT $L72502
	mov	edx, DWORD PTR _waterEntity$[ebp]
	cmp	edx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411904
	jge	SHORT $L72502

; 1100 : 		ent = GET_ENTITY( waterEntity );

	mov	eax, DWORD PTR _waterEntity$[ebp]
	push	eax
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+212
	add	esp, 4
	mov	DWORD PTR _ent$[ebp], eax
$L72502:

; 1101 : 
; 1102 : 	// check for water texture
; 1103 : 	if( ent && ent->model && ent->model->type == mod_brush )

	cmp	DWORD PTR _ent$[ebp], 0
	je	$L72503
	mov	ecx, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [ecx+2964], 0
	je	SHORT $L72503
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+2964]
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $L72503

; 1105 : 		for( int i = 0; i < ent->model->nummodelsurfaces; i++ )

	mov	DWORD PTR _i$72504[ebp], 0
	jmp	SHORT $L72505
$L72506:
	mov	ecx, DWORD PTR _i$72504[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$72504[ebp], ecx
$L72505:
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+2964]
	mov	ecx, DWORD PTR _i$72504[ebp]
	cmp	ecx, DWORD PTR [eax+116]
	jge	SHORT $L72507

; 1107 : 			msurface_t *surf = &ent->model->surfaces[ent->model->firstmodelsurface+i];

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+2964]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+2964]
	mov	ecx, DWORD PTR [edx+112]
	add	ecx, DWORD PTR _i$72504[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR [eax+180]
	add	edx, ecx
	mov	DWORD PTR _surf$72508[ebp], edx

; 1108 : 			if( FBitSet( surf->flags, SURF_DRAWTURB ))

	mov	eax, DWORD PTR _surf$72508[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 16					; 00000010H
	test	ecx, ecx
	je	SHORT $L72509

; 1110 : 				texture = surf->texinfo->texture->gl_texturenum;

	mov	edx, DWORD PTR _surf$72508[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _texture$[ebp], edx

; 1111 : 				break;

	jmp	SHORT $L72507
$L72509:

; 1113 : 		}

	jmp	SHORT $L72506
$L72507:

; 1115 : 	else if( RI->viewleaf )

	jmp	SHORT $L72511
$L72503:
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $L72511

; 1117 : 		texture = R_RecursiveFindWaterTexture( RI->viewleaf->parent, NULL, false );

	push	0
	push	0
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	?R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z ; R_RecursiveFindWaterTexture
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _texture$[ebp], eax
$L72511:

; 1119 : 	if( texture == -1 ) return; // no valid fogs

	cmp	DWORD PTR _texture$[ebp], -1
	jne	SHORT $L72512
	jmp	$L72492
$L72512:

; 1120 : 
; 1121 : 	// extract fog settings from texture palette
; 1122 : 	GET_EXTRA_PARAMS( texture, &fogColor.r, &fogColor.g, &fogColor.b, &fogDensity );

	lea	ecx, DWORD PTR _fogDensity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fogColor$[ebp+2]
	push	edx
	lea	eax, DWORD PTR _fogColor$[ebp+1]
	push	eax
	lea	ecx, DWORD PTR _fogColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _texture$[ebp]
	push	edx
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A+8
	add	esp, 20					; 00000014H

; 1123 : 
; 1124 : 	// copy fog params
; 1125 : 	tr.fogColor[0] = fogColor.r / 255.0f;

	mov	eax, DWORD PTR _fogColor$[ebp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR -68+[ebp], eax
	fild	DWORD PTR -68+[ebp]
	fdiv	DWORD PTR __real@4@4006ff00000000000000
	fstp	DWORD PTR -72+[ebp]
	mov	ecx, OFFSET FLAT:?tr@@3Uref_globals_t@@A+1411960
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -72+[ebp]
	mov	DWORD PTR [eax], ecx

; 1126 : 	tr.fogColor[1] = fogColor.g / 255.0f;

	mov	edx, DWORD PTR _fogColor$[ebp+1]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR -76+[ebp], edx
	fild	DWORD PTR -76+[ebp]
	fdiv	DWORD PTR __real@4@4006ff00000000000000
	fstp	DWORD PTR -80+[ebp]
	mov	ecx, OFFSET FLAT:?tr@@3Uref_globals_t@@A+1411960
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -80+[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1127 : 	tr.fogColor[2] = fogColor.b / 255.0f;

	mov	edx, DWORD PTR _fogColor$[ebp+2]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR -84+[ebp], edx
	fild	DWORD PTR -84+[ebp]
	fdiv	DWORD PTR __real@4@4006ff00000000000000
	fstp	DWORD PTR -88+[ebp]
	mov	ecx, OFFSET FLAT:?tr@@3Uref_globals_t@@A+1411960
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -88+[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1128 : 	tr.fogDensity = fogDensity * 0.000005f;

	mov	edx, DWORD PTR _fogDensity$[ebp]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR -92+[ebp], edx
	fild	DWORD PTR -92+[ebp]
	fmul	DWORD PTR __real@4@3feda7c5ac0000000000
	fstp	DWORD PTR ?tr@@3Uref_globals_t@@A+1411972

; 1129 : 	tr.fogEnabled = true;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1411956, 1
$L72492:

; 1130 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_CheckFog@@YAXXZ ENDP					; R_CheckFog
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z@4FA@748b0b15 ; `R_RecursiveFindWaterTexture'::`2'::__LINE__Var
PUBLIC	??_C@_0N@KMMA@node?5?$CB?$DN?5NULL?$AA@		; `string'
EXTRN	__assert:NEAR
;	COMDAT ?__LINE__Var@?1??R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z@4FA@748b0b15
; File z:\xashxtsrc\client\render\r_main.cpp
_DATA	SEGMENT
?__LINE__Var@?1??R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z@4FA@748b0b15 DW 03e8H ; `R_RecursiveFindWaterTexture'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@KMMA@node?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0N@KMMA@node?5?$CB?$DN?5NULL?$AA@ DB 'node != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ?R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z
_TEXT	SEGMENT
_node$ = 8
_ignore$ = 12
_down$ = 16
_tex$ = -4
_pleaf$72474 = -8
_mark$72475 = -12
_i$72476 = -16
_c$72477 = -20
?R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z PROC NEAR ; R_RecursiveFindWaterTexture, COMDAT

; 1000 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1001 : 	int tex = -1;

	mov	DWORD PTR _tex$[ebp], -1

; 1002 : 
; 1003 : 	// assure the initial node is not null
; 1004 : 	// we could check it here, but we would rather check it 
; 1005 : 	// outside the call to get rid of one additional recursion level
; 1006 : 	assert( node != NULL );

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $L73389
	movsx	eax, WORD PTR ?__LINE__Var@?1??R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z@4FA@748b0b15 ; `R_RecursiveFindWaterTexture'::`2'::__LINE__Var
	add	eax, 6
	push	eax
	push	OFFSET FLAT:??_C@_0CG@JBME@z?3?2xashxtsrc?2client?2render?2r_mai@ ; `string'
	push	OFFSET FLAT:??_C@_0N@KMMA@node?5?$CB?$DN?5NULL?$AA@ ; `string'
	call	__assert
	add	esp, 12					; 0000000cH
$L73389:

; 1007 : 
; 1008 : 	// ignore solid nodes
; 1009 : 	if( node->contents == CONTENTS_SOLID )

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx], -2			; fffffffeH
	jne	SHORT $L72472

; 1010 : 		return -1;

	or	eax, -1
	jmp	$L72467
$L72472:

; 1011 : 
; 1012 : 	if( node->contents < 0 )

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	$L72473

; 1014 : 		mleaf_t		*pleaf;
; 1015 : 		msurface_t	**mark;
; 1016 : 		int		i, c;
; 1017 : 
; 1018 : 		// ignore non-liquid leaves
; 1019 : 		if( !IsLiquidContents( node->contents ))

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx], -3			; fffffffdH
	je	SHORT $L72478
	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx], -4			; fffffffcH
	je	SHORT $L72478
	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax], -5			; fffffffbH
	je	SHORT $L72478

; 1020 : 			 return -1;

	or	eax, -1
	jmp	$L72467
$L72478:

; 1021 : 
; 1022 : 		// find texture
; 1023 : 		pleaf = (mleaf_t *)node;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _pleaf$72474[ebp], ecx

; 1024 : 		mark = pleaf->firstmarksurface;

	mov	edx, DWORD PTR _pleaf$72474[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _mark$72475[ebp], eax

; 1025 : 		c = pleaf->nummarksurfaces;	

	mov	ecx, DWORD PTR _pleaf$72474[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _c$72477[ebp], edx

; 1026 : 
; 1027 : 		for( i = 0; i < c; i++, mark++ )

	mov	DWORD PTR _i$72476[ebp], 0
	jmp	SHORT $L72480
$L72481:
	mov	eax, DWORD PTR _i$72476[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72476[ebp], eax
	mov	ecx, DWORD PTR _mark$72475[ebp]
	add	ecx, 4
	mov	DWORD PTR _mark$72475[ebp], ecx
$L72480:
	mov	edx, DWORD PTR _i$72476[ebp]
	cmp	edx, DWORD PTR _c$72477[ebp]
	jge	SHORT $L72482

; 1029 : 			if( (*mark)->flags & SURF_DRAWTURB && (*mark)->texinfo && (*mark)->texinfo->texture )

	mov	eax, DWORD PTR _mark$72475[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 16					; 00000010H
	test	edx, edx
	je	SHORT $L72483
	mov	eax, DWORD PTR _mark$72475[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $L72483
	mov	edx, DWORD PTR _mark$72475[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+44]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $L72483

; 1030 : 				return (*mark)->texinfo->texture->gl_texturenum;

	mov	edx, DWORD PTR _mark$72475[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+24]
	jmp	$L72467
$L72483:

; 1031 : 		}

	jmp	SHORT $L72481
$L72482:

; 1032 : 
; 1033 : 		// texture not found
; 1034 : 		return -1;

	or	eax, -1
	jmp	$L72467
$L72473:

; 1036 : 
; 1037 : 	// this is a regular node
; 1038 : 	// traverse children
; 1039 : 	if( node->children[0] && ( node->children[0] != ignore ))

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $L72485
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	cmp	edx, DWORD PTR _ignore$[ebp]
	je	SHORT $L72485

; 1041 : 		tex = R_RecursiveFindWaterTexture( node->children[0], node, true );

	push	1
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	?R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z ; R_RecursiveFindWaterTexture
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tex$[ebp], eax

; 1042 : 		if( tex != -1 ) return tex;

	cmp	DWORD PTR _tex$[ebp], -1
	je	SHORT $L72485
	mov	eax, DWORD PTR _tex$[ebp]
	jmp	SHORT $L72467
$L72485:

; 1044 : 
; 1045 : 	if( node->children[1] && ( node->children[1] != ignore ))

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $L72487
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	cmp	edx, DWORD PTR _ignore$[ebp]
	je	SHORT $L72487

; 1047 : 		tex = R_RecursiveFindWaterTexture( node->children[1], node, true );

	push	1
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z ; R_RecursiveFindWaterTexture
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tex$[ebp], eax

; 1048 : 		if( tex != -1 ) return tex;

	cmp	DWORD PTR _tex$[ebp], -1
	je	SHORT $L72487
	mov	eax, DWORD PTR _tex$[ebp]
	jmp	SHORT $L72467
$L72487:

; 1050 : 
; 1051 : 	// for down recursion, return immediately
; 1052 : 	if( down ) return -1;

	cmp	DWORD PTR _down$[ebp], 0
	je	SHORT $L72488
	or	eax, -1
	jmp	SHORT $L72467
$L72488:

; 1053 : 
; 1054 : 	// texture not found, step up if any
; 1055 : 	if( node->parent )

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $L72489

; 1056 : 		return R_RecursiveFindWaterTexture( node->parent, node, false );

	push	0
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	?R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z ; R_RecursiveFindWaterTexture
	add	esp, 12					; 0000000cH
	jmp	SHORT $L72467
$L72489:

; 1057 : 
; 1058 : 	// top-level node, bail out
; 1059 : 	return -1;

	or	eax, -1
$L72467:

; 1060 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_RecursiveFindWaterTexture@@YAHPBUmnode_s@@0H@Z ENDP	; R_RecursiveFindWaterTexture
_TEXT	ENDS
PUBLIC	?R_Speeds_Printf@@YAXPBDZZ			; R_Speeds_Printf
EXTRN	?Q_vsnprintf@@YAHPADIPBD0@Z:NEAR		; Q_vsnprintf
;	COMDAT ?R_Speeds_Printf@@YAXPBDZZ
_TEXT	SEGMENT
_msg$ = 8
_argptr$ = -4
_text$ = -2052
?R_Speeds_Printf@@YAXPBDZZ PROC NEAR			; R_Speeds_Printf, COMDAT

; 1380 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2116				; 00000844H
	push	ebx
	push	esi
	push	edi

; 1381 : 	va_list	argptr;
; 1382 : 	char	text[2048];
; 1383 : 
; 1384 : 	va_start( argptr, msg );

	lea	eax, DWORD PTR _msg$[ebp+4]
	mov	DWORD PTR _argptr$[ebp], eax

; 1385 : 	Q_vsprintf( text, msg, argptr );

	mov	ecx, DWORD PTR _argptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	push	99999					; 0001869fH
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	?Q_vsnprintf@@YAHPADIPBD0@Z		; Q_vsnprintf
	add	esp, 16					; 00000010H

; 1386 : 	va_end( argptr );

	mov	DWORD PTR _argptr$[ebp], 0

; 1387 : 
; 1388 : 	Q_strncat( r_speeds_msg, text, sizeof( r_speeds_msg ));

	push	2048					; 00000800H
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	push	OFFSET FLAT:?r_speeds_msg@@3PADA	; r_speeds_msg
	call	?Q_strncat@@YAIPADPBDI@Z		; Q_strncat
	add	esp, 12					; 0000000cH

; 1389 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_Speeds_Printf@@YAXPBDZZ ENDP				; R_Speeds_Printf
_TEXT	ENDS
PUBLIC	?HUD_PrintStats@@YAXXZ				; HUD_PrintStats
PUBLIC	??_C@_0BH@LAOK@Renderer?3?5?$FO2XashXT?$FO7?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@CHLP@?$CF3i?5wpoly?5?$CF3i?5epoly?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@KJHM@?$CF3i?5spoly?5?$CF3i?5grass?6?$AA@ ; `string'
PUBLIC	??_C@_0CL@NEFL@visible?5leafs?3?6?$CF3i?5leafs?6current@ ; `string'
PUBLIC	??_C@_0DF@EBAK@RecursiveWorldNode?3?5?$CF3lf?5secs?6Dr@ ; `string'
PUBLIC	??_C@_0CJ@MNGL@?$CF3i?5static?5entities?6?$CF3i?5normal?5e@ ; `string'
PUBLIC	??_C@_0BJ@GFNA@?$CF3i?5studio?5models?5drawn?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@FFFG@?$CF3i?5sprite?5models?5drawn?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@MDE@?$CF3i?5temp?5entities?5active?6?$AA@ ; `string'
PUBLIC	??_C@_0N@LKLA@?$CF3i?5mirrors?6?$AA@		; `string'
PUBLIC	??_C@_0N@JOMP@?$CF3i?5portals?6?$AA@		; `string'
PUBLIC	??_C@_0N@BLFC@?$CF3i?5screens?6?$AA@		; `string'
PUBLIC	??_C@_0N@NLHL@?$CF3i?5shadows?6?$AA@		; `string'
PUBLIC	??_C@_0M@JPBG@?$CF3i?53d?5sky?6?$AA@		; `string'
PUBLIC	??_C@_0L@DALN@?$CF3i?5total?6?$AA@		; `string'
PUBLIC	??_C@_0BP@GDIK@DIP?5count?5?$CF3i?6Shader?5bind?5?$CF3i?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@NJCN@Total?5GLSL?5shaders?5?$CF3i?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@DFNN@frame?5total?5tris?5?$CF3i?6?$AA@ ; `string'
PUBLIC	??_C@_0O@GHEF@Surf?3?5?$FO1?$CFs?$FO7?6?$AA@	; `string'
PUBLIC	??_C@_0BE@NFOH@Shader?3?5?$FO3?$CD?$CFi?5?$CFs?$FO7?6?$AA@ ; `string'
PUBLIC	??_C@_0P@EODA@List?5Options?3?6?$AA@		; `string'
PUBLIC	??_C@_03HHKO@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_0BF@PPHJ@?$CFs?5grass?5total?5size?6?$AA@	; `string'
EXTRN	?glsl_programs@@3PAUglsl_prog_s@@A:BYTE		; glsl_programs
EXTRN	?num_glsl_programs@@3IA:DWORD			; num_glsl_programs
EXTRN	?GL_PretifyListOptions@@YAPBDPBD_N@Z:NEAR	; GL_PretifyListOptions
EXTRN	?Q_strncpy@@YAIPADPBDI@Z:NEAR			; Q_strncpy
EXTRN	?Q_pretifymem@@YAPADMH@Z:NEAR			; Q_pretifymem
;	COMDAT ??_C@_0BH@LAOK@Renderer?3?5?$FO2XashXT?$FO7?6?6?$AA@
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
??_C@_0BH@LAOK@Renderer?3?5?$FO2XashXT?$FO7?6?6?$AA@ DB 'Renderer: ^2Xash'
	DB	'XT^7', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CHLP@?$CF3i?5wpoly?5?$CF3i?5epoly?6?$AA@
CONST	SEGMENT
??_C@_0BF@CHLP@?$CF3i?5wpoly?5?$CF3i?5epoly?6?$AA@ DB '%3i wpoly %3i epol'
	DB	'y', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KJHM@?$CF3i?5spoly?5?$CF3i?5grass?6?$AA@
CONST	SEGMENT
??_C@_0BF@KJHM@?$CF3i?5spoly?5?$CF3i?5grass?6?$AA@ DB '%3i spoly %3i gras'
	DB	's', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NEFL@visible?5leafs?3?6?$CF3i?5leafs?6current@
CONST	SEGMENT
??_C@_0CL@NEFL@visible?5leafs?3?6?$CF3i?5leafs?6current@ DB 'visible leaf'
	DB	's:', 0aH, '%3i leafs', 0aH, 'current leaf %3i', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@EBAK@RecursiveWorldNode?3?5?$CF3lf?5secs?6Dr@
CONST	SEGMENT
??_C@_0DF@EBAK@RecursiveWorldNode?3?5?$CF3lf?5secs?6Dr@ DB 'RecursiveWorl'
	DB	'dNode: %3lf secs', 0aH, 'DrawTextureChains %lf', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MNGL@?$CF3i?5static?5entities?6?$CF3i?5normal?5e@
CONST	SEGMENT
??_C@_0CJ@MNGL@?$CF3i?5static?5entities?6?$CF3i?5normal?5e@ DB '%3i stati'
	DB	'c entities', 0aH, '%3i normal entities', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GFNA@?$CF3i?5studio?5models?5drawn?6?$AA@
CONST	SEGMENT
??_C@_0BJ@GFNA@?$CF3i?5studio?5models?5drawn?6?$AA@ DB '%3i studio models'
	DB	' drawn', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FFFG@?$CF3i?5sprite?5models?5drawn?6?$AA@
CONST	SEGMENT
??_C@_0BJ@FFFG@?$CF3i?5sprite?5models?5drawn?6?$AA@ DB '%3i sprite models'
	DB	' drawn', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MDE@?$CF3i?5temp?5entities?5active?6?$AA@
CONST	SEGMENT
??_C@_0BK@MDE@?$CF3i?5temp?5entities?5active?6?$AA@ DB '%3i temp entities'
	DB	' active', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LKLA@?$CF3i?5mirrors?6?$AA@
CONST	SEGMENT
??_C@_0N@LKLA@?$CF3i?5mirrors?6?$AA@ DB '%3i mirrors', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JOMP@?$CF3i?5portals?6?$AA@
CONST	SEGMENT
??_C@_0N@JOMP@?$CF3i?5portals?6?$AA@ DB '%3i portals', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BLFC@?$CF3i?5screens?6?$AA@
CONST	SEGMENT
??_C@_0N@BLFC@?$CF3i?5screens?6?$AA@ DB '%3i screens', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NLHL@?$CF3i?5shadows?6?$AA@
CONST	SEGMENT
??_C@_0N@NLHL@?$CF3i?5shadows?6?$AA@ DB '%3i shadows', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JPBG@?$CF3i?53d?5sky?6?$AA@
CONST	SEGMENT
??_C@_0M@JPBG@?$CF3i?53d?5sky?6?$AA@ DB '%3i 3d sky', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DALN@?$CF3i?5total?6?$AA@
CONST	SEGMENT
??_C@_0L@DALN@?$CF3i?5total?6?$AA@ DB '%3i total', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GDIK@DIP?5count?5?$CF3i?6Shader?5bind?5?$CF3i?6?$AA@
CONST	SEGMENT
??_C@_0BP@GDIK@DIP?5count?5?$CF3i?6Shader?5bind?5?$CF3i?6?$AA@ DB 'DIP co'
	DB	'unt %3i', 0aH, 'Shader bind %3i', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NJCN@Total?5GLSL?5shaders?5?$CF3i?6?$AA@
CONST	SEGMENT
??_C@_0BI@NJCN@Total?5GLSL?5shaders?5?$CF3i?6?$AA@ DB 'Total GLSL shaders'
	DB	' %3i', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DFNN@frame?5total?5tris?5?$CF3i?6?$AA@
CONST	SEGMENT
??_C@_0BG@DFNN@frame?5total?5tris?5?$CF3i?6?$AA@ DB 'frame total tris %3i'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GHEF@Surf?3?5?$FO1?$CFs?$FO7?6?$AA@
CONST	SEGMENT
??_C@_0O@GHEF@Surf?3?5?$FO1?$CFs?$FO7?6?$AA@ DB 'Surf: ^1%s^7', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NFOH@Shader?3?5?$FO3?$CD?$CFi?5?$CFs?$FO7?6?$AA@
CONST	SEGMENT
??_C@_0BE@NFOH@Shader?3?5?$FO3?$CD?$CFi?5?$CFs?$FO7?6?$AA@ DB 'Shader: ^3'
	DB	'#%i %s^7', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EODA@List?5Options?3?6?$AA@
CONST	SEGMENT
??_C@_0P@EODA@List?5Options?3?6?$AA@ DB 'List Options:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HHKO@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03HHKO@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PPHJ@?$CFs?5grass?5total?5size?6?$AA@
CONST	SEGMENT
??_C@_0BF@PPHJ@?$CFs?5grass?5total?5size?6?$AA@ DB '%s grass total size', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?HUD_PrintStats@@YAXXZ
_TEXT	SEGMENT
_surf$ = -4
_curleaf$ = -8
_cur$72632 = -12
?HUD_PrintStats@@YAXXZ PROC NEAR			; HUD_PrintStats, COMDAT

; 1392 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 1393 : 	if( !CVAR_TO_BOOL( r_speeds ))

	cmp	DWORD PTR ?r_speeds@@3PAUcvar_s@@A, 0	; r_speeds
	je	SHORT $L73394
	mov	eax, DWORD PTR ?r_speeds@@3PAUcvar_s@@A	; r_speeds
	fld	DWORD PTR [eax+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L73394
	mov	BYTE PTR -16+[ebp], 1
	jmp	SHORT $L73395
$L73394:
	mov	BYTE PTR -16+[ebp], 0
$L73395:
	mov	ecx, DWORD PTR -16+[ebp]
	and	ecx, 255				; 000000ffH
	test	ecx, ecx
	jne	SHORT $L72596

; 1394 : 		return;

	jmp	$L72595
$L72596:

; 1395 : 
; 1396 : 	msurface_t *surf = r_stats.debug_surface;

	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+80
	mov	DWORD PTR _surf$[ebp], edx

; 1397 : 	mleaf_t *curleaf = RI->viewleaf;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax+172]
	mov	DWORD PTR _curleaf$[ebp], ecx

; 1398 : 
; 1399 : 	R_Speeds_Printf( "Renderer: ^2XashXT^7\n\n" );

	push	OFFSET FLAT:??_C@_0BH@LAOK@Renderer?3?5?$FO2XashXT?$FO7?6?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 4

; 1402 : 	{

	mov	edx, DWORD PTR ?r_speeds@@3PAUcvar_s@@A	; r_speeds
	fld	DWORD PTR [edx+12]
	call	__ftol
	mov	DWORD PTR -20+[ebp], eax
	mov	eax, DWORD PTR -20+[ebp]
	sub	eax, 1
	mov	DWORD PTR -20+[ebp], eax
	cmp	DWORD PTR -20+[ebp], 8
	ja	$L72602
	mov	ecx, DWORD PTR -20+[ebp]
	jmp	DWORD PTR $L73398[ecx*4]
$L72605:

; 1403 : 	case 1:
; 1404 : 		R_Speeds_Printf( "%3i wpoly %3i epoly\n", r_stats.c_world_polys, r_stats.c_studio_polys );

	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+4
	push	edx
	mov	eax, DWORD PTR ?r_stats@@3Uref_stats_t@@A
	push	eax
	push	OFFSET FLAT:??_C@_0BF@CHLP@?$CF3i?5wpoly?5?$CF3i?5epoly?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 12					; 0000000cH

; 1405 : 		R_Speeds_Printf( "%3i spoly %3i grass\n", r_stats.c_sprite_polys, r_stats.c_grass_polys );

	mov	ecx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+16
	push	ecx
	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+8
	push	edx
	push	OFFSET FLAT:??_C@_0BF@KJHM@?$CF3i?5spoly?5?$CF3i?5grass?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 12					; 0000000cH

; 1406 : 		break;		

	jmp	$L72602
$L72608:

; 1407 : 	case 2:
; 1408 : 		if( !curleaf ) curleaf = worldmodel->leafs;

	cmp	DWORD PTR _curleaf$[ebp], 0
	jne	SHORT $L72609
	mov	eax, DWORD PTR ?worldmodel@@3PAUmodel_s@@A ; worldmodel
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _curleaf$[ebp], ecx
$L72609:

; 1409 : 		R_Speeds_Printf( "visible leafs:\n%3i leafs\ncurrent leaf %3i\n", r_stats.c_world_leafs, curleaf - worldmodel->leafs );

	mov	edx, DWORD PTR ?worldmodel@@3PAUmodel_s@@A ; worldmodel
	mov	eax, DWORD PTR _curleaf$[ebp]
	sub	eax, DWORD PTR [edx+140]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+12
	push	edx
	push	OFFSET FLAT:??_C@_0CL@NEFL@visible?5leafs?3?6?$CF3i?5leafs?6current@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 12					; 0000000cH

; 1410 : 		R_Speeds_Printf( "RecursiveWorldNode: %3lf secs\nDrawTextureChains %lf\n", r_stats.t_world_node, r_stats.t_world_draw );

	mov	eax, DWORD PTR ?r_stats@@3Uref_stats_t@@A+100
	push	eax
	mov	ecx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+96
	push	ecx
	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+92
	push	edx
	mov	eax, DWORD PTR ?r_stats@@3Uref_stats_t@@A+88
	push	eax
	push	OFFSET FLAT:??_C@_0DF@EBAK@RecursiveWorldNode?3?5?$CF3lf?5secs?6Dr@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 20					; 00000014H

; 1411 : 		break;

	jmp	$L72602
$L72612:

; 1412 : 	case 3:
; 1413 : 		R_Speeds_Printf( "%3i static entities\n%3i normal entities\n", r_numStatics, r_numEntities - r_numStatics );

	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+346748
	add	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+346752
	sub	ecx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+60
	sub	ecx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+60
	push	ecx
	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+60
	push	edx
	push	OFFSET FLAT:??_C@_0CJ@MNGL@?$CF3i?5static?5entities?6?$CF3i?5normal?5e@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 12					; 0000000cH

; 1414 : 		break;

	jmp	$L72602
$L72614:

; 1415 : 	case 4:
; 1416 : 		R_Speeds_Printf( "%3i studio models drawn\n", r_stats.c_studio_models_drawn );

	mov	eax, DWORD PTR ?r_stats@@3Uref_stats_t@@A+24
	push	eax
	push	OFFSET FLAT:??_C@_0BJ@GFNA@?$CF3i?5studio?5models?5drawn?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1417 : 		R_Speeds_Printf( "%3i sprite models drawn\n", r_stats.c_sprite_models_drawn );

	mov	ecx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+28
	push	ecx
	push	OFFSET FLAT:??_C@_0BJ@FFFG@?$CF3i?5sprite?5models?5drawn?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1418 : 		R_Speeds_Printf( "%3i temp entities active\n", r_stats.c_active_tents_count );

	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+20
	push	edx
	push	OFFSET FLAT:??_C@_0BK@MDE@?$CF3i?5temp?5entities?5active?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1419 : 		break;

	jmp	$L72602
$L72618:

; 1420 : 	case 5:
; 1421 : 		R_Speeds_Printf( "%3i mirrors\n", r_stats.c_mirror_passes );

	mov	eax, DWORD PTR ?r_stats@@3Uref_stats_t@@A+36
	push	eax
	push	OFFSET FLAT:??_C@_0N@LKLA@?$CF3i?5mirrors?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1422 : 		R_Speeds_Printf( "%3i portals\n", r_stats.c_portal_passes );

	mov	ecx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+32
	push	ecx
	push	OFFSET FLAT:??_C@_0N@JOMP@?$CF3i?5portals?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1423 : 		R_Speeds_Printf( "%3i screens\n", r_stats.c_screen_passes );

	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+40
	push	edx
	push	OFFSET FLAT:??_C@_0N@BLFC@?$CF3i?5screens?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1424 : 		R_Speeds_Printf( "%3i shadows\n", r_stats.c_shadow_passes );

	mov	eax, DWORD PTR ?r_stats@@3Uref_stats_t@@A+44
	push	eax
	push	OFFSET FLAT:??_C@_0N@NLHL@?$CF3i?5shadows?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1425 : 		R_Speeds_Printf( "%3i 3d sky\n", r_stats.c_sky_passes );

	mov	ecx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+48
	push	ecx
	push	OFFSET FLAT:??_C@_0M@JPBG@?$CF3i?53d?5sky?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1426 : 		R_Speeds_Printf( "%3i total\n", r_stats.num_passes );

	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+68
	push	edx
	push	OFFSET FLAT:??_C@_0L@DALN@?$CF3i?5total?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1427 : 		break;

	jmp	$L72602
$L72625:

; 1428 : 	case 6:
; 1429 : 		R_Speeds_Printf( "DIP count %3i\nShader bind %3i\n", r_stats.num_flushes, r_stats.num_shader_binds );

	mov	eax, DWORD PTR ?r_stats@@3Uref_stats_t@@A+72
	push	eax
	mov	ecx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+76
	push	ecx
	push	OFFSET FLAT:??_C@_0BP@GDIK@DIP?5count?5?$CF3i?6Shader?5bind?5?$CF3i?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 12					; 0000000cH

; 1430 : 		R_Speeds_Printf( "Total GLSL shaders %3i\n", Q_max( num_glsl_programs - 1, 0 ));

	mov	edx, DWORD PTR ?num_glsl_programs@@3IA	; num_glsl_programs
	sub	edx, 1
	test	edx, edx
	jbe	SHORT $L73396
	mov	eax, DWORD PTR ?num_glsl_programs@@3IA	; num_glsl_programs
	sub	eax, 1
	mov	DWORD PTR -24+[ebp], eax
	jmp	SHORT $L73397
$L73396:
	mov	DWORD PTR -24+[ebp], 0
$L73397:
	mov	ecx, DWORD PTR -24+[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_0BI@NJCN@Total?5GLSL?5shaders?5?$CF3i?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1431 : 		R_Speeds_Printf( "frame total tris %3i\n", r_stats.c_total_tris );

	mov	edx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+52
	push	edx
	push	OFFSET FLAT:??_C@_0BG@DFNN@frame?5total?5tris?5?$CF3i?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1432 : 		break;

	jmp	$L72602
$L72629:

; 1433 : 	case 7:
; 1434 : 		// draw hierarchy map of recursion calls
; 1435 : 		Q_strncpy( r_speeds_msg, r_depth_msg, sizeof( r_speeds_msg ));

	push	2048					; 00000800H
	push	OFFSET FLAT:?r_depth_msg@@3PADA		; r_depth_msg
	push	OFFSET FLAT:?r_speeds_msg@@3PADA	; r_speeds_msg
	call	?Q_strncpy@@YAIPADPBDI@Z		; Q_strncpy
	add	esp, 12					; 0000000cH

; 1436 : 		break;

	jmp	$L72602
$L72630:

; 1437 : 	case 8:
; 1438 : 		if( surf && surf->texinfo && surf->texinfo->texture )

	cmp	DWORD PTR _surf$[ebp], 0
	je	$L72631
	mov	eax, DWORD PTR _surf$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$L72631
	mov	ecx, DWORD PTR _surf$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	cmp	DWORD PTR [edx+36], 0
	je	$L72631

; 1440 : 			glsl_program_t *cur = &glsl_programs[surf->info->shaderNum[0]];

	mov	eax, DWORD PTR _surf$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	xor	edx, edx
	mov	dx, WORD PTR [ecx+166]
	imul	edx, 876				; 0000036cH
	add	edx, OFFSET FLAT:?glsl_programs@@3PAUglsl_prog_s@@A ; glsl_programs
	mov	DWORD PTR _cur$72632[ebp], edx

; 1441 : 			R_Speeds_Printf( "Surf: ^1%s^7\n", surf->texinfo->texture->name );

	mov	eax, DWORD PTR _surf$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	push	OFFSET FLAT:??_C@_0O@GHEF@Surf?3?5?$FO1?$CFs?$FO7?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8

; 1442 : 			R_Speeds_Printf( "Shader: ^3#%i %s^7\n", surf->info->shaderNum[0], cur->name );

	mov	eax, DWORD PTR _cur$72632[ebp]
	push	eax
	mov	ecx, DWORD PTR _surf$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	xor	eax, eax
	mov	ax, WORD PTR [edx+166]
	push	eax
	push	OFFSET FLAT:??_C@_0BE@NFOH@Shader?3?5?$FO3?$CD?$CFi?5?$CFs?$FO7?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 12					; 0000000cH

; 1443 : 			R_Speeds_Printf( "List Options:\n" ); 

	push	OFFSET FLAT:??_C@_0P@EODA@List?5Options?3?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 4

; 1444 : 			R_Speeds_Printf( "%s\n", GL_PretifyListOptions( cur->options, true ));

	push	1
	mov	ecx, DWORD PTR _cur$72632[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	call	?GL_PretifyListOptions@@YAPBDPBD_N@Z	; GL_PretifyListOptions
	add	esp, 8
	push	eax
	push	OFFSET FLAT:??_C@_03HHKO@?$CFs?6?$AA@	; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8
$L72631:

; 1446 : 		break;

	jmp	SHORT $L72602
$L72637:

; 1447 : 	case 9:
; 1448 : 		R_Speeds_Printf( "%s grass total size\n", Q_memprint( tr.grass_total_size ));

	push	2
	mov	edx, DWORD PTR ?tr@@3Uref_globals_t@@A+1425420
	mov	DWORD PTR -32+[ebp], edx
	mov	DWORD PTR -32+[ebp+4], 0
	fild	QWORD PTR -32+[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Q_pretifymem@@YAPADMH@Z		; Q_pretifymem
	add	esp, 8
	push	eax
	push	OFFSET FLAT:??_C@_0BF@PPHJ@?$CFs?5grass?5total?5size?6?$AA@ ; `string'
	call	?R_Speeds_Printf@@YAXPBDZZ		; R_Speeds_Printf
	add	esp, 8
$L72602:

; 1451 : 
; 1452 : 	memset( &r_stats, 0, sizeof( r_stats ));

	push	104					; 00000068H
	push	0
	push	OFFSET FLAT:?r_stats@@3Uref_stats_t@@A	; r_stats
	call	_memset
	add	esp, 12					; 0000000cH
$L72595:

; 1453 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L73398:
	DD	$L72605
	DD	$L72608
	DD	$L72612
	DD	$L72614
	DD	$L72618
	DD	$L72625
	DD	$L72629
	DD	$L72630
	DD	$L72637
?HUD_PrintStats@@YAXXZ ENDP				; HUD_PrintStats
_TEXT	ENDS
PUBLIC	??9Vector@@QBEHABV0@@Z				; Vector::operator!=
PUBLIC	__real@4@40028000000000000000
PUBLIC	??0pmtrace_s@@QAE@XZ				; pmtrace_s::pmtrace_s
PUBLIC	?R_RenderDebugSurface@@YAXXZ			; R_RenderDebugSurface
EXTRN	?pglBegin@@3P6GXI@ZA:DWORD			; pglBegin
EXTRN	?pglVertex3fv@@3P6GXPBM@ZA:DWORD		; pglVertex3fv
EXTRN	?pglBlendFunc@@3P6GXII@ZA:DWORD			; pglBlendFunc
EXTRN	?world@@3PAUgl_world_t@@A:DWORD			; world
EXTRN	?pglEnd@@3P6GXXZA:DWORD				; pglEnd
EXTRN	?pglLineWidth@@3P6GXM@ZA:DWORD			; pglLineWidth
EXTRN	?pglPolygonMode@@3P6GXII@ZA:DWORD		; pglPolygonMode
;	COMDAT __real@4@40028000000000000000
; File z:\xashxtsrc\client\render\r_main.cpp
CONST	SEGMENT
__real@4@40028000000000000000 DD 041000000r	; 8
CONST	ENDS
;	COMDAT ?R_RenderDebugSurface@@YAXXZ
_TEXT	SEGMENT
$T73401 = -124
$T73402 = -136
$T73405 = -148
$T73406 = -160
_vecSrc$ = -12
_vecEnd$ = -24
_trace$ = -92
_pe$ = -96
_ent$ = -100
_es$ = -104
_j$ = -108
_v$72664 = -112
?R_RenderDebugSurface@@YAXXZ PROC NEAR			; R_RenderDebugSurface, COMDAT

; 1456 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi

; 1457 : 	r_stats.debug_surface = NULL;

	mov	DWORD PTR ?r_stats@@3Uref_stats_t@@A+80, 0

; 1458 : 
; 1459 : 	if( r_speeds->value != 8 )

	mov	eax, DWORD PTR ?r_speeds@@3PAUcvar_s@@A	; r_speeds
	fld	DWORD PTR [eax+12]
	fcomp	DWORD PTR __real@4@40028000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L72642

; 1460 : 		return;

	jmp	$L72641
$L72642:

; 1461 : 
; 1462 : 	Vector vecSrc = RI->vieworg;

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 204				; 000000ccH
	push	ecx
	lea	ecx, DWORD PTR _vecSrc$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 1463 : 	Vector vecEnd = vecSrc + RI->vforward * RI->farClip;

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	eax, DWORD PTR [edx+252]
	push	eax
	lea	ecx, DWORD PTR $T73401[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 216				; 000000d8H
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	edx, DWORD PTR $T73402[ebp]
	push	edx
	lea	ecx, DWORD PTR _vecSrc$[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	push	eax
	lea	ecx, DWORD PTR _vecEnd$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 1464 : 	pmtrace_t trace;

	lea	ecx, DWORD PTR _trace$[ebp]
	call	??0pmtrace_s@@QAE@XZ			; pmtrace_s::pmtrace_s

; 1465 : 
; 1466 : 	gEngfuncs.pEventAPI->EV_SetTraceHull( 2 );

	push	2
	mov	eax, DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+336
	call	DWORD PTR [eax+56]
	add	esp, 4

; 1467 : 	gEngfuncs.pEventAPI->EV_PlayerTrace( (float *)&vecSrc, (float *)&vecEnd, 0, -1, &trace );

	lea	ecx, DWORD PTR _trace$[ebp]
	push	ecx
	push	-1
	push	0
	lea	edx, DWORD PTR _vecEnd$[ebp]
	push	edx
	lea	eax, DWORD PTR _vecSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+336
	call	DWORD PTR [ecx+60]
	add	esp, 20					; 00000014H

; 1468 : 	r_stats.debug_surface = gEngfuncs.pEventAPI->EV_TraceSurface( trace.ent, (float *)&vecSrc, (float *)&vecEnd );

	lea	edx, DWORD PTR _vecEnd$[ebp]
	push	edx
	lea	eax, DWORD PTR _vecSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trace$[ebp+48]
	push	ecx
	mov	edx, DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+336
	call	DWORD PTR [edx+96]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?r_stats@@3Uref_stats_t@@A+80, eax

; 1469 : 	if( !r_stats.debug_surface ) return;

	cmp	DWORD PTR ?r_stats@@3Uref_stats_t@@A+80, 0
	jne	SHORT $L72652
	jmp	$L72641
$L72652:

; 1470 : 
; 1471 : 	physent_t *pe = gEngfuncs.pEventAPI->EV_GetPhysent( trace.ent );

	mov	eax, DWORD PTR _trace$[ebp+48]
	push	eax
	mov	ecx, DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+336
	call	DWORD PTR [ecx+36]
	add	esp, 4
	mov	DWORD PTR _pe$[ebp], eax

; 1472 : 	cl_entity_t *ent = (pe) ? GET_ENTITY( pe->info ) : NULL;

	cmp	DWORD PTR _pe$[ebp], 0
	je	SHORT $L73403
	mov	edx, DWORD PTR _pe$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+212
	add	esp, 4
	mov	DWORD PTR -164+[ebp], eax
	jmp	SHORT $L73404
$L73403:
	mov	DWORD PTR -164+[ebp], 0
$L73404:
	mov	ecx, DWORD PTR -164+[ebp]
	mov	DWORD PTR _ent$[ebp], ecx

; 1473 : 
; 1474 : 	if( !ent || !ent->model || ent->model->type != mod_brush )

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $L72656
	mov	edx, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [edx+2964], 0
	je	SHORT $L72656
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+2964]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $L72655
$L72656:

; 1475 : 		return;

	jmp	$L72641
$L72655:

; 1476 : 
; 1477 : 	if( ent->curstate.angles != g_vecZero )

	push	OFFSET FLAT:?g_vecZero@@3VVector@@B	; g_vecZero
	mov	ecx, DWORD PTR _ent$[ebp]
	add	ecx, 716				; 000002ccH
	call	??9Vector@@QBEHABV0@@Z			; Vector::operator!=
	test	eax, eax
	je	SHORT $L72657

; 1478 : 		R_RotateForEntity( ent );

	mov	edx, DWORD PTR _ent$[ebp]
	push	edx
	call	?R_RotateForEntity@@YAXPAUcl_entity_s@@@Z ; R_RotateForEntity
	add	esp, 4

; 1479 : 	else R_TranslateForEntity( ent );

	jmp	SHORT $L72658
$L72657:
	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	call	?R_TranslateForEntity@@YAXPAUcl_entity_s@@@Z ; R_TranslateForEntity
	add	esp, 4
$L72658:

; 1480 : 
; 1481 : 	pglEnable( GL_BLEND );

	push	3042					; 00000be2H
	call	DWORD PTR ?pglEnable@@3P6GXI@ZA		; pglEnable

; 1482 : 	pglBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );

	push	771					; 00000303H
	push	770					; 00000302H
	call	DWORD PTR ?pglBlendFunc@@3P6GXII@ZA	; pglBlendFunc

; 1483 : 	pglPolygonMode( GL_FRONT_AND_BACK, GL_LINE );

	push	6913					; 00001b01H
	push	1032					; 00000408H
	call	DWORD PTR ?pglPolygonMode@@3P6GXII@ZA	; pglPolygonMode

; 1484 : 	pglColor4f( 0.5f, 1.0f, 0.36f, 0.99f ); 

	push	1065185444				; 3f7d70a4H
	push	1052266988				; 3eb851ecH
	push	1065353216				; 3f800000H
	push	1056964608				; 3f000000H
	call	DWORD PTR ?pglColor4f@@3P6GXMMMM@ZA	; pglColor4f

; 1485 : 	pglDisable( GL_TEXTURE_2D );

	push	3553					; 00000de1H
	call	DWORD PTR ?pglDisable@@3P6GXI@ZA	; pglDisable

; 1486 : 	pglLineWidth( 2.0f );

	push	1073741824				; 40000000H
	call	DWORD PTR ?pglLineWidth@@3P6GXM@ZA	; pglLineWidth

; 1487 : 
; 1488 : 	pglDisable( GL_DEPTH_TEST );

	push	2929					; 00000b71H
	call	DWORD PTR ?pglDisable@@3P6GXI@ZA	; pglDisable

; 1489 : 	pglEnable( GL_LINE_SMOOTH );

	push	2848					; 00000b20H
	call	DWORD PTR ?pglEnable@@3P6GXI@ZA		; pglEnable

; 1490 : 	pglEnable( GL_POLYGON_SMOOTH );

	push	2881					; 00000b41H
	call	DWORD PTR ?pglEnable@@3P6GXI@ZA		; pglEnable

; 1491 : 	pglHint( GL_LINE_SMOOTH_HINT, GL_NICEST );

	push	4354					; 00001102H
	push	3154					; 00000c52H
	call	DWORD PTR ?pglHint@@3P6GXII@ZA		; pglHint

; 1492 : 	pglHint( GL_POLYGON_SMOOTH_HINT, GL_NICEST );

	push	4354					; 00001102H
	push	3155					; 00000c53H
	call	DWORD PTR ?pglHint@@3P6GXII@ZA		; pglHint

; 1493 : 
; 1494 : 	mextrasurf_t *es = r_stats.debug_surface->info;

	mov	ecx, DWORD PTR ?r_stats@@3Uref_stats_t@@A+80
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR _es$[ebp], edx

; 1495 : 
; 1496 : 	pglBegin( GL_POLYGON );

	push	9
	call	DWORD PTR ?pglBegin@@3P6GXI@ZA		; pglBegin

; 1497 : 	for( int j = 0; j < es->numverts; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $L72661
$L72662:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$L72661:
	mov	ecx, DWORD PTR _es$[ebp]
	xor	edx, edx
	mov	dx, WORD PTR [ecx+126]
	cmp	DWORD PTR _j$[ebp], edx
	jge	SHORT $L72663

; 1499 : 		bvert_t *v = &world->vertexes[es->firstvertex + j];

	mov	eax, DWORD PTR _es$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	add	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR ?world@@3PAUgl_world_t@@A ; world
	mov	eax, DWORD PTR [edx+112]
	add	eax, ecx
	mov	DWORD PTR _v$72664[ebp], eax

; 1500 : 		pglVertex3fv( v->vertex + v->normal * 0.1f );

	push	1036831949				; 3dcccccdH
	lea	ecx, DWORD PTR $T73405[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$72664[ebp]
	add	ecx, 12					; 0000000cH
	call	??DVector@@QBE?AV0@M@Z			; Vector::operator*
	push	eax
	lea	edx, DWORD PTR $T73406[ebp]
	push	edx
	mov	ecx, DWORD PTR _v$72664[ebp]
	call	??HVector@@QBE?AV0@ABV0@@Z		; Vector::operator+
	mov	ecx, eax
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	call	DWORD PTR ?pglVertex3fv@@3P6GXPBM@ZA	; pglVertex3fv

; 1501 : 	}

	jmp	SHORT $L72662
$L72663:

; 1502 : 	pglEnd();

	call	DWORD PTR ?pglEnd@@3P6GXXZA		; pglEnd

; 1503 : 
; 1504 : 	pglEnable( GL_TEXTURE_2D );

	push	3553					; 00000de1H
	call	DWORD PTR ?pglEnable@@3P6GXI@ZA		; pglEnable

; 1505 : 	pglPolygonMode( GL_FRONT_AND_BACK, GL_FILL );

	push	6914					; 00001b02H
	push	1032					; 00000408H
	call	DWORD PTR ?pglPolygonMode@@3P6GXII@ZA	; pglPolygonMode

; 1506 : 	pglDisable( GL_POLYGON_SMOOTH );

	push	2881					; 00000b41H
	call	DWORD PTR ?pglDisable@@3P6GXI@ZA	; pglDisable

; 1507 : 	pglDisable( GL_LINE_SMOOTH );

	push	2848					; 00000b20H
	call	DWORD PTR ?pglDisable@@3P6GXI@ZA	; pglDisable

; 1508 : 	pglEnable( GL_DEPTH_TEST );

	push	2929					; 00000b71H
	call	DWORD PTR ?pglEnable@@3P6GXI@ZA		; pglEnable

; 1509 : 	pglDisable( GL_BLEND );

	push	3042					; 00000be2H
	call	DWORD PTR ?pglDisable@@3P6GXI@ZA	; pglDisable

; 1510 : 	pglLineWidth( 1.0f );

	push	1065353216				; 3f800000H
	call	DWORD PTR ?pglLineWidth@@3P6GXM@ZA	; pglLineWidth

; 1511 : 	R_LoadIdentity ();

	call	?R_LoadIdentity@@YAXXZ			; R_LoadIdentity
$L72641:

; 1512 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_RenderDebugSurface@@YAXXZ ENDP			; R_RenderDebugSurface
_TEXT	ENDS
PUBLIC	??8Vector@@QBEHABV0@@Z				; Vector::operator==
;	COMDAT ??9Vector@@QBEHABV0@@Z
_TEXT	SEGMENT
_v$ = 8
_this$ = -4
??9Vector@@QBEHABV0@@Z PROC NEAR			; Vector::operator!=, COMDAT

; 148  : 	inline int operator!=(const Vector& v) const	{ return !(*this==v);		   }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8Vector@@QBEHABV0@@Z			; Vector::operator==
	neg	eax
	sbb	eax, eax
	inc	eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9Vector@@QBEHABV0@@Z ENDP				; Vector::operator!=
_TEXT	ENDS
;	COMDAT ??8Vector@@QBEHABV0@@Z
_TEXT	SEGMENT
_v$ = 8
_this$ = -4
??8Vector@@QBEHABV0@@Z PROC NEAR			; Vector::operator==, COMDAT

; 147  : 	inline int operator==(const Vector& v) const	{ return x==v.x && y==v.y && z==v.z;	   }

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fcomp	DWORD PTR [ecx]
	fnstsw	ax
	test	ah, 64					; 00000040H
	je	SHORT $L73413
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fcomp	DWORD PTR [eax+4]
	fnstsw	ax
	test	ah, 64					; 00000040H
	je	SHORT $L73413
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fcomp	DWORD PTR [edx+8]
	fnstsw	ax
	test	ah, 64					; 00000040H
	je	SHORT $L73413
	mov	DWORD PTR -8+[ebp], 1
	jmp	SHORT $L73414
$L73413:
	mov	DWORD PTR -8+[ebp], 0
$L73414:
	mov	eax, DWORD PTR -8+[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector@@QBEHABV0@@Z ENDP				; Vector::operator==
_TEXT	ENDS
PUBLIC	??0pmplane_t@@QAE@XZ				; pmplane_t::pmplane_t
;	COMDAT ??0pmtrace_s@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0pmtrace_s@@QAE@XZ PROC NEAR				; pmtrace_s::pmtrace_s, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0pmplane_t@@QAE@XZ			; pmplane_t::pmplane_t
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0pmtrace_s@@QAE@XZ ENDP				; pmtrace_s::pmtrace_s
_TEXT	ENDS
;	COMDAT ??0pmplane_t@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0pmplane_t@@QAE@XZ PROC NEAR				; pmplane_t::pmplane_t, COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0pmplane_t@@QAE@XZ ENDP				; pmplane_t::pmplane_t
_TEXT	ENDS
PUBLIC	?R_CheckMonsterView@@YA_NPBUref_viewpass_s@@@Z	; R_CheckMonsterView
;	COMDAT ?R_CheckMonsterView@@YA_NPBUref_viewpass_s@@@Z
_TEXT	SEGMENT
_rvp$ = 8
_view$ = -4
?R_CheckMonsterView@@YA_NPBUref_viewpass_s@@@Z PROC NEAR ; R_CheckMonsterView, COMDAT

; 1515 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1516 : 	if( rvp->viewentity <= tr.viewparams.maxclients )

	mov	eax, DWORD PTR _rvp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	cmp	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411892
	jg	SHORT $L72674

; 1517 : 		return false;

	xor	al, al
	jmp	SHORT $L72673
$L72674:

; 1518 : 
; 1519 : 	// get viewentity and monster eyeposition
; 1520 : 	cl_entity_t *view = GET_ENTITY( rvp->viewentity );

	mov	edx, DWORD PTR _rvp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+212
	add	esp, 4
	mov	DWORD PTR _view$[ebp], eax

; 1521 : 
; 1522 :  	if( view && view->model && view->model->type == mod_studio && FBitSet( view->curstate.eflags, EFLAG_SLERP ))

	cmp	DWORD PTR _view$[ebp], 0
	je	SHORT $L72676
	mov	ecx, DWORD PTR _view$[ebp]
	cmp	DWORD PTR [ecx+2964], 0
	je	SHORT $L72676
	mov	edx, DWORD PTR _view$[ebp]
	mov	eax, DWORD PTR [edx+2964]
	cmp	DWORD PTR [eax+68], 3
	jne	SHORT $L72676
	mov	ecx, DWORD PTR _view$[ebp]
	xor	edx, edx
	mov	dl, BYTE PTR [ecx+756]
	and	edx, 1
	test	edx, edx
	je	SHORT $L72676

; 1523 : 		return true;

	mov	al, 1
	jmp	SHORT $L72673
$L72676:

; 1524 : 	return false;

	xor	al, al
$L72673:

; 1525 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_CheckMonsterView@@YA_NPBUref_viewpass_s@@@Z ENDP	; R_CheckMonsterView
_TEXT	ENDS
PUBLIC	?R_SetupRefParams@@YAXPBUref_viewpass_s@@@Z	; R_SetupRefParams
EXTRN	?gHUD@@3VCHud@@A:BYTE				; gHUD
EXTRN	?V_CalcFov@@YAMAAMMM@Z:NEAR			; V_CalcFov
;	COMDAT ?R_SetupRefParams@@YAXPBUref_viewpass_s@@@Z
_TEXT	SEGMENT
_rvp$ = 8
?R_SetupRefParams@@YAXPBUref_viewpass_s@@@Z PROC NEAR	; R_SetupRefParams, COMDAT

; 1535 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1536 : 	RI->params = RP_NONE;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [eax], 0

; 1537 : 	RI->farClip = 0;

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [ecx+252], 0

; 1538 : 
; 1539 : 	tr.time = GET_CLIENT_TIME();

	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+216
	fstp	QWORD PTR ?tr@@3Uref_globals_t@@A+8

; 1540 : 	tr.oldtime = GET_CLIENT_OLDTIME();

	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+420
	fstp	QWORD PTR ?tr@@3Uref_globals_t@@A+16

; 1541 : 	tr.fGamePaused = RENDER_GET_PARM( PARAM_GAMEPAUSED, 0 );

	push	0
	push	18					; 00000012H
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A
	add	esp, 8
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+4, eax

; 1542 : 
; 1543 : 	if( !FBitSet( rvp->flags, RF_DRAW_CUBEMAP ))

	mov	edx, DWORD PTR _rvp$[ebp]
	mov	eax, DWORD PTR [edx+52]
	and	eax, 2
	test	eax, eax
	jne	SHORT $L72680

; 1545 : 		if( FBitSet( rvp->flags, RF_DRAW_OVERVIEW ))

	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	and	edx, 4
	test	edx, edx
	je	SHORT $L72681

; 1547 : 			SetBits( RI->params, RP_THIRDPERSON );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	or	ch, 32					; 00000020H
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [edx], ecx

; 1548 : 			SetBits( RI->params, RP_OVERVIEW );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	or	ch, 2
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [edx], ecx
$L72681:

; 1550 : 
; 1551 : 		if( gHUD.m_iCameraMode )

	cmp	DWORD PTR ?gHUD@@3VCHud@@A+100, 0
	je	SHORT $L72682

; 1552 : 			SetBits( RI->params, RP_THIRDPERSON );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	or	ch, 32					; 00000020H
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [edx], ecx
$L72682:

; 1554 : 	else

	jmp	SHORT $L72683
$L72680:

; 1556 : 		SetBits( RI->params, RP_ENVVIEW );

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [edx], ecx
$L72683:

; 1558 : 
; 1559 : 	// setup viewport
; 1560 : 	RI->viewport[0] = rvp->viewport[0];

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+32], edx

; 1561 : 	RI->viewport[1] = rvp->viewport[1];

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+36], edx

; 1562 : 	RI->viewport[2] = rvp->viewport[2];

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+40], edx

; 1563 : 	RI->viewport[3] = rvp->viewport[3];

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+44], edx

; 1564 : 
; 1565 : 	// calc FOV
; 1566 : 	if( R_CheckMonsterView( rvp ))

	mov	eax, DWORD PTR _rvp$[ebp]
	push	eax
	call	?R_CheckMonsterView@@YA_NPBUref_viewpass_s@@@Z ; R_CheckMonsterView
	add	esp, 4
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L72684

; 1568 : 		RI->fov_x = 100; // adjust fov for monster view

	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [ecx+8], 1120403456		; 42c80000H

; 1569 : 		RI->fov_y = V_CalcFov( RI->fov_x, RI->viewport[2], RI->viewport[3] );

	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fild	DWORD PTR [edx+44]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fild	DWORD PTR [eax+40]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 8
	push	ecx
	call	?V_CalcFov@@YAMAAMMM@Z			; V_CalcFov
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	fstp	DWORD PTR [edx+12]

; 1571 : 	else

	jmp	SHORT $L72685
$L72684:

; 1573 : 		RI->fov_x = rvp->fov_x;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+8], edx

; 1574 : 		RI->fov_y = rvp->fov_y;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+12], edx
$L72685:

; 1576 : 
; 1577 : 	RI->vieworg = rvp->vieworigin;

	mov	eax, DWORD PTR _rvp$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	ecx, 204				; 000000ccH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1578 : 	RI->viewangles = rvp->viewangles;

	mov	ecx, DWORD PTR _rvp$[ebp]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	edx, 192				; 000000c0H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1579 : 	RI->pvsorigin = rvp->vieworigin;

	mov	edx, DWORD PTR _rvp$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	add	eax, 180				; 000000b4H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 1580 : 	RI->viewentity = rvp->viewentity;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+4], edx

; 1581 : 	RI->num_subview_faces = 0;

	mov	eax, DWORD PTR ?RI@@3PAUref_instance_t@@A ; RI
	mov	DWORD PTR [eax+13988], 0

; 1582 : 
; 1583 : 	tr.cached_vieworigin = rvp->vieworigin;

	mov	ecx, DWORD PTR _rvp$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417160, edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417164, eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417168, ecx

; 1584 : 	tr.cached_viewangles = rvp->viewangles;

	mov	edx, DWORD PTR _rvp$[ebp]
	add	edx, 28					; 0000001cH
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417172, eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417176, ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417180, edx

; 1585 : 
; 1586 : 	// setup skyparams
; 1587 : 	tr.sky_normal.x = tr.movevars->skyvec_x;

	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417192, ecx

; 1588 : 	tr.sky_normal.y = tr.movevars->skyvec_y;

	mov	edx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	eax, DWORD PTR [edx+124]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417196, eax

; 1589 : 	tr.sky_normal.z = tr.movevars->skyvec_z;

	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417200, edx

; 1590 : 	
; 1591 : 	tr.sky_ambient.x = tr.movevars->skycolor_r;

	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417204, ecx

; 1592 : 	tr.sky_ambient.y = tr.movevars->skycolor_g;

	mov	edx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417208, eax

; 1593 : 	tr.sky_ambient.z = tr.movevars->skycolor_b;

	mov	ecx, DWORD PTR ?tr@@3Uref_globals_t@@A+1411952
	mov	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1417212, edx

; 1594 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_SetupRefParams@@YAXPBUref_viewpass_s@@@Z ENDP	; R_SetupRefParams
_TEXT	ENDS
PUBLIC	?R_RunViewmodelEvents@@YAXXZ			; R_RunViewmodelEvents
EXTRN	?R_UnloadFarGrass@@YAXXZ:NEAR			; R_UnloadFarGrass
EXTRN	?gl_renderer@@3PAUcvar_s@@A:DWORD		; gl_renderer
EXTRN	?r_show_renderpass@@3PAUcvar_s@@A:DWORD		; r_show_renderpass
EXTRN	?r_show_light_scissors@@3PAUcvar_s@@A:DWORD	; r_show_light_scissors
EXTRN	?r_show_normals@@3PAUcvar_s@@A:DWORD		; r_show_normals
EXTRN	?r_show_lightprobes@@3PAUcvar_s@@A:DWORD	; r_show_lightprobes
EXTRN	?R_DrawRenderPasses@@YAXH@Z:NEAR		; R_DrawRenderPasses
EXTRN	?R_DrawLightScissors@@YAXXZ:NEAR		; R_DrawLightScissors
EXTRN	?DrawLightProbes@@YAXXZ:NEAR			; DrawLightProbes
EXTRN	?DrawNormals@@YAXXZ:NEAR			; DrawNormals
;	COMDAT ?HUD_RenderFrame@@YAHPBUref_viewpass_s@@@Z
_TEXT	SEGMENT
_rvp$ = 8
?HUD_RenderFrame@@YAHPBUref_viewpass_s@@@Z PROC NEAR	; HUD_RenderFrame, COMDAT

; 1608 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1609 : 	r_speeds_msg[0] = r_depth_msg[0] = '\0';

	mov	BYTE PTR ?r_depth_msg@@3PADA, 0
	mov	al, BYTE PTR ?r_depth_msg@@3PADA
	mov	BYTE PTR ?r_speeds_msg@@3PADA, al

; 1610 : 	tr.fCustomRendering = false;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1, 0

; 1611 : 
; 1612 : 	// it's playersetup overview, ignore it	
; 1613 : 	if( !FBitSet( rvp->flags, RF_DRAW_WORLD ))

	mov	ecx, DWORD PTR _rvp$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	and	edx, 1
	test	edx, edx
	jne	SHORT $L72689

; 1614 : 		return 0;

	xor	eax, eax
	jmp	$L72688
$L72689:

; 1615 : 
; 1616 : 	// draw client things through engine renderer
; 1617 : 	if( FBitSet( rvp->flags, RF_ONLY_CLIENTDRAW ))

	mov	eax, DWORD PTR _rvp$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, 8
	test	ecx, ecx
	je	SHORT $L72690

; 1618 : 		return 0;

	xor	eax, eax
	jmp	$L72688
$L72690:

; 1619 : 
; 1620 : 	R_SetupRefParams( rvp );

	mov	edx, DWORD PTR _rvp$[ebp]
	push	edx
	call	?R_SetupRefParams@@YAXPBUref_viewpass_s@@@Z ; R_SetupRefParams
	add	esp, 4

; 1621 : 
; 1622 : 	if( !g_fRenderInitialized )

	cmp	DWORD PTR ?g_fRenderInitialized@@3HA, 0	; g_fRenderInitialized
	jne	SHORT $L72691

; 1623 : 		return 0;

	xor	eax, eax
	jmp	$L72688
$L72691:

; 1624 : 
; 1625 : 	// use engine renderer
; 1626 : 	if( !CVAR_TO_BOOL( gl_renderer ))

	cmp	DWORD PTR ?gl_renderer@@3PAUcvar_s@@A, 0 ; gl_renderer
	je	SHORT $L73425
	mov	eax, DWORD PTR ?gl_renderer@@3PAUcvar_s@@A ; gl_renderer
	fld	DWORD PTR [eax+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L73425
	mov	BYTE PTR -4+[ebp], 1
	jmp	SHORT $L73426
$L73425:
	mov	BYTE PTR -4+[ebp], 0
$L73426:
	mov	ecx, DWORD PTR -4+[ebp]
	and	ecx, 255				; 000000ffH
	test	ecx, ecx
	jne	SHORT $L72692

; 1628 : 		tr.fResetVis = true;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A, 1

; 1629 : 		return 0;

	xor	eax, eax
	jmp	$L72688
$L72692:

; 1631 : 
; 1632 : 	memset( tr.visbytes, 0, tr.pvssize );

	mov	edx, DWORD PTR ?tr@@3Uref_globals_t@@A+1416116
	push	edx
	push	0
	push	OFFSET FLAT:?tr@@3Uref_globals_t@@A+1412020
	call	_memset
	add	esp, 12					; 0000000cH

; 1633 : 	tr.fCustomRendering = true;

	mov	BYTE PTR ?tr@@3Uref_globals_t@@A+1, 1

; 1634 : 	R_RunViewmodelEvents();

	call	?R_RunViewmodelEvents@@YAXXZ		; R_RunViewmodelEvents

; 1635 : 	tr.realframecount++;

	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+1411992
	add	eax, 1
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1411992, eax

; 1636 : 
; 1637 : 	// draw main view
; 1638 : 	R_RenderScene ();

	call	?R_RenderScene@@YAXXZ			; R_RenderScene

; 1639 : 
; 1640 : 	R_RestoreGLState();

	call	?R_RestoreGLState@@YAXXZ		; R_RestoreGLState

; 1641 : 
; 1642 : 	R_RenderDebugSurface ();

	call	?R_RenderDebugSurface@@YAXXZ		; R_RenderDebugSurface

; 1643 : 
; 1644 : 	if( CVAR_TO_BOOL( r_show_renderpass ))

	cmp	DWORD PTR ?r_show_renderpass@@3PAUcvar_s@@A, 0 ; r_show_renderpass
	je	SHORT $L73427
	mov	ecx, DWORD PTR ?r_show_renderpass@@3PAUcvar_s@@A ; r_show_renderpass
	fld	DWORD PTR [ecx+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L73427
	mov	BYTE PTR -8+[ebp], 1
	jmp	SHORT $L73428
$L73427:
	mov	BYTE PTR -8+[ebp], 0
$L73428:
	mov	edx, DWORD PTR -8+[ebp]
	and	edx, 255				; 000000ffH
	test	edx, edx
	je	SHORT $L72693

; 1645 : 		R_DrawRenderPasses( (int)r_show_renderpass->value - 1 );

	mov	eax, DWORD PTR ?r_show_renderpass@@3PAUcvar_s@@A ; r_show_renderpass
	fld	DWORD PTR [eax+12]
	call	__ftol
	sub	eax, 1
	push	eax
	call	?R_DrawRenderPasses@@YAXH@Z		; R_DrawRenderPasses
	add	esp, 4
$L72693:

; 1646 : 
; 1647 : 	if( CVAR_TO_BOOL( r_show_light_scissors ))

	cmp	DWORD PTR ?r_show_light_scissors@@3PAUcvar_s@@A, 0 ; r_show_light_scissors
	je	SHORT $L73429
	mov	ecx, DWORD PTR ?r_show_light_scissors@@3PAUcvar_s@@A ; r_show_light_scissors
	fld	DWORD PTR [ecx+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L73429
	mov	BYTE PTR -12+[ebp], 1
	jmp	SHORT $L73430
$L73429:
	mov	BYTE PTR -12+[ebp], 0
$L73430:
	mov	edx, DWORD PTR -12+[ebp]
	and	edx, 255				; 000000ffH
	test	edx, edx
	je	SHORT $L72695

; 1648 : 		R_DrawLightScissors();

	call	?R_DrawLightScissors@@YAXXZ		; R_DrawLightScissors
$L72695:

; 1649 : 
; 1650 : 	if( CVAR_TO_BOOL( r_show_lightprobes ))

	cmp	DWORD PTR ?r_show_lightprobes@@3PAUcvar_s@@A, 0 ; r_show_lightprobes
	je	SHORT $L73431
	mov	eax, DWORD PTR ?r_show_lightprobes@@3PAUcvar_s@@A ; r_show_lightprobes
	fld	DWORD PTR [eax+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L73431
	mov	BYTE PTR -16+[ebp], 1
	jmp	SHORT $L73432
$L73431:
	mov	BYTE PTR -16+[ebp], 0
$L73432:
	mov	ecx, DWORD PTR -16+[ebp]
	and	ecx, 255				; 000000ffH
	test	ecx, ecx
	je	SHORT $L72696

; 1651 : 		DrawLightProbes();

	call	?DrawLightProbes@@YAXXZ			; DrawLightProbes
$L72696:

; 1652 : 
; 1653 : 	if( CVAR_TO_BOOL( r_show_normals ))

	cmp	DWORD PTR ?r_show_normals@@3PAUcvar_s@@A, 0 ; r_show_normals
	je	SHORT $L73433
	mov	edx, DWORD PTR ?r_show_normals@@3PAUcvar_s@@A ; r_show_normals
	fld	DWORD PTR [edx+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L73433
	mov	BYTE PTR -20+[ebp], 1
	jmp	SHORT $L73434
$L73433:
	mov	BYTE PTR -20+[ebp], 0
$L73434:
	mov	eax, DWORD PTR -20+[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L72697

; 1654 : 		DrawNormals();

	call	?DrawNormals@@YAXXZ			; DrawNormals
$L72697:

; 1655 : 
; 1656 : 	R_UnloadFarGrass();

	call	?R_UnloadFarGrass@@YAXXZ		; R_UnloadFarGrass

; 1657 : 
; 1658 : 	HUD_PrintStats ();

	call	?HUD_PrintStats@@YAXXZ			; HUD_PrintStats

; 1659 : 
; 1660 : 	return 1;

	mov	eax, 1
$L72688:

; 1661 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?HUD_RenderFrame@@YAHPBUref_viewpass_s@@@Z ENDP		; HUD_RenderFrame
_TEXT	ENDS
EXTRN	?RunViewModelEvents@CStudioModelRenderer@@QAEXXZ:NEAR ; CStudioModelRenderer::RunViewModelEvents
;	COMDAT ?R_RunViewmodelEvents@@YAXXZ
_TEXT	SEGMENT
?R_RunViewmodelEvents@@YAXXZ PROC NEAR			; R_RunViewmodelEvents, COMDAT

; 649  : inline void R_RunViewmodelEvents( void ) { g_StudioRenderer.RunViewModelEvents(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET FLAT:?g_StudioRenderer@@3VCStudioModelRenderer@@A
	call	?RunViewModelEvents@CStudioModelRenderer@@QAEXXZ ; CStudioModelRenderer::RunViewModelEvents
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_RunViewmodelEvents@@YAXXZ ENDP			; R_RunViewmodelEvents
_TEXT	ENDS
;	COMDAT ?HUD_SpeedsMessage@@YAHPADI@Z
_TEXT	SEGMENT
_out$ = 8
_size$ = 12
?HUD_SpeedsMessage@@YAHPADI@Z PROC NEAR			; HUD_SpeedsMessage, COMDAT

; 1664 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1665 : 	if( !g_fRenderInitialized || !CVAR_TO_BOOL( gl_renderer ))

	cmp	DWORD PTR ?g_fRenderInitialized@@3HA, 0	; g_fRenderInitialized
	je	SHORT $L72703
	cmp	DWORD PTR ?gl_renderer@@3PAUcvar_s@@A, 0 ; gl_renderer
	je	SHORT $L73439
	mov	eax, DWORD PTR ?gl_renderer@@3PAUcvar_s@@A ; gl_renderer
	fld	DWORD PTR [eax+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L73439
	mov	BYTE PTR -4+[ebp], 1
	jmp	SHORT $L73440
$L73439:
	mov	BYTE PTR -4+[ebp], 0
$L73440:
	mov	ecx, DWORD PTR -4+[ebp]
	and	ecx, 255				; 000000ffH
	test	ecx, ecx
	jne	SHORT $L72702
$L72703:

; 1666 : 		return false; // let the engine use built-in counters

	xor	eax, eax
	jmp	SHORT $L72701
$L72702:

; 1667 : 
; 1668 : 	if( r_speeds->value <= 0 || !out || !size )

	mov	edx, DWORD PTR ?r_speeds@@3PAUcvar_s@@A	; r_speeds
	fld	DWORD PTR [edx+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L72705
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $L72705
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $L72704
$L72705:

; 1669 : 		return false;

	xor	eax, eax
	jmp	SHORT $L72701
$L72704:

; 1670 : 
; 1671 : 	Q_strncpy( out, r_speeds_msg, size );

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	OFFSET FLAT:?r_speeds_msg@@3PADA	; r_speeds_msg
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	?Q_strncpy@@YAIPADPBDI@Z		; Q_strncpy
	add	esp, 12					; 0000000cH

; 1672 : 
; 1673 : 	return true;

	mov	eax, 1
$L72701:

; 1674 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?HUD_SpeedsMessage@@YAHPADI@Z ENDP			; HUD_SpeedsMessage
_TEXT	ENDS
EXTRN	?Mod_ThrowModelInstances@@YAXXZ:NEAR		; Mod_ThrowModelInstances
EXTRN	?Mod_PrepareModelInstances@@YAXXZ:NEAR		; Mod_PrepareModelInstances
;	COMDAT ?HUD_ProcessEntData@@YAXH@Z
_TEXT	SEGMENT
_allocate$ = 8
?HUD_ProcessEntData@@YAXH@Z PROC NEAR			; HUD_ProcessEntData, COMDAT

; 1677 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1678 : 	if( allocate ) Mod_PrepareModelInstances();

	cmp	DWORD PTR _allocate$[ebp], 0
	je	SHORT $L72709
	call	?Mod_PrepareModelInstances@@YAXXZ	; Mod_PrepareModelInstances

; 1679 : 	else Mod_ThrowModelInstances();

	jmp	SHORT $L72710
$L72709:
	call	?Mod_ThrowModelInstances@@YAXXZ		; Mod_ThrowModelInstances
$L72710:

; 1680 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?HUD_ProcessEntData@@YAXH@Z ENDP			; HUD_ProcessEntData
_TEXT	ENDS
PUBLIC	?R_ProcessStudioData@@YAXPAUmodel_s@@HPBE@Z	; R_ProcessStudioData
EXTRN	?R_ProcessWorldData@@YAXPAUmodel_s@@HPBE@Z:NEAR	; R_ProcessWorldData
;	COMDAT ?HUD_ProcessModelData@@YAXPAUmodel_s@@HPBE@Z
_TEXT	SEGMENT
_mod$ = 8
_create$ = 12
_buffer$ = 16
?HUD_ProcessModelData@@YAXPAUmodel_s@@HPBE@Z PROC NEAR	; HUD_ProcessModelData, COMDAT

; 1683 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1684 : 	if( !g_fRenderInitialized ) return;

	cmp	DWORD PTR ?g_fRenderInitialized@@3HA, 0	; g_fRenderInitialized
	jne	SHORT $L72716
	jmp	SHORT $L72715
$L72716:

; 1685 : 
; 1686 : 	// g-cont. probably this is redundant :-)
; 1687 : 	if( RENDER_GET_PARM( PARM_DEDICATED_SERVER, 0 ))

	push	0
	push	32					; 00000020H
	call	DWORD PTR ?gRenderfuncs@@3Urender_api_s@@A
	add	esp, 8
	test	eax, eax
	je	SHORT $L72717

; 1688 : 		return;

	jmp	SHORT $L72715
$L72717:

; 1689 : 
; 1690 : 	if( FBitSet( mod->flags, MODEL_WORLD ))

	mov	eax, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	and	ecx, 536870912				; 20000000H
	test	ecx, ecx
	je	SHORT $L72718

; 1691 : 		R_ProcessWorldData( mod, create, buffer );

	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _create$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	call	?R_ProcessWorldData@@YAXPAUmodel_s@@HPBE@Z ; R_ProcessWorldData
	add	esp, 12					; 0000000cH

; 1692 : 	else R_ProcessStudioData( mod, create, buffer );

	jmp	SHORT $L72719
$L72718:
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _create$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	call	?R_ProcessStudioData@@YAXPAUmodel_s@@HPBE@Z ; R_ProcessStudioData
	add	esp, 12					; 0000000cH
$L72719:
$L72715:

; 1693 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?HUD_ProcessModelData@@YAXPAUmodel_s@@HPBE@Z ENDP	; HUD_ProcessModelData
_TEXT	ENDS
EXTRN	?ProcessUserData@CStudioModelRenderer@@QAEXPAUmodel_s@@HPBE@Z:NEAR ; CStudioModelRenderer::ProcessUserData
;	COMDAT ?R_ProcessStudioData@@YAXPAUmodel_s@@HPBE@Z
_TEXT	SEGMENT
_mod$ = 8
_create$ = 12
_buffer$ = 16
?R_ProcessStudioData@@YAXPAUmodel_s@@HPBE@Z PROC NEAR	; R_ProcessStudioData, COMDAT

; 657  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 658  : 	if( mod->type == mod_studio )

	mov	eax, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [eax+68], 3
	jne	SHORT $L69880

; 659  : 		g_StudioRenderer.ProcessUserData( mod, create, buffer );

	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _create$[ebp]
	push	edx
	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	mov	ecx, OFFSET FLAT:?g_StudioRenderer@@3VCStudioModelRenderer@@A
	call	?ProcessUserData@CStudioModelRenderer@@QAEXPAUmodel_s@@HPBE@Z ; CStudioModelRenderer::ProcessUserData
$L69880:

; 660  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_ProcessStudioData@@YAXPAUmodel_s@@HPBE@Z ENDP	; R_ProcessStudioData
_TEXT	ENDS
PUBLIC	?HUD_GetRenderInterface@@YAHHPAUrender_api_s@@PAUrender_interface_s@@@Z ; HUD_GetRenderInterface
;	COMDAT ?HUD_GetRenderInterface@@YAHHPAUrender_api_s@@PAUrender_interface_s@@@Z
_TEXT	SEGMENT
_version$ = 8
_renderfuncs$ = 12
_callback$ = 16
_iImportSize$ = -4
_iExportSize$ = -8
?HUD_GetRenderInterface@@YAHHPAUrender_api_s@@PAUrender_interface_s@@@Z PROC NEAR ; HUD_GetRenderInterface, COMDAT

; 1715 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1716 : 	if ( !callback || !renderfuncs || version != CL_RENDER_INTERFACE_VERSION )

	cmp	DWORD PTR _callback$[ebp], 0
	je	SHORT $L72727
	cmp	DWORD PTR _renderfuncs$[ebp], 0
	je	SHORT $L72727
	cmp	DWORD PTR _version$[ebp], 37		; 00000025H
	je	SHORT $L72726
$L72727:

; 1718 : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $L72725
$L72726:

; 1720 : 
; 1721 : 	size_t iImportSize = sizeof( render_interface_t );

	mov	DWORD PTR _iImportSize$[ebp], 48	; 00000030H

; 1722 : 	size_t iExportSize = sizeof( render_api_t );

	mov	DWORD PTR _iExportSize$[ebp], 260	; 00000104H

; 1723 : 
; 1724 : 	// copy new physics interface
; 1725 : 	memcpy( &gRenderfuncs, renderfuncs, iExportSize );

	mov	eax, DWORD PTR _iExportSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderfuncs$[ebp]
	push	ecx
	push	OFFSET FLAT:?gRenderfuncs@@3Urender_api_s@@A ; gRenderfuncs
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1726 : 
; 1727 : 	// fill engine callbacks
; 1728 : 	memcpy( callback, &gRenderInterface, iImportSize );

	mov	edx, DWORD PTR _iImportSize$[ebp]
	push	edx
	push	OFFSET FLAT:_gRenderInterface
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1729 : 
; 1730 : 	// get pointer to movevars
; 1731 : 	tr.movevars = gEngfuncs.pEventAPI->EV_GetMovevars();

	mov	ecx, DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+336
	call	DWORD PTR [ecx+100]
	mov	DWORD PTR ?tr@@3Uref_globals_t@@A+1411952, eax

; 1732 : 
; 1733 : 	g_fRenderInitialized = TRUE;

	mov	DWORD PTR ?g_fRenderInitialized@@3HA, 1	; g_fRenderInitialized

; 1734 : 
; 1735 : 	return TRUE;

	mov	eax, 1
$L72725:

; 1736 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?HUD_GetRenderInterface@@YAHHPAUrender_api_s@@PAUrender_interface_s@@@Z ENDP ; HUD_GetRenderInterface
_TEXT	ENDS
END
