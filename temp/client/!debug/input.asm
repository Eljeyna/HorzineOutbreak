	TITLE	Z:\XashXTSRC\client\input.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_08DLKC@in_graph?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08OHEM@in_mlook?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08IHLG@in_jlook?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CO@OOGM@Three?5keys?5down?5for?5a?5button?5?8?$CFc@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05PECN@incar?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@LPHC@vehicle_driver_eyes?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07KFJC@?$CLmoveup?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07ECOP@?9moveup?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09IMNG@?$CLmovedown?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09BGG@?9movedown?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05IFMH@?$CLleft?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05EFBI@?9left?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FOLA@?$CLright?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06CDHA@?9right?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08HLLP@?$CLforward?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08MLFI@?9forward?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05NMMM@?$CLback?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05BMBD@?9back?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07BGBD@?$CLlookup?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07PBGO@?9lookup?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09GHKO@?$CLlookdown?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09OKBO@?9lookdown?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07OJLO@?$CLstrafe?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07OMD@?9strafe?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09EGDL@?$CLmoveleft?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09MLIL@?9moveleft?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DMHD@?$CLmoveright?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPO@?9moveright?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FAHP@?$CLspeed?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06CNLP@?9speed?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07KANK@?$CLattack?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07EHKH@?9attack?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08CPBO@?$CLattack2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08JPPJ@?9attack2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04MKDH@?$CLuse?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04BFNL@?9use?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05FPLG@?$CLjump?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05JPGJ@?9jump?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07ENEF@impulse?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06BEDN@?$CLklook?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06GJPN@?9klook?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06NEOC@?$CLmlook?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06KJCC@?9mlook?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06LEBI@?$CLjlook?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06MJNI@?9jlook?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05GKBA@?$CLduck?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05KKMP@?9duck?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07MJDD@?$CLreload?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07COEO@?9reload?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05DPBJ@?$CLalt1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05PPMG@?9alt1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06IAM@?$CLgraph?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06HFMM@?9graph?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06PPFL@?$CLscore?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06ICJL@?9score?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06ODFM@?$CLbreak?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06JOJM@?9break?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01PLJA@0?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DEGL@lookstrafe?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MEDB@lookspring?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04KHAF@0?467?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@MHNK@cl_anglespeedkey?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03JFFD@210?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@CKBA@cl_yawspeed?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03KOGH@225?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@IBII@cl_pitchspeed?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03PMLK@320?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@BDND@cl_upspeed?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03GPIO@400?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GNDE@cl_forwardspeed?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@IFLM@cl_backspeed?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@DLCL@cl_sidespeed?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03HAGP@0?43?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@HCFJ@cl_movespeedkey?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02PBA@89?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@FMOC@cl_pitchup?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@LIOC@cl_pitchdown?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05GGO@0?4022?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07FHKJ@m_pitch?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LLLA@m_yaw?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01FBAH@1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09NFLM@m_forward?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03NLGO@0?48?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06MLIH@m_side?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@KIKJ@z?3?2xashxtsrc?2game_shared?2utlmemo@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@MOH@nGrowSize?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@KBCN@?$CBIsReadOnly?$CI?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MLLF@IsIdxValid?$CIi?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SinCos@@YAXMPAM0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector2D@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector2D@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DVector2D@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector2D@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@QAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@Vector@@QAEXMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Vector@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DVector@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector@@QAEPAMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Vector4D@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QAEPAMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BVector4D@@QBE?BVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Vector4D@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Vector4D@@QBE_NABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Radian@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BRadian@@QBEPBMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8Radian@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x3@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix3x3@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix3x3@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix3x3@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x3@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x4@@QAE@MMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix3x4@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix3x4@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix3x4@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix3x4@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix4x4@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Amatrix4x4@@QBEPBMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8matrix4x4@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAngles@matrix4x4@@QAE?AVVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0matrix4x4@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?anglemod@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SimpleSpline@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Random@RandomRange@@QAEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudBase@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CHudBase@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VidInit@CHudBase@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw@CHudBase@@UAEHM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Think@CHudBase@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@CHudBase@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitHUDData@CHudBase@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudBase@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudAmmo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudAmmo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudHealth@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudHealth@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudGeiger@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudGeiger@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudBattery@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudBattery@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudTrain@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudTrain@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudFlashlight@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudFlashlight@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudMessage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudMessage@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudScoreboard@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudScoreboard@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudStatusBar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudStatusBar@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudDeathNotice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudDeathNotice@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudSayText@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudSayText@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudMenu@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudMenu@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudAmmoSecondary@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudAmmoSecondary@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudTextMessage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudTextMessage@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudStatusIcons@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudStatusIcons@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudMOTD@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHudMOTD@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ViewSmoothingData_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudAmmo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHudBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudHealth@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudGeiger@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudBattery@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudTrain@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudFlashlight@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudMessage@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudScoreboard@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudStatusBar@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudDeathNotice@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudSayText@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudMenu@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudAmmoSecondary@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudTextMessage@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudStatusIcons@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCHudMOTD@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pHitboxSet@CStudioBoneSetup@@QBEPAUmstudiohitboxset_t@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitBoneWeights@CStudioBoneSetup@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?debugMsg@CStudioBoneSetup@@UAAXPADZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?debugLine@CStudioBoneSetup@@UAEXABVVector@@0HHH_NM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_StudioAttachmentAngles@@YA?AVVector@@PBUcl_entity_s@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?R_StudioLookupAttachment@@YAHPBUcl_entity_s@@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KB_ConvertString@@YAHPADPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KB_Find@@YAPAXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KB_Add@@YAXPBDPAUkbutton_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KB_Init@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KB_Shutdown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KeyDown@@YAXPAUkbutton_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KeyUp@@YAXPAUkbutton_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_BreakDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_BreakUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_KLookDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_KLookUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_JLookDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_JLookUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_MLookDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_UpDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_UpUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_DownDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_DownUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_LeftDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_LeftUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_RightDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_RightUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_ForwardDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_ForwardUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_BackDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_BackUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_LookupDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_LookupUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_LookdownDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_LookdownUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_MoveleftDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_MoveleftUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_MoverightDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_MoverightUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_SpeedDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_SpeedUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_StrafeDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_StrafeUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_Attack2Down@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_Attack2Up@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_UseDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_UseUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_JumpDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_JumpUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_DuckDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_DuckUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_ReloadDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_ReloadUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_Alt1Down@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_Alt1Up@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_GraphDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_GraphUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_AttackDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_AttackUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_ScoreDown@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_ScoreUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_Cancel@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_Impulse@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IN_MLookUp@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CL_KeyState@@YAMPAUkbutton_s@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CL_AdjustAngles@@YAXMAAVVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CL_IsDead@@YAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateVehicleView@@YA_NAAVVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CL_CreateMove@@YAXMPAUusercmd_s@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CL_ButtonBits@@YAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CL_ResetButtonBits@@YAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitInput@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShutdownInput@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CUtlLinkedList@UJiggleData@@G@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CUtlLinkedList@UJiggleData@@G@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CUtlLinkedList@UJiggleData@@G@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Count@?$CUtlLinkedList@UModelInstance_t@CStudioModelRenderer@@G@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InvalidIndex@?$CUtlLinkedList@UJiggleData@@G@@SAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalElement@?$CUtlLinkedList@UJiggleData@@G@@IAEAAUListElem_t@1@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetDbgInfo@?$CUtlLinkedList@UJiggleData@@G@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Element@?$CUtlLinkedList@UJiggleData@@G@@QAEAAUJiggleData@@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValidIndex@?$CUtlLinkedList@UJiggleData@@G@@QBE_NG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConstructList@?$CUtlLinkedList@UJiggleData@@G@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QAEAAUListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Base@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QAEPAUListElem_t@?$CUtlLinkedList@UJiggleData@@G@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Destruct@@YAXPAUJiggleData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ValidateGrowSize@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QBEABUListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsIdxValid@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QBE_NH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Purge@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsReadOnly@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsExternallyAllocated@?$CUtlMemory@UListElem_t@?$CUtlLinkedList@UJiggleData@@G@@H@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CHudBase@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStudioBoneSetup@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudSayText@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudFlashlight@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudGeiger@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudDeathNotice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudBattery@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudTrain@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudMenu@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudTextMessage@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudAmmo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudHealth@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudStatusIcons@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudAmmoSecondary@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudStatusBar@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudMessage@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudMOTD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CHudScoreboard@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	?in_impulse@@3HA				; in_impulse
PUBLIC	?in_cancel@@3HA					; in_cancel
PUBLIC	?m_pitch@@3PAUcvar_s@@A				; m_pitch
PUBLIC	?m_yaw@@3PAUcvar_s@@A				; m_yaw
PUBLIC	?m_forward@@3PAUcvar_s@@A			; m_forward
PUBLIC	?m_side@@3PAUcvar_s@@A				; m_side
PUBLIC	?lookstrafe@@3PAUcvar_s@@A			; lookstrafe
PUBLIC	?lookspring@@3PAUcvar_s@@A			; lookspring
PUBLIC	?cl_pitchup@@3PAUcvar_s@@A			; cl_pitchup
PUBLIC	?cl_pitchdown@@3PAUcvar_s@@A			; cl_pitchdown
PUBLIC	?cl_upspeed@@3PAUcvar_s@@A			; cl_upspeed
PUBLIC	?cl_forwardspeed@@3PAUcvar_s@@A			; cl_forwardspeed
PUBLIC	?cl_backspeed@@3PAUcvar_s@@A			; cl_backspeed
PUBLIC	?cl_sidespeed@@3PAUcvar_s@@A			; cl_sidespeed
PUBLIC	?cl_movespeedkey@@3PAUcvar_s@@A			; cl_movespeedkey
PUBLIC	?cl_yawspeed@@3PAUcvar_s@@A			; cl_yawspeed
PUBLIC	?cl_pitchspeed@@3PAUcvar_s@@A			; cl_pitchspeed
PUBLIC	?cl_anglespeedkey@@3PAUcvar_s@@A		; cl_anglespeedkey
PUBLIC	?in_mlook@@3Ukbutton_s@@A			; in_mlook
PUBLIC	?in_klook@@3Ukbutton_s@@A			; in_klook
PUBLIC	?in_jlook@@3Ukbutton_s@@A			; in_jlook
PUBLIC	?in_left@@3Ukbutton_s@@A			; in_left
PUBLIC	?in_right@@3Ukbutton_s@@A			; in_right
PUBLIC	?in_forward@@3Ukbutton_s@@A			; in_forward
PUBLIC	?in_back@@3Ukbutton_s@@A			; in_back
PUBLIC	?in_lookup@@3Ukbutton_s@@A			; in_lookup
PUBLIC	?in_lookdown@@3Ukbutton_s@@A			; in_lookdown
PUBLIC	?in_moveleft@@3Ukbutton_s@@A			; in_moveleft
PUBLIC	?in_moveright@@3Ukbutton_s@@A			; in_moveright
PUBLIC	?in_strafe@@3Ukbutton_s@@A			; in_strafe
PUBLIC	?in_speed@@3Ukbutton_s@@A			; in_speed
PUBLIC	?in_use@@3Ukbutton_s@@A				; in_use
PUBLIC	?in_jump@@3Ukbutton_s@@A			; in_jump
PUBLIC	?in_attack@@3Ukbutton_s@@A			; in_attack
PUBLIC	?in_attack2@@3Ukbutton_s@@A			; in_attack2
PUBLIC	?in_up@@3Ukbutton_s@@A				; in_up
PUBLIC	?in_down@@3Ukbutton_s@@A			; in_down
PUBLIC	?in_duck@@3Ukbutton_s@@A			; in_duck
PUBLIC	?in_reload@@3Ukbutton_s@@A			; in_reload
PUBLIC	?in_alt1@@3Ukbutton_s@@A			; in_alt1
PUBLIC	?in_score@@3Ukbutton_s@@A			; in_score
PUBLIC	?in_break@@3Ukbutton_s@@A			; in_break
PUBLIC	?in_graph@@3Ukbutton_s@@A			; in_graph
PUBLIC	?g_kbkeys@@3PAUkblist_s@@A			; g_kbkeys
_BSS	SEGMENT
?in_impulse@@3HA DD 01H DUP (?)				; in_impulse
?in_cancel@@3HA DD 01H DUP (?)				; in_cancel
?m_pitch@@3PAUcvar_s@@A DD 01H DUP (?)			; m_pitch
?m_yaw@@3PAUcvar_s@@A DD 01H DUP (?)			; m_yaw
?m_forward@@3PAUcvar_s@@A DD 01H DUP (?)		; m_forward
?m_side@@3PAUcvar_s@@A DD 01H DUP (?)			; m_side
?lookstrafe@@3PAUcvar_s@@A DD 01H DUP (?)		; lookstrafe
?lookspring@@3PAUcvar_s@@A DD 01H DUP (?)		; lookspring
?cl_pitchup@@3PAUcvar_s@@A DD 01H DUP (?)		; cl_pitchup
?cl_pitchdown@@3PAUcvar_s@@A DD 01H DUP (?)		; cl_pitchdown
?cl_upspeed@@3PAUcvar_s@@A DD 01H DUP (?)		; cl_upspeed
?cl_forwardspeed@@3PAUcvar_s@@A DD 01H DUP (?)		; cl_forwardspeed
?cl_backspeed@@3PAUcvar_s@@A DD 01H DUP (?)		; cl_backspeed
?cl_sidespeed@@3PAUcvar_s@@A DD 01H DUP (?)		; cl_sidespeed
?cl_movespeedkey@@3PAUcvar_s@@A DD 01H DUP (?)		; cl_movespeedkey
?cl_yawspeed@@3PAUcvar_s@@A DD 01H DUP (?)		; cl_yawspeed
?cl_pitchspeed@@3PAUcvar_s@@A DD 01H DUP (?)		; cl_pitchspeed
?cl_anglespeedkey@@3PAUcvar_s@@A DD 01H DUP (?)		; cl_anglespeedkey
?in_mlook@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_mlook
?in_klook@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_klook
?in_jlook@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_jlook
?in_left@@3Ukbutton_s@@A DB 0cH DUP (?)			; in_left
?in_right@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_right
?in_forward@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_forward
?in_back@@3Ukbutton_s@@A DB 0cH DUP (?)			; in_back
?in_lookup@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_lookup
?in_lookdown@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_lookdown
?in_moveleft@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_moveleft
?in_moveright@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_moveright
?in_strafe@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_strafe
?in_speed@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_speed
?in_use@@3Ukbutton_s@@A DB 0cH DUP (?)			; in_use
?in_jump@@3Ukbutton_s@@A DB 0cH DUP (?)			; in_jump
?in_attack@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_attack
?in_attack2@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_attack2
?in_up@@3Ukbutton_s@@A DB 0cH DUP (?)			; in_up
?in_down@@3Ukbutton_s@@A DB 0cH DUP (?)			; in_down
?in_duck@@3Ukbutton_s@@A DB 0cH DUP (?)			; in_duck
?in_reload@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_reload
?in_alt1@@3Ukbutton_s@@A DB 0cH DUP (?)			; in_alt1
?in_score@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_score
?in_break@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_break
?in_graph@@3Ukbutton_s@@A DB 0cH DUP (?)		; in_graph
?g_kbkeys@@3PAUkblist_s@@A DD 01H DUP (?)		; g_kbkeys
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EX0@Z@Z				; `vector constructor iterator'
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_H@YGXPAXIHP6EX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
$L55256:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	cmp	DWORD PTR ___n$[ebp], 0
	jl	SHORT $L55257
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $L55256
$L55257:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?KB_ConvertString@@YAHPADPAPAD@Z		; KB_ConvertString
EXTRN	?gEngfuncs@@3Ucl_enginefuncs_s@@A:BYTE		; gEngfuncs
EXTRN	__chkstk:NEAR
EXTRN	_isalnum:NEAR
EXTRN	?Q_strlen@@YAHPBD@Z:NEAR			; Q_strlen
EXTRN	?Q_strncpy@@YAIPADPBDI@Z:NEAR			; Q_strncpy
EXTRN	_malloc:NEAR
;	COMDAT ?KB_ConvertString@@YAHPADPAPAD@Z
_TEXT	SEGMENT
_in$ = 8
_ppout$ = 12
_sz$ = -4096
_binding$ = -4160
_p$ = -4164
_pOut$ = -4168
_pEnd$ = -4172
_pBinding$ = -4176
?KB_ConvertString@@YAHPADPAPAD@Z PROC NEAR		; KB_ConvertString, COMDAT

; 120  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 4240				; 00001090H
	call	__chkstk
	push	ebx
	push	esi
	push	edi

; 121  : 	if( !ppout )

	cmp	DWORD PTR _ppout$[ebp], 0
	jne	SHORT $L71102

; 122  : 		return 0;

	xor	eax, eax
	jmp	$L71101
$L71102:

; 125  : 	char binding[64];
; 126  : 	char *p, *pOut, *pEnd;
; 127  : 	const char *pBinding;
; 128  : 
; 129  : 	*ppout = NULL;

	mov	eax, DWORD PTR _ppout$[ebp]
	mov	DWORD PTR [eax], 0

; 130  : 	p = in;

	mov	ecx, DWORD PTR _in$[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 131  : 	pOut = sz;

	lea	edx, DWORD PTR _sz$[ebp]
	mov	DWORD PTR _pOut$[ebp], edx
$L71110:

; 132  : 
; 133  : 	while( *p )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$L71111

; 135  : 		if( *p == '+' )

	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 43					; 0000002bH
	jne	$L71112

; 137  : 			pEnd = binding;

	lea	ecx, DWORD PTR _binding$[ebp]
	mov	DWORD PTR _pEnd$[ebp], ecx
$L71114:

; 138  : 			while( *p && ( isalnum( *p ) || ( pEnd == binding )) && (( pEnd - binding ) < 63 ))

	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $L71115
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	call	_isalnum
	add	esp, 4
	test	eax, eax
	jne	SHORT $L71116
	mov	eax, DWORD PTR _pEnd$[ebp]
	lea	ecx, DWORD PTR _binding$[ebp]
	cmp	eax, ecx
	jne	SHORT $L71115
$L71116:
	mov	edx, DWORD PTR _pEnd$[ebp]
	lea	eax, DWORD PTR _binding$[ebp]
	sub	edx, eax
	cmp	edx, 63					; 0000003fH
	jge	SHORT $L71115

; 140  : 				*pEnd++ = *p++;

	mov	ecx, DWORD PTR _pEnd$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _pEnd$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pEnd$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx

; 141  : 			}

	jmp	SHORT $L71114
$L71115:

; 142  : 
; 143  : 			*pEnd =  '\0';

	mov	eax, DWORD PTR _pEnd$[ebp]
	mov	BYTE PTR [eax], 0

; 144  : 
; 145  : 			pBinding = NULL;

	mov	DWORD PTR _pBinding$[ebp], 0

; 146  : 			if( Q_strlen( binding + 1 ) > 0 )

	lea	ecx, DWORD PTR _binding$[ebp+1]
	push	ecx
	call	?Q_strlen@@YAHPBD@Z			; Q_strlen
	add	esp, 4
	test	eax, eax
	jle	SHORT $L71117

; 148  : 				// See if there is a binding for binding?
; 149  : 				pBinding = gEngfuncs.Key_LookupBinding( binding + 1 );

	lea	edx, DWORD PTR _binding$[ebp+1]
	push	edx
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+292
	add	esp, 4
	mov	DWORD PTR _pBinding$[ebp], eax
$L71117:

; 151  : 
; 152  : 			if( pBinding )

	cmp	DWORD PTR _pBinding$[ebp], 0
	je	SHORT $L71118

; 154  : 				*pOut++ = '[';

	mov	eax, DWORD PTR _pOut$[ebp]
	mov	BYTE PTR [eax], 91			; 0000005bH
	mov	ecx, DWORD PTR _pOut$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pOut$[ebp], ecx

; 155  : 				pEnd = (char *)pBinding;

	mov	edx, DWORD PTR _pBinding$[ebp]
	mov	DWORD PTR _pEnd$[ebp], edx

; 157  : 			else

	jmp	SHORT $L71120
$L71118:

; 159  : 				pEnd = binding;

	lea	eax, DWORD PTR _binding$[ebp]
	mov	DWORD PTR _pEnd$[ebp], eax
$L71120:

; 161  : 
; 162  : 			while( *pEnd )

	mov	ecx, DWORD PTR _pEnd$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $L71123

; 164  : 				*pOut++ = *pEnd++;

	mov	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, DWORD PTR _pEnd$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pOut$[ebp]
	add	eax, 1
	mov	DWORD PTR _pOut$[ebp], eax
	mov	ecx, DWORD PTR _pEnd$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pEnd$[ebp], ecx

; 165  : 			}

	jmp	SHORT $L71120
$L71123:

; 166  : 
; 167  : 			if( pBinding )

	cmp	DWORD PTR _pBinding$[ebp], 0
	je	SHORT $L71124

; 169  : 				*pOut++ = ']';

	mov	edx, DWORD PTR _pOut$[ebp]
	mov	BYTE PTR [edx], 93			; 0000005dH
	mov	eax, DWORD PTR _pOut$[ebp]
	add	eax, 1
	mov	DWORD PTR _pOut$[ebp], eax
$L71124:

; 172  : 		else

	jmp	SHORT $L71125
$L71112:

; 174  : 			*pOut++ = *p++;

	mov	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _pOut$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pOut$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$L71125:

; 176  : 	}

	jmp	$L71110
$L71111:

; 177  : 
; 178  : 	*pOut = '\0';

	mov	eax, DWORD PTR _pOut$[ebp]
	mov	BYTE PTR [eax], 0

; 179  : 
; 180  : 	pOut = ( char * )malloc( Q_strlen( sz ) + 1 );

	lea	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	call	?Q_strlen@@YAHPBD@Z			; Q_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _pOut$[ebp], eax

; 181  : 	Q_strcpy( pOut, sz );

	push	99999					; 0001869fH
	lea	edx, DWORD PTR _sz$[ebp]
	push	edx
	mov	eax, DWORD PTR _pOut$[ebp]
	push	eax
	call	?Q_strncpy@@YAIPADPBDI@Z		; Q_strncpy
	add	esp, 12					; 0000000cH

; 182  : 	*ppout = pOut;

	mov	ecx, DWORD PTR _ppout$[ebp]
	mov	edx, DWORD PTR _pOut$[ebp]
	mov	DWORD PTR [ecx], edx

; 183  : 
; 184  : 	return 1;

	mov	eax, 1
$L71101:

; 185  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KB_ConvertString@@YAHPADPAPAD@Z ENDP			; KB_ConvertString
_TEXT	ENDS
PUBLIC	?KB_Find@@YAPAXPBD@Z				; KB_Find
EXTRN	?Q_strnicmp@@YAHPBD0H@Z:NEAR			; Q_strnicmp
;	COMDAT ?KB_Find@@YAPAXPBD@Z
_TEXT	SEGMENT
_name$ = 8
_p$ = -4
?KB_Find@@YAPAXPBD@Z PROC NEAR				; KB_Find, COMDAT

; 195  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 196  : 	kblist_t *p;
; 197  : 	p = g_kbkeys;

	mov	eax, DWORD PTR ?g_kbkeys@@3PAUkblist_s@@A ; g_kbkeys
	mov	DWORD PTR _p$[ebp], eax
$L71132:

; 198  : 
; 199  : 	while( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $L71133

; 201  : 		if( !Q_stricmp( name, p->name ))

	push	99999					; 0001869fH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	?Q_strnicmp@@YAHPBD0H@Z			; Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L71134

; 202  : 			return p->pkey;

	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	SHORT $L71129
$L71134:

; 203  : 
; 204  : 		p = p->next;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _p$[ebp], edx

; 205  : 	}

	jmp	SHORT $L71132
$L71133:

; 206  : 	return NULL;

	xor	eax, eax
$L71129:

; 207  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KB_Find@@YAPAXPBD@Z ENDP				; KB_Find
_TEXT	ENDS
PUBLIC	?KB_Add@@YAXPBDPAUkbutton_s@@@Z			; KB_Add
EXTRN	_memset:NEAR
;	COMDAT ?KB_Add@@YAXPBDPAUkbutton_s@@@Z
_TEXT	SEGMENT
_name$ = 8
_pkb$ = 12
_p$ = -4
_kb$ = -8
?KB_Add@@YAXPBDPAUkbutton_s@@@Z PROC NEAR		; KB_Add, COMDAT

; 217  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 218  : 	kblist_t *p;	
; 219  : 	kbutton_t *kb;
; 220  : 
; 221  : 	kb = (kbutton_t *)KB_Find( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?KB_Find@@YAPAXPBD@Z			; KB_Find
	add	esp, 4
	mov	DWORD PTR _kb$[ebp], eax

; 222  : 	
; 223  : 	if( kb ) return;

	cmp	DWORD PTR _kb$[ebp], 0
	je	SHORT $L71142
	jmp	SHORT $L71138
$L71142:

; 224  : 
; 225  : 	p = ( kblist_t *)malloc( sizeof( kblist_t ));

	push	40					; 00000028H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 226  : 	memset( p, 0, sizeof( *p ));

	push	40					; 00000028H
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 227  : 
; 228  : 	Q_strcpy( p->name, name );

	push	99999					; 0001869fH
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	call	?Q_strncpy@@YAIPADPBDI@Z		; Q_strncpy
	add	esp, 12					; 0000000cH

; 229  : 	p->pkey = pkb;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _pkb$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 230  : 
; 231  : 	p->next = g_kbkeys;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR ?g_kbkeys@@3PAUkblist_s@@A ; g_kbkeys
	mov	DWORD PTR [eax], ecx

; 232  : 	g_kbkeys = p;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR ?g_kbkeys@@3PAUkblist_s@@A, edx ; g_kbkeys
$L71138:

; 233  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KB_Add@@YAXPBDPAUkbutton_s@@@Z ENDP			; KB_Add
_TEXT	ENDS
PUBLIC	?KB_Init@@YAXXZ					; KB_Init
PUBLIC	??_C@_08DLKC@in_graph?$AA@			; `string'
PUBLIC	??_C@_08OHEM@in_mlook?$AA@			; `string'
PUBLIC	??_C@_08IHLG@in_jlook?$AA@			; `string'
;	COMDAT ??_C@_08DLKC@in_graph?$AA@
; File z:\xashxtsrc\client\input.cpp
CONST	SEGMENT
??_C@_08DLKC@in_graph?$AA@ DB 'in_graph', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OHEM@in_mlook?$AA@
CONST	SEGMENT
??_C@_08OHEM@in_mlook?$AA@ DB 'in_mlook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IHLG@in_jlook?$AA@
CONST	SEGMENT
??_C@_08IHLG@in_jlook?$AA@ DB 'in_jlook', 00H		; `string'
CONST	ENDS
;	COMDAT ?KB_Init@@YAXXZ
_TEXT	SEGMENT
?KB_Init@@YAXXZ PROC NEAR				; KB_Init, COMDAT

; 243  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 244  : 	g_kbkeys = NULL;

	mov	DWORD PTR ?g_kbkeys@@3PAUkblist_s@@A, 0	; g_kbkeys

; 245  : 
; 246  : 	KB_Add( "in_graph", &in_graph );

	push	OFFSET FLAT:?in_graph@@3Ukbutton_s@@A	; in_graph
	push	OFFSET FLAT:??_C@_08DLKC@in_graph?$AA@	; `string'
	call	?KB_Add@@YAXPBDPAUkbutton_s@@@Z		; KB_Add
	add	esp, 8

; 247  : 	KB_Add( "in_mlook", &in_mlook );

	push	OFFSET FLAT:?in_mlook@@3Ukbutton_s@@A	; in_mlook
	push	OFFSET FLAT:??_C@_08OHEM@in_mlook?$AA@	; `string'
	call	?KB_Add@@YAXPBDPAUkbutton_s@@@Z		; KB_Add
	add	esp, 8

; 248  : 	KB_Add( "in_jlook", &in_jlook );

	push	OFFSET FLAT:?in_jlook@@3Ukbutton_s@@A	; in_jlook
	push	OFFSET FLAT:??_C@_08IHLG@in_jlook?$AA@	; `string'
	call	?KB_Add@@YAXPBDPAUkbutton_s@@@Z		; KB_Add
	add	esp, 8

; 249  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KB_Init@@YAXXZ ENDP					; KB_Init
_TEXT	ENDS
PUBLIC	?KB_Shutdown@@YAXXZ				; KB_Shutdown
EXTRN	_free:NEAR
;	COMDAT ?KB_Shutdown@@YAXXZ
_TEXT	SEGMENT
_p$ = -4
_n$ = -8
?KB_Shutdown@@YAXXZ PROC NEAR				; KB_Shutdown, COMDAT

; 259  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 260  : 	kblist_t *p, *n;
; 261  : 	p = g_kbkeys;

	mov	eax, DWORD PTR ?g_kbkeys@@3PAUkblist_s@@A ; g_kbkeys
	mov	DWORD PTR _p$[ebp], eax
$L71157:

; 262  : 
; 263  : 	while( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $L71158

; 265  : 		n = p->next;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _n$[ebp], edx

; 266  : 		free( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_free
	add	esp, 4

; 267  : 		p = n;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 268  : 	}

	jmp	SHORT $L71157
$L71158:

; 269  : 	g_kbkeys = NULL;

	mov	DWORD PTR ?g_kbkeys@@3PAUkblist_s@@A, 0	; g_kbkeys

; 270  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KB_Shutdown@@YAXXZ ENDP				; KB_Shutdown
_TEXT	ENDS
PUBLIC	?KeyDown@@YAXPAUkbutton_s@@@Z			; KeyDown
PUBLIC	??_C@_0CO@OOGM@Three?5keys?5down?5for?5a?5button?5?8?$CFc@ ; `string'
EXTRN	?ALERT@@YAXW4ALERT_TYPE@@PADZZ:NEAR		; ALERT
EXTRN	?Q_atoi@@YAHPBD@Z:NEAR				; Q_atoi
;	COMDAT ??_C@_0CO@OOGM@Three?5keys?5down?5for?5a?5button?5?8?$CFc@
; File z:\xashxtsrc\client\input.cpp
CONST	SEGMENT
??_C@_0CO@OOGM@Three?5keys?5down?5for?5a?5button?5?8?$CFc@ DB 'Three keys'
	DB	' down for a button ''%c'' ''%c'' ''%c''!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?KeyDown@@YAXPAUkbutton_s@@@Z
_TEXT	SEGMENT
_b$ = 8
_c$ = -4
_k$ = -8
?KeyDown@@YAXPAUkbutton_s@@@Z PROC NEAR			; KeyDown, COMDAT

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 279  : 	char	*c;
; 280  : 	int	k;
; 281  : 
; 282  : 	c = CMD_ARGV( 1 );

	push	1
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+156
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax

; 283  : 
; 284  : 	if( c[0] )

	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $L71164

; 285  : 		k = Q_atoi( c );

	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	?Q_atoi@@YAHPBD@Z			; Q_atoi
	add	esp, 4
	mov	DWORD PTR _k$[ebp], eax

; 286  : 	else

	jmp	SHORT $L71165
$L71164:

; 287  : 		k = -1; // typed manually at the console for continuous down

	mov	DWORD PTR _k$[ebp], -1
$L71165:

; 288  : 
; 289  : 	if( k == b->down[0] || k == b->down[1] )

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $L71167
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $L71166
$L71167:

; 290  : 		return; // repeating key

	jmp	SHORT $L71161
$L71166:

; 291  : 	
; 292  : 	if( !b->down[0] )

	mov	ecx, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $L71168

; 294  : 		b->down[0] = k;

	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx], eax

; 296  : 	else if( !b->down[1] )

	jmp	SHORT $L71171
$L71168:
	mov	ecx, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $L71170

; 298  : 		b->down[1] = k;

	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [edx+4], eax

; 300  : 	else

	jmp	SHORT $L71171
$L71170:

; 302  : 		ALERT( at_aiconsole, "Three keys down for a button '%c' '%c' '%c'!\n", b->down[0], b->down[1], c );

	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET FLAT:??_C@_0CO@OOGM@Three?5keys?5down?5for?5a?5button?5?8?$CFc@ ; `string'
	push	2
	call	?ALERT@@YAXW4ALERT_TYPE@@PADZZ		; ALERT
	add	esp, 20					; 00000014H

; 303  : 		return;

	jmp	SHORT $L71161
$L71171:

; 305  : 	
; 306  : 	if( b->state & BUTTON_DOWN ) return;	// still down

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	test	ecx, ecx
	je	SHORT $L71173
	jmp	SHORT $L71161
$L71173:

; 307  : 	b->state |= (BUTTON_DOWN|IMPULSE_DOWN);	// down + impulse down

	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	or	al, 3
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
$L71161:

; 308  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KeyDown@@YAXPAUkbutton_s@@@Z ENDP			; KeyDown
_TEXT	ENDS
PUBLIC	?KeyUp@@YAXPAUkbutton_s@@@Z			; KeyUp
;	COMDAT ?KeyUp@@YAXPAUkbutton_s@@@Z
_TEXT	SEGMENT
_b$ = 8
_c$ = -4
_k$ = -8
?KeyUp@@YAXPAUkbutton_s@@@Z PROC NEAR			; KeyUp, COMDAT

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 317  : 	char	*c;
; 318  : 	int	k;	
; 319  : 
; 320  : 	c = CMD_ARGV( 1 );

	push	1
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+156
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax

; 321  : 
; 322  : 	if( c[0] )

	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $L71179

; 324  : 		k = Q_atoi( c );

	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	?Q_atoi@@YAHPBD@Z			; Q_atoi
	add	esp, 4
	mov	DWORD PTR _k$[ebp], eax

; 326  : 	else

	jmp	SHORT $L71180
$L71179:

; 328  : 		// typed manually at the console, assume for unsticking, so clear all
; 329  : 		b->down[0] = b->down[1] = 0;

	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx], 0

; 330  : 		b->state = IMPULSE_UP; // impulse up

	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+8], 4

; 331  : 		return;

	jmp	SHORT $L71176
$L71180:

; 333  : 
; 334  : 	if( b->down[0] == k )

	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _k$[ebp]
	jne	SHORT $L71181

; 336  : 		b->down[0] = 0;

	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx], 0

; 338  : 	else if( b->down[1] == k )

	jmp	SHORT $L71184
$L71181:
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _k$[ebp]
	jne	SHORT $L71183

; 340  : 		b->down[1] = 0;

	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+4], 0

; 342  : 	else

	jmp	SHORT $L71184
$L71183:

; 344  : 		// key up without coresponding down (menu pass through)
; 345  : 		return;

	jmp	SHORT $L71176
$L71184:

; 347  : 
; 348  : 	if( b->down[0] || b->down[1] )

	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L71186
	mov	ecx, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $L71185
$L71186:

; 350  : 		// some other key is still holding it down
; 351  : 		return;

	jmp	SHORT $L71176
$L71185:

; 353  : 
; 354  : 	if( !( b->state & BUTTON_DOWN )) return;// still up (this should not happen)

	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 1
	test	eax, eax
	jne	SHORT $L71187
	jmp	SHORT $L71176
$L71187:

; 355  : 
; 356  : 	b->state &= ~BUTTON_DOWN;	// now up

	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+8], edx

; 357  : 	b->state |= IMPULSE_UP;	// impulse up

	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	or	edx, 4
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+8], edx
$L71176:

; 358  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KeyUp@@YAXPAUkbutton_s@@@Z ENDP			; KeyUp
_TEXT	ENDS
PUBLIC	?IN_BreakDown@@YAXXZ				; IN_BreakDown
;	COMDAT ?IN_BreakDown@@YAXXZ
_TEXT	SEGMENT
?IN_BreakDown@@YAXXZ PROC NEAR				; IN_BreakDown, COMDAT

; 360  : void IN_BreakDown( void )	{ KeyDown( &in_break ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_break@@3Ukbutton_s@@A	; in_break
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_BreakDown@@YAXXZ ENDP				; IN_BreakDown
_TEXT	ENDS
PUBLIC	?IN_BreakUp@@YAXXZ				; IN_BreakUp
;	COMDAT ?IN_BreakUp@@YAXXZ
_TEXT	SEGMENT
?IN_BreakUp@@YAXXZ PROC NEAR				; IN_BreakUp, COMDAT

; 361  : void IN_BreakUp( void )	{ KeyUp( &in_break ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_break@@3Ukbutton_s@@A	; in_break
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_BreakUp@@YAXXZ ENDP					; IN_BreakUp
_TEXT	ENDS
PUBLIC	?IN_KLookDown@@YAXXZ				; IN_KLookDown
;	COMDAT ?IN_KLookDown@@YAXXZ
_TEXT	SEGMENT
?IN_KLookDown@@YAXXZ PROC NEAR				; IN_KLookDown, COMDAT

; 362  : void IN_KLookDown( void )	{ KeyDown( &in_klook ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_klook@@3Ukbutton_s@@A	; in_klook
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_KLookDown@@YAXXZ ENDP				; IN_KLookDown
_TEXT	ENDS
PUBLIC	?IN_KLookUp@@YAXXZ				; IN_KLookUp
;	COMDAT ?IN_KLookUp@@YAXXZ
_TEXT	SEGMENT
?IN_KLookUp@@YAXXZ PROC NEAR				; IN_KLookUp, COMDAT

; 363  : void IN_KLookUp( void )	{ KeyUp( &in_klook ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_klook@@3Ukbutton_s@@A	; in_klook
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_KLookUp@@YAXXZ ENDP					; IN_KLookUp
_TEXT	ENDS
PUBLIC	?IN_JLookDown@@YAXXZ				; IN_JLookDown
;	COMDAT ?IN_JLookDown@@YAXXZ
_TEXT	SEGMENT
?IN_JLookDown@@YAXXZ PROC NEAR				; IN_JLookDown, COMDAT

; 364  : void IN_JLookDown( void )	{ KeyDown( &in_jlook ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_jlook@@3Ukbutton_s@@A	; in_jlook
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_JLookDown@@YAXXZ ENDP				; IN_JLookDown
_TEXT	ENDS
PUBLIC	?IN_JLookUp@@YAXXZ				; IN_JLookUp
;	COMDAT ?IN_JLookUp@@YAXXZ
_TEXT	SEGMENT
?IN_JLookUp@@YAXXZ PROC NEAR				; IN_JLookUp, COMDAT

; 365  : void IN_JLookUp( void )	{ KeyUp( &in_jlook ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_jlook@@3Ukbutton_s@@A	; in_jlook
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_JLookUp@@YAXXZ ENDP					; IN_JLookUp
_TEXT	ENDS
PUBLIC	?IN_MLookDown@@YAXXZ				; IN_MLookDown
;	COMDAT ?IN_MLookDown@@YAXXZ
_TEXT	SEGMENT
?IN_MLookDown@@YAXXZ PROC NEAR				; IN_MLookDown, COMDAT

; 366  : void IN_MLookDown( void )	{ KeyDown( &in_mlook ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_mlook@@3Ukbutton_s@@A	; in_mlook
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_MLookDown@@YAXXZ ENDP				; IN_MLookDown
_TEXT	ENDS
PUBLIC	?IN_UpDown@@YAXXZ				; IN_UpDown
;	COMDAT ?IN_UpDown@@YAXXZ
_TEXT	SEGMENT
?IN_UpDown@@YAXXZ PROC NEAR				; IN_UpDown, COMDAT

; 367  : void IN_UpDown( void )	{ KeyDown( &in_up ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_up@@3Ukbutton_s@@A	; in_up
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_UpDown@@YAXXZ ENDP					; IN_UpDown
_TEXT	ENDS
PUBLIC	?IN_UpUp@@YAXXZ					; IN_UpUp
;	COMDAT ?IN_UpUp@@YAXXZ
_TEXT	SEGMENT
?IN_UpUp@@YAXXZ PROC NEAR				; IN_UpUp, COMDAT

; 368  : void IN_UpUp( void )	{ KeyUp( &in_up ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_up@@3Ukbutton_s@@A	; in_up
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_UpUp@@YAXXZ ENDP					; IN_UpUp
_TEXT	ENDS
PUBLIC	?IN_DownDown@@YAXXZ				; IN_DownDown
;	COMDAT ?IN_DownDown@@YAXXZ
_TEXT	SEGMENT
?IN_DownDown@@YAXXZ PROC NEAR				; IN_DownDown, COMDAT

; 369  : void IN_DownDown( void )	{ KeyDown( &in_down ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_down@@3Ukbutton_s@@A	; in_down
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_DownDown@@YAXXZ ENDP				; IN_DownDown
_TEXT	ENDS
PUBLIC	?IN_DownUp@@YAXXZ				; IN_DownUp
;	COMDAT ?IN_DownUp@@YAXXZ
_TEXT	SEGMENT
?IN_DownUp@@YAXXZ PROC NEAR				; IN_DownUp, COMDAT

; 370  : void IN_DownUp( void )	{ KeyUp( &in_down ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_down@@3Ukbutton_s@@A	; in_down
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_DownUp@@YAXXZ ENDP					; IN_DownUp
_TEXT	ENDS
PUBLIC	?IN_LeftDown@@YAXXZ				; IN_LeftDown
;	COMDAT ?IN_LeftDown@@YAXXZ
_TEXT	SEGMENT
?IN_LeftDown@@YAXXZ PROC NEAR				; IN_LeftDown, COMDAT

; 371  : void IN_LeftDown( void )	{ KeyDown( &in_left ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_left@@3Ukbutton_s@@A	; in_left
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_LeftDown@@YAXXZ ENDP				; IN_LeftDown
_TEXT	ENDS
PUBLIC	?IN_LeftUp@@YAXXZ				; IN_LeftUp
;	COMDAT ?IN_LeftUp@@YAXXZ
_TEXT	SEGMENT
?IN_LeftUp@@YAXXZ PROC NEAR				; IN_LeftUp, COMDAT

; 372  : void IN_LeftUp( void )	{ KeyUp( &in_left ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_left@@3Ukbutton_s@@A	; in_left
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_LeftUp@@YAXXZ ENDP					; IN_LeftUp
_TEXT	ENDS
PUBLIC	?IN_RightDown@@YAXXZ				; IN_RightDown
;	COMDAT ?IN_RightDown@@YAXXZ
_TEXT	SEGMENT
?IN_RightDown@@YAXXZ PROC NEAR				; IN_RightDown, COMDAT

; 373  : void IN_RightDown( void )	{ KeyDown( &in_right ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_right@@3Ukbutton_s@@A	; in_right
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_RightDown@@YAXXZ ENDP				; IN_RightDown
_TEXT	ENDS
PUBLIC	?IN_RightUp@@YAXXZ				; IN_RightUp
;	COMDAT ?IN_RightUp@@YAXXZ
_TEXT	SEGMENT
?IN_RightUp@@YAXXZ PROC NEAR				; IN_RightUp, COMDAT

; 374  : void IN_RightUp( void )	{ KeyUp( &in_right ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_right@@3Ukbutton_s@@A	; in_right
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_RightUp@@YAXXZ ENDP					; IN_RightUp
_TEXT	ENDS
PUBLIC	?IN_ForwardDown@@YAXXZ				; IN_ForwardDown
;	COMDAT ?IN_ForwardDown@@YAXXZ
_TEXT	SEGMENT
?IN_ForwardDown@@YAXXZ PROC NEAR			; IN_ForwardDown, COMDAT

; 375  : void IN_ForwardDown( void )	{ KeyDown( &in_forward ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_forward@@3Ukbutton_s@@A	; in_forward
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_ForwardDown@@YAXXZ ENDP				; IN_ForwardDown
_TEXT	ENDS
PUBLIC	?IN_ForwardUp@@YAXXZ				; IN_ForwardUp
;	COMDAT ?IN_ForwardUp@@YAXXZ
_TEXT	SEGMENT
?IN_ForwardUp@@YAXXZ PROC NEAR				; IN_ForwardUp, COMDAT

; 376  : void IN_ForwardUp( void )	{ KeyUp( &in_forward ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_forward@@3Ukbutton_s@@A	; in_forward
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_ForwardUp@@YAXXZ ENDP				; IN_ForwardUp
_TEXT	ENDS
PUBLIC	?IN_BackDown@@YAXXZ				; IN_BackDown
;	COMDAT ?IN_BackDown@@YAXXZ
_TEXT	SEGMENT
?IN_BackDown@@YAXXZ PROC NEAR				; IN_BackDown, COMDAT

; 377  : void IN_BackDown( void )	{ KeyDown( &in_back ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_back@@3Ukbutton_s@@A	; in_back
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_BackDown@@YAXXZ ENDP				; IN_BackDown
_TEXT	ENDS
PUBLIC	?IN_BackUp@@YAXXZ				; IN_BackUp
;	COMDAT ?IN_BackUp@@YAXXZ
_TEXT	SEGMENT
?IN_BackUp@@YAXXZ PROC NEAR				; IN_BackUp, COMDAT

; 378  : void IN_BackUp( void )	{ KeyUp( &in_back ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_back@@3Ukbutton_s@@A	; in_back
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_BackUp@@YAXXZ ENDP					; IN_BackUp
_TEXT	ENDS
PUBLIC	?IN_LookupDown@@YAXXZ				; IN_LookupDown
;	COMDAT ?IN_LookupDown@@YAXXZ
_TEXT	SEGMENT
?IN_LookupDown@@YAXXZ PROC NEAR				; IN_LookupDown, COMDAT

; 379  : void IN_LookupDown( void )	{ KeyDown( &in_lookup ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_lookup@@3Ukbutton_s@@A	; in_lookup
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_LookupDown@@YAXXZ ENDP				; IN_LookupDown
_TEXT	ENDS
PUBLIC	?IN_LookupUp@@YAXXZ				; IN_LookupUp
;	COMDAT ?IN_LookupUp@@YAXXZ
_TEXT	SEGMENT
?IN_LookupUp@@YAXXZ PROC NEAR				; IN_LookupUp, COMDAT

; 380  : void IN_LookupUp( void )	{ KeyUp( &in_lookup ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_lookup@@3Ukbutton_s@@A	; in_lookup
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_LookupUp@@YAXXZ ENDP				; IN_LookupUp
_TEXT	ENDS
PUBLIC	?IN_LookdownDown@@YAXXZ				; IN_LookdownDown
;	COMDAT ?IN_LookdownDown@@YAXXZ
_TEXT	SEGMENT
?IN_LookdownDown@@YAXXZ PROC NEAR			; IN_LookdownDown, COMDAT

; 381  : void IN_LookdownDown( void )	{ KeyDown( &in_lookdown ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_lookdown@@3Ukbutton_s@@A ; in_lookdown
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_LookdownDown@@YAXXZ ENDP				; IN_LookdownDown
_TEXT	ENDS
PUBLIC	?IN_LookdownUp@@YAXXZ				; IN_LookdownUp
;	COMDAT ?IN_LookdownUp@@YAXXZ
_TEXT	SEGMENT
?IN_LookdownUp@@YAXXZ PROC NEAR				; IN_LookdownUp, COMDAT

; 382  : void IN_LookdownUp( void )	{ KeyUp( &in_lookdown ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_lookdown@@3Ukbutton_s@@A ; in_lookdown
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_LookdownUp@@YAXXZ ENDP				; IN_LookdownUp
_TEXT	ENDS
PUBLIC	?IN_MoveleftDown@@YAXXZ				; IN_MoveleftDown
;	COMDAT ?IN_MoveleftDown@@YAXXZ
_TEXT	SEGMENT
?IN_MoveleftDown@@YAXXZ PROC NEAR			; IN_MoveleftDown, COMDAT

; 383  : void IN_MoveleftDown( void )	{ KeyDown( &in_moveleft ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_moveleft@@3Ukbutton_s@@A ; in_moveleft
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_MoveleftDown@@YAXXZ ENDP				; IN_MoveleftDown
_TEXT	ENDS
PUBLIC	?IN_MoveleftUp@@YAXXZ				; IN_MoveleftUp
;	COMDAT ?IN_MoveleftUp@@YAXXZ
_TEXT	SEGMENT
?IN_MoveleftUp@@YAXXZ PROC NEAR				; IN_MoveleftUp, COMDAT

; 384  : void IN_MoveleftUp( void )	{ KeyUp( &in_moveleft ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_moveleft@@3Ukbutton_s@@A ; in_moveleft
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_MoveleftUp@@YAXXZ ENDP				; IN_MoveleftUp
_TEXT	ENDS
PUBLIC	?IN_MoverightDown@@YAXXZ			; IN_MoverightDown
;	COMDAT ?IN_MoverightDown@@YAXXZ
_TEXT	SEGMENT
?IN_MoverightDown@@YAXXZ PROC NEAR			; IN_MoverightDown, COMDAT

; 385  : void IN_MoverightDown( void )	{ KeyDown( &in_moveright ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_moveright@@3Ukbutton_s@@A ; in_moveright
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_MoverightDown@@YAXXZ ENDP				; IN_MoverightDown
_TEXT	ENDS
PUBLIC	?IN_MoverightUp@@YAXXZ				; IN_MoverightUp
;	COMDAT ?IN_MoverightUp@@YAXXZ
_TEXT	SEGMENT
?IN_MoverightUp@@YAXXZ PROC NEAR			; IN_MoverightUp, COMDAT

; 386  : void IN_MoverightUp( void )	{ KeyUp( &in_moveright ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_moveright@@3Ukbutton_s@@A ; in_moveright
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_MoverightUp@@YAXXZ ENDP				; IN_MoverightUp
_TEXT	ENDS
PUBLIC	?IN_SpeedDown@@YAXXZ				; IN_SpeedDown
;	COMDAT ?IN_SpeedDown@@YAXXZ
_TEXT	SEGMENT
?IN_SpeedDown@@YAXXZ PROC NEAR				; IN_SpeedDown, COMDAT

; 387  : void IN_SpeedDown( void )	{ KeyDown( &in_speed ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_speed@@3Ukbutton_s@@A	; in_speed
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_SpeedDown@@YAXXZ ENDP				; IN_SpeedDown
_TEXT	ENDS
PUBLIC	?IN_SpeedUp@@YAXXZ				; IN_SpeedUp
;	COMDAT ?IN_SpeedUp@@YAXXZ
_TEXT	SEGMENT
?IN_SpeedUp@@YAXXZ PROC NEAR				; IN_SpeedUp, COMDAT

; 388  : void IN_SpeedUp( void )	{ KeyUp( &in_speed ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_speed@@3Ukbutton_s@@A	; in_speed
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_SpeedUp@@YAXXZ ENDP					; IN_SpeedUp
_TEXT	ENDS
PUBLIC	?IN_StrafeDown@@YAXXZ				; IN_StrafeDown
;	COMDAT ?IN_StrafeDown@@YAXXZ
_TEXT	SEGMENT
?IN_StrafeDown@@YAXXZ PROC NEAR				; IN_StrafeDown, COMDAT

; 389  : void IN_StrafeDown( void )	{ KeyDown( &in_strafe ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_strafe@@3Ukbutton_s@@A	; in_strafe
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_StrafeDown@@YAXXZ ENDP				; IN_StrafeDown
_TEXT	ENDS
PUBLIC	?IN_StrafeUp@@YAXXZ				; IN_StrafeUp
;	COMDAT ?IN_StrafeUp@@YAXXZ
_TEXT	SEGMENT
?IN_StrafeUp@@YAXXZ PROC NEAR				; IN_StrafeUp, COMDAT

; 390  : void IN_StrafeUp( void )	{ KeyUp( &in_strafe ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_strafe@@3Ukbutton_s@@A	; in_strafe
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_StrafeUp@@YAXXZ ENDP				; IN_StrafeUp
_TEXT	ENDS
PUBLIC	?IN_Attack2Down@@YAXXZ				; IN_Attack2Down
;	COMDAT ?IN_Attack2Down@@YAXXZ
_TEXT	SEGMENT
?IN_Attack2Down@@YAXXZ PROC NEAR			; IN_Attack2Down, COMDAT

; 391  : void IN_Attack2Down( void )	{ KeyDown( &in_attack2 ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_attack2@@3Ukbutton_s@@A	; in_attack2
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_Attack2Down@@YAXXZ ENDP				; IN_Attack2Down
_TEXT	ENDS
PUBLIC	?IN_Attack2Up@@YAXXZ				; IN_Attack2Up
;	COMDAT ?IN_Attack2Up@@YAXXZ
_TEXT	SEGMENT
?IN_Attack2Up@@YAXXZ PROC NEAR				; IN_Attack2Up, COMDAT

; 392  : void IN_Attack2Up( void )	{ KeyUp( &in_attack2 ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_attack2@@3Ukbutton_s@@A	; in_attack2
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_Attack2Up@@YAXXZ ENDP				; IN_Attack2Up
_TEXT	ENDS
PUBLIC	?IN_UseDown@@YAXXZ				; IN_UseDown
;	COMDAT ?IN_UseDown@@YAXXZ
_TEXT	SEGMENT
?IN_UseDown@@YAXXZ PROC NEAR				; IN_UseDown, COMDAT

; 393  : void IN_UseDown( void )	{ KeyDown( &in_use ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_use@@3Ukbutton_s@@A	; in_use
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_UseDown@@YAXXZ ENDP					; IN_UseDown
_TEXT	ENDS
PUBLIC	?IN_UseUp@@YAXXZ				; IN_UseUp
;	COMDAT ?IN_UseUp@@YAXXZ
_TEXT	SEGMENT
?IN_UseUp@@YAXXZ PROC NEAR				; IN_UseUp, COMDAT

; 394  : void IN_UseUp( void )	{ KeyUp( &in_use ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_use@@3Ukbutton_s@@A	; in_use
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_UseUp@@YAXXZ ENDP					; IN_UseUp
_TEXT	ENDS
PUBLIC	?IN_JumpDown@@YAXXZ				; IN_JumpDown
;	COMDAT ?IN_JumpDown@@YAXXZ
_TEXT	SEGMENT
?IN_JumpDown@@YAXXZ PROC NEAR				; IN_JumpDown, COMDAT

; 395  : void IN_JumpDown( void )	{ KeyDown( &in_jump ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_jump@@3Ukbutton_s@@A	; in_jump
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_JumpDown@@YAXXZ ENDP				; IN_JumpDown
_TEXT	ENDS
PUBLIC	?IN_JumpUp@@YAXXZ				; IN_JumpUp
;	COMDAT ?IN_JumpUp@@YAXXZ
_TEXT	SEGMENT
?IN_JumpUp@@YAXXZ PROC NEAR				; IN_JumpUp, COMDAT

; 396  : void IN_JumpUp( void )	{ KeyUp( &in_jump ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_jump@@3Ukbutton_s@@A	; in_jump
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_JumpUp@@YAXXZ ENDP					; IN_JumpUp
_TEXT	ENDS
PUBLIC	?IN_DuckDown@@YAXXZ				; IN_DuckDown
;	COMDAT ?IN_DuckDown@@YAXXZ
_TEXT	SEGMENT
?IN_DuckDown@@YAXXZ PROC NEAR				; IN_DuckDown, COMDAT

; 397  : void IN_DuckDown( void )	{ KeyDown( &in_duck ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_duck@@3Ukbutton_s@@A	; in_duck
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_DuckDown@@YAXXZ ENDP				; IN_DuckDown
_TEXT	ENDS
PUBLIC	?IN_DuckUp@@YAXXZ				; IN_DuckUp
;	COMDAT ?IN_DuckUp@@YAXXZ
_TEXT	SEGMENT
?IN_DuckUp@@YAXXZ PROC NEAR				; IN_DuckUp, COMDAT

; 398  : void IN_DuckUp( void )	{ KeyUp( &in_duck ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_duck@@3Ukbutton_s@@A	; in_duck
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_DuckUp@@YAXXZ ENDP					; IN_DuckUp
_TEXT	ENDS
PUBLIC	?IN_ReloadDown@@YAXXZ				; IN_ReloadDown
;	COMDAT ?IN_ReloadDown@@YAXXZ
_TEXT	SEGMENT
?IN_ReloadDown@@YAXXZ PROC NEAR				; IN_ReloadDown, COMDAT

; 399  : void IN_ReloadDown( void )	{ KeyDown( &in_reload ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_reload@@3Ukbutton_s@@A	; in_reload
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_ReloadDown@@YAXXZ ENDP				; IN_ReloadDown
_TEXT	ENDS
PUBLIC	?IN_ReloadUp@@YAXXZ				; IN_ReloadUp
;	COMDAT ?IN_ReloadUp@@YAXXZ
_TEXT	SEGMENT
?IN_ReloadUp@@YAXXZ PROC NEAR				; IN_ReloadUp, COMDAT

; 400  : void IN_ReloadUp( void )	{ KeyUp( &in_reload ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_reload@@3Ukbutton_s@@A	; in_reload
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_ReloadUp@@YAXXZ ENDP				; IN_ReloadUp
_TEXT	ENDS
PUBLIC	?IN_Alt1Down@@YAXXZ				; IN_Alt1Down
;	COMDAT ?IN_Alt1Down@@YAXXZ
_TEXT	SEGMENT
?IN_Alt1Down@@YAXXZ PROC NEAR				; IN_Alt1Down, COMDAT

; 401  : void IN_Alt1Down( void )	{ KeyDown( &in_alt1 ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_alt1@@3Ukbutton_s@@A	; in_alt1
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_Alt1Down@@YAXXZ ENDP				; IN_Alt1Down
_TEXT	ENDS
PUBLIC	?IN_Alt1Up@@YAXXZ				; IN_Alt1Up
;	COMDAT ?IN_Alt1Up@@YAXXZ
_TEXT	SEGMENT
?IN_Alt1Up@@YAXXZ PROC NEAR				; IN_Alt1Up, COMDAT

; 402  : void IN_Alt1Up( void )	{ KeyUp( &in_alt1 ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_alt1@@3Ukbutton_s@@A	; in_alt1
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_Alt1Up@@YAXXZ ENDP					; IN_Alt1Up
_TEXT	ENDS
PUBLIC	?IN_GraphDown@@YAXXZ				; IN_GraphDown
;	COMDAT ?IN_GraphDown@@YAXXZ
_TEXT	SEGMENT
?IN_GraphDown@@YAXXZ PROC NEAR				; IN_GraphDown, COMDAT

; 403  : void IN_GraphDown( void )	{ KeyDown( &in_graph ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_graph@@3Ukbutton_s@@A	; in_graph
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_GraphDown@@YAXXZ ENDP				; IN_GraphDown
_TEXT	ENDS
PUBLIC	?IN_GraphUp@@YAXXZ				; IN_GraphUp
;	COMDAT ?IN_GraphUp@@YAXXZ
_TEXT	SEGMENT
?IN_GraphUp@@YAXXZ PROC NEAR				; IN_GraphUp, COMDAT

; 404  : void IN_GraphUp( void )	{ KeyUp( &in_graph ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_graph@@3Ukbutton_s@@A	; in_graph
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_GraphUp@@YAXXZ ENDP					; IN_GraphUp
_TEXT	ENDS
PUBLIC	?IN_AttackDown@@YAXXZ				; IN_AttackDown
;	COMDAT ?IN_AttackDown@@YAXXZ
_TEXT	SEGMENT
?IN_AttackDown@@YAXXZ PROC NEAR				; IN_AttackDown, COMDAT

; 405  : void IN_AttackDown( void )	{ KeyDown( &in_attack ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_attack@@3Ukbutton_s@@A	; in_attack
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_AttackDown@@YAXXZ ENDP				; IN_AttackDown
_TEXT	ENDS
PUBLIC	?IN_AttackUp@@YAXXZ				; IN_AttackUp
;	COMDAT ?IN_AttackUp@@YAXXZ
_TEXT	SEGMENT
?IN_AttackUp@@YAXXZ PROC NEAR				; IN_AttackUp, COMDAT

; 406  : void IN_AttackUp( void )	{ KeyUp( &in_attack ); in_cancel = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_attack@@3Ukbutton_s@@A	; in_attack
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	mov	DWORD PTR ?in_cancel@@3HA, 0		; in_cancel
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_AttackUp@@YAXXZ ENDP				; IN_AttackUp
_TEXT	ENDS
PUBLIC	?IN_ScoreDown@@YAXXZ				; IN_ScoreDown
;	COMDAT ?IN_ScoreDown@@YAXXZ
_TEXT	SEGMENT
?IN_ScoreDown@@YAXXZ PROC NEAR				; IN_ScoreDown, COMDAT

; 407  : void IN_ScoreDown(void)	{ KeyDown(&in_score); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_score@@3Ukbutton_s@@A	; in_score
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_ScoreDown@@YAXXZ ENDP				; IN_ScoreDown
_TEXT	ENDS
PUBLIC	?IN_ScoreUp@@YAXXZ				; IN_ScoreUp
;	COMDAT ?IN_ScoreUp@@YAXXZ
_TEXT	SEGMENT
?IN_ScoreUp@@YAXXZ PROC NEAR				; IN_ScoreUp, COMDAT

; 408  : void IN_ScoreUp(void)	{ KeyUp(&in_score); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	OFFSET FLAT:?in_score@@3Ukbutton_s@@A	; in_score
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_ScoreUp@@YAXXZ ENDP					; IN_ScoreUp
_TEXT	ENDS
PUBLIC	?IN_Cancel@@YAXXZ				; IN_Cancel
;	COMDAT ?IN_Cancel@@YAXXZ
_TEXT	SEGMENT
?IN_Cancel@@YAXXZ PROC NEAR				; IN_Cancel, COMDAT

; 409  : void IN_Cancel( void )	{ in_cancel = 1; }	// Special handling

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR ?in_cancel@@3HA, 1		; in_cancel
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_Cancel@@YAXXZ ENDP					; IN_Cancel
_TEXT	ENDS
PUBLIC	?IN_Impulse@@YAXXZ				; IN_Impulse
;	COMDAT ?IN_Impulse@@YAXXZ
_TEXT	SEGMENT
?IN_Impulse@@YAXXZ PROC NEAR				; IN_Impulse, COMDAT

; 410  : void IN_Impulse( void )	{ in_impulse = Q_atoi( CMD_ARGV( 1 )); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	1
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+156
	add	esp, 4
	push	eax
	call	?Q_atoi@@YAHPBD@Z			; Q_atoi
	add	esp, 4
	mov	DWORD PTR ?in_impulse@@3HA, eax		; in_impulse
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_Impulse@@YAXXZ ENDP					; IN_Impulse
_TEXT	ENDS
PUBLIC	__real@4@00000000000000000000
PUBLIC	?IN_MLookUp@@YAXXZ				; IN_MLookUp
EXTRN	__fltused:NEAR
EXTRN	?V_StartPitchDrift@@YAXXZ:NEAR			; V_StartPitchDrift
;	COMDAT __real@4@00000000000000000000
; File z:\xashxtsrc\client\input.cpp
CONST	SEGMENT
__real@4@00000000000000000000 DD 000000000r	; 0
CONST	ENDS
;	COMDAT ?IN_MLookUp@@YAXXZ
_TEXT	SEGMENT
?IN_MLookUp@@YAXXZ PROC NEAR				; IN_MLookUp, COMDAT

; 413  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 414  : 	KeyUp( &in_mlook );

	push	OFFSET FLAT:?in_mlook@@3Ukbutton_s@@A	; in_mlook
	call	?KeyUp@@YAXPAUkbutton_s@@@Z		; KeyUp
	add	esp, 4

; 415  : 
; 416  : 	if(!( in_mlook.state & 1 ) && lookspring->value )

	mov	eax, DWORD PTR ?in_mlook@@3Ukbutton_s@@A+8
	and	eax, 1
	test	eax, eax
	jne	SHORT $L71344
	mov	ecx, DWORD PTR ?lookspring@@3PAUcvar_s@@A ; lookspring
	fld	DWORD PTR [ecx+12]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L71344

; 418  : 		V_StartPitchDrift();

	call	?V_StartPitchDrift@@YAXXZ		; V_StartPitchDrift
$L71344:

; 420  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IN_MLookUp@@YAXXZ ENDP					; IN_MLookUp
_TEXT	ENDS
PUBLIC	?CL_KeyState@@YAMPAUkbutton_s@@@Z		; CL_KeyState
;	COMDAT ?CL_KeyState@@YAMPAUkbutton_s@@@Z
_TEXT	SEGMENT
_key$ = 8
_val$ = -4
_impulsedown$ = -8
_impulseup$ = -12
_down$ = -16
?CL_KeyState@@YAMPAUkbutton_s@@@Z PROC NEAR		; CL_KeyState, COMDAT

; 433  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 434  : 	float	val = 0.0f;

	mov	DWORD PTR _val$[ebp], 0

; 435  : 	int	impulsedown, impulseup, down;
; 436  : 	
; 437  : 	impulsedown = key->state & IMPULSE_DOWN;

	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	mov	DWORD PTR _impulsedown$[ebp], ecx

; 438  : 	impulseup	= key->state & IMPULSE_UP;

	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 4
	mov	DWORD PTR _impulseup$[ebp], eax

; 439  : 	down = key->state & BUTTON_DOWN;

	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 1
	mov	DWORD PTR _down$[ebp], edx

; 440  : 	
; 441  : 	if( impulsedown && !impulseup )

	cmp	DWORD PTR _impulsedown$[ebp], 0
	je	SHORT $L71352
	cmp	DWORD PTR _impulseup$[ebp], 0
	jne	SHORT $L71352

; 443  : 		// pressed and held this frame?
; 444  : 		val = down ? 0.5f : 0.0f;

	cmp	DWORD PTR _down$[ebp], 0
	je	SHORT $L72062
	mov	DWORD PTR -20+[ebp], 1056964608		; 3f000000H
	jmp	SHORT $L72063
$L72062:
	mov	DWORD PTR -20+[ebp], 0
$L72063:
	mov	eax, DWORD PTR -20+[ebp]
	mov	DWORD PTR _val$[ebp], eax
$L71352:

; 446  : 
; 447  : 	if( impulseup && !impulsedown )

	cmp	DWORD PTR _impulseup$[ebp], 0
	je	SHORT $L71353
	cmp	DWORD PTR _impulsedown$[ebp], 0
	jne	SHORT $L71353

; 449  : 		// released this frame?
; 450  : 		val = down ? 0.0f : 0.0f;

	cmp	DWORD PTR _down$[ebp], 0
	je	SHORT $L72064
	mov	DWORD PTR -24+[ebp], 0
	jmp	SHORT $L72065
$L72064:
	mov	DWORD PTR -24+[ebp], 0
$L72065:
	mov	ecx, DWORD PTR -24+[ebp]
	mov	DWORD PTR _val$[ebp], ecx
$L71353:

; 452  : 
; 453  : 	if( !impulsedown && !impulseup )

	cmp	DWORD PTR _impulsedown$[ebp], 0
	jne	SHORT $L71354
	cmp	DWORD PTR _impulseup$[ebp], 0
	jne	SHORT $L71354

; 455  : 		// held the entire frame?
; 456  : 		val = down ? 1.0f : 0.0f;

	cmp	DWORD PTR _down$[ebp], 0
	je	SHORT $L72066
	mov	DWORD PTR -28+[ebp], 1065353216		; 3f800000H
	jmp	SHORT $L72067
$L72066:
	mov	DWORD PTR -28+[ebp], 0
$L72067:
	mov	edx, DWORD PTR -28+[ebp]
	mov	DWORD PTR _val$[ebp], edx
$L71354:

; 458  : 
; 459  : 	if( impulsedown && impulseup )

	cmp	DWORD PTR _impulsedown$[ebp], 0
	je	SHORT $L71357
	cmp	DWORD PTR _impulseup$[ebp], 0
	je	SHORT $L71357

; 461  : 		if( down )

	cmp	DWORD PTR _down$[ebp], 0
	je	SHORT $L71356

; 463  : 			// released and re-pressed this frame
; 464  : 			val = 0.75f;	

	mov	DWORD PTR _val$[ebp], 1061158912	; 3f400000H

; 466  : 		else

	jmp	SHORT $L71357
$L71356:

; 468  : 			// pressed and released this frame
; 469  : 			val = 0.25f;	

	mov	DWORD PTR _val$[ebp], 1048576000	; 3e800000H
$L71357:

; 472  : 
; 473  : 	// clear impulses
; 474  : 	key->state &= BUTTON_DOWN;		

	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	mov	edx, DWORD PTR _key$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 475  : 
; 476  : 	return val;

	fld	DWORD PTR _val$[ebp]

; 477  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CL_KeyState@@YAMPAUkbutton_s@@@Z ENDP			; CL_KeyState
_TEXT	ENDS
PUBLIC	??BVector@@QAEPAMXZ				; Vector::operator float *
PUBLIC	__real@4@c004c800000000000000
PUBLIC	__real@4@4004c800000000000000
PUBLIC	?anglemod@@YAMM@Z				; anglemod
PUBLIC	?CL_AdjustAngles@@YAXMAAVVector@@@Z		; CL_AdjustAngles
EXTRN	?V_StopPitchDrift@@YAXXZ:NEAR			; V_StopPitchDrift
;	COMDAT __real@4@c004c800000000000000
; File z:\xashxtsrc\client\input.cpp
CONST	SEGMENT
__real@4@c004c800000000000000 DD 0c2480000r	; -50
CONST	ENDS
;	COMDAT __real@4@4004c800000000000000
CONST	SEGMENT
__real@4@4004c800000000000000 DD 042480000r	; 50
CONST	ENDS
;	COMDAT ?CL_AdjustAngles@@YAXMAAVVector@@@Z
_TEXT	SEGMENT
_frametime$ = 8
_viewangles$ = 12
_speed$ = -4
_up$ = -8
_down$ = -12
?CL_AdjustAngles@@YAXMAAVVector@@@Z PROC NEAR		; CL_AdjustAngles, COMDAT

; 487  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi

; 488  : 	float	speed;
; 489  : 	float	up, down;
; 490  : 	
; 491  : 	if( in_speed.state & BUTTON_DOWN )

	mov	eax, DWORD PTR ?in_speed@@3Ukbutton_s@@A+8
	and	eax, 1
	test	eax, eax
	je	SHORT $L71365

; 493  : 		speed = frametime * cl_anglespeedkey->value;

	mov	ecx, DWORD PTR ?cl_anglespeedkey@@3PAUcvar_s@@A ; cl_anglespeedkey
	fld	DWORD PTR _frametime$[ebp]
	fmul	DWORD PTR [ecx+12]
	fstp	DWORD PTR _speed$[ebp]

; 495  : 	else

	jmp	SHORT $L71366
$L71365:

; 497  : 		speed = frametime;

	mov	edx, DWORD PTR _frametime$[ebp]
	mov	DWORD PTR _speed$[ebp], edx
$L71366:

; 499  : 
; 500  : 	if( !( in_strafe.state & BUTTON_DOWN ))

	mov	eax, DWORD PTR ?in_strafe@@3Ukbutton_s@@A+8
	and	eax, 1
	test	eax, eax
	jne	$L71367

; 502  : 		viewangles[YAW] -= speed * cl_yawspeed->value * CL_KeyState( &in_right );

	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	add	eax, 4
	mov	DWORD PTR -16+[ebp], eax
	mov	ecx, DWORD PTR ?cl_yawspeed@@3PAUcvar_s@@A ; cl_yawspeed
	fld	DWORD PTR _speed$[ebp]
	fmul	DWORD PTR [ecx+12]
	fstp	DWORD PTR -20+[ebp]
	push	OFFSET FLAT:?in_right@@3Ukbutton_s@@A	; in_right
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	fmul	DWORD PTR -20+[ebp]
	mov	edx, DWORD PTR -16+[ebp]
	fsubr	DWORD PTR [edx]
	mov	eax, DWORD PTR -16+[ebp]
	fstp	DWORD PTR [eax]

; 503  : 		viewangles[YAW] += speed * cl_yawspeed->value * CL_KeyState( &in_left );

	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	add	eax, 4
	mov	DWORD PTR -24+[ebp], eax
	mov	ecx, DWORD PTR ?cl_yawspeed@@3PAUcvar_s@@A ; cl_yawspeed
	fld	DWORD PTR _speed$[ebp]
	fmul	DWORD PTR [ecx+12]
	fstp	DWORD PTR -28+[ebp]
	push	OFFSET FLAT:?in_left@@3Ukbutton_s@@A	; in_left
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	fmul	DWORD PTR -28+[ebp]
	mov	edx, DWORD PTR -24+[ebp]
	fadd	DWORD PTR [edx]
	mov	eax, DWORD PTR -24+[ebp]
	fstp	DWORD PTR [eax]

; 504  : 		viewangles[YAW] = anglemod( viewangles[YAW] );

	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?anglemod@@YAMM@Z			; anglemod
	fstp	DWORD PTR -32+[ebp]
	add	esp, 4
	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	edx, DWORD PTR -32+[ebp]
	mov	DWORD PTR [eax+4], edx
$L71367:

; 506  : 
; 507  : 	if( in_klook.state & BUTTON_DOWN )

	mov	eax, DWORD PTR ?in_klook@@3Ukbutton_s@@A+8
	and	eax, 1
	test	eax, eax
	je	SHORT $L71368

; 509  : 		V_StopPitchDrift ();

	call	?V_StopPitchDrift@@YAXXZ		; V_StopPitchDrift

; 510  : 		viewangles[PITCH] -= speed * cl_pitchspeed->value * CL_KeyState( &in_forward );

	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR -36+[ebp], eax
	mov	ecx, DWORD PTR ?cl_pitchspeed@@3PAUcvar_s@@A ; cl_pitchspeed
	fld	DWORD PTR _speed$[ebp]
	fmul	DWORD PTR [ecx+12]
	fstp	DWORD PTR -40+[ebp]
	push	OFFSET FLAT:?in_forward@@3Ukbutton_s@@A	; in_forward
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	fmul	DWORD PTR -40+[ebp]
	mov	edx, DWORD PTR -36+[ebp]
	fsubr	DWORD PTR [edx]
	mov	eax, DWORD PTR -36+[ebp]
	fstp	DWORD PTR [eax]

; 511  : 		viewangles[PITCH] += speed * cl_pitchspeed->value * CL_KeyState( &in_back );

	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR -44+[ebp], eax
	mov	ecx, DWORD PTR ?cl_pitchspeed@@3PAUcvar_s@@A ; cl_pitchspeed
	fld	DWORD PTR _speed$[ebp]
	fmul	DWORD PTR [ecx+12]
	fstp	DWORD PTR -48+[ebp]
	push	OFFSET FLAT:?in_back@@3Ukbutton_s@@A	; in_back
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	fmul	DWORD PTR -48+[ebp]
	mov	edx, DWORD PTR -44+[ebp]
	fadd	DWORD PTR [edx]
	mov	eax, DWORD PTR -44+[ebp]
	fstp	DWORD PTR [eax]
$L71368:

; 513  : 	
; 514  : 	up = CL_KeyState( &in_lookup );

	push	OFFSET FLAT:?in_lookup@@3Ukbutton_s@@A	; in_lookup
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	fstp	DWORD PTR _up$[ebp]

; 515  : 	down = CL_KeyState( &in_lookdown );

	push	OFFSET FLAT:?in_lookdown@@3Ukbutton_s@@A ; in_lookdown
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	fstp	DWORD PTR _down$[ebp]

; 516  : 	
; 517  : 	viewangles[PITCH] -= speed * cl_pitchspeed->value * up;

	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR -52+[ebp], eax
	mov	ecx, DWORD PTR ?cl_pitchspeed@@3PAUcvar_s@@A ; cl_pitchspeed
	fld	DWORD PTR _speed$[ebp]
	fmul	DWORD PTR [ecx+12]
	fmul	DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR -52+[ebp]
	fsubr	DWORD PTR [edx]
	mov	eax, DWORD PTR -52+[ebp]
	fstp	DWORD PTR [eax]

; 518  : 	viewangles[PITCH] += speed * cl_pitchspeed->value * down;

	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	DWORD PTR -56+[ebp], eax
	mov	ecx, DWORD PTR ?cl_pitchspeed@@3PAUcvar_s@@A ; cl_pitchspeed
	fld	DWORD PTR _speed$[ebp]
	fmul	DWORD PTR [ecx+12]
	fmul	DWORD PTR _down$[ebp]
	mov	edx, DWORD PTR -56+[ebp]
	fadd	DWORD PTR [edx]
	mov	eax, DWORD PTR -56+[ebp]
	fstp	DWORD PTR [eax]

; 519  : 
; 520  : 	if( up || down )

	fld	DWORD PTR _up$[ebp]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	je	SHORT $L71370
	fld	DWORD PTR _down$[ebp]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L71369
$L71370:

; 521  : 		V_StopPitchDrift ();

	call	?V_StopPitchDrift@@YAXXZ		; V_StopPitchDrift
$L71369:

; 522  : 
; 523  : 	viewangles[PITCH] = bound( -cl_pitchup->value, viewangles[PITCH], cl_pitchdown->value );

	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR ?cl_pitchup@@3PAUcvar_s@@A ; cl_pitchup
	fld	DWORD PTR [ecx+12]
	fchs
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $L72072
	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax]
	mov	edx, DWORD PTR ?cl_pitchdown@@3PAUcvar_s@@A ; cl_pitchdown
	fld	DWORD PTR [edx+12]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L72070
	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax]
	fstp	DWORD PTR -60+[ebp]
	jmp	SHORT $L72071
$L72070:
	mov	eax, DWORD PTR ?cl_pitchdown@@3PAUcvar_s@@A ; cl_pitchdown
	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR -60+[ebp]
$L72071:
	mov	ecx, DWORD PTR -60+[ebp]
	mov	DWORD PTR -64+[ebp], ecx
	jmp	SHORT $L72073
$L72072:
	mov	edx, DWORD PTR ?cl_pitchup@@3PAUcvar_s@@A ; cl_pitchup
	fld	DWORD PTR [edx+12]
	fchs
	fstp	DWORD PTR -64+[ebp]
$L72073:
	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -64+[ebp]
	mov	DWORD PTR [eax], ecx

; 524  : 	viewangles[ROLL] = bound( -50, viewangles[ROLL], 50 );

	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR __real@4@c004c800000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L72076
	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR __real@4@4004c800000000000000
	fnstsw	ax
	test	ah, 1
	je	SHORT $L72074
	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR -68+[ebp]
	jmp	SHORT $L72075
$L72074:
	mov	DWORD PTR -68+[ebp], 1112014848		; 42480000H
$L72075:
	mov	edx, DWORD PTR -68+[ebp]
	mov	DWORD PTR -72+[ebp], edx
	jmp	SHORT $L72077
$L72076:
	mov	DWORD PTR -72+[ebp], -1035468800	; c2480000H
$L72077:
	mov	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	mov	ecx, DWORD PTR -72+[ebp]
	mov	DWORD PTR [eax+8], ecx

; 525  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CL_AdjustAngles@@YAXMAAVVector@@@Z ENDP		; CL_AdjustAngles
_TEXT	ENDS
;	COMDAT ??BVector@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4
??BVector@@QAEPAMXZ PROC NEAR				; Vector::operator float *, COMDAT

; 228  : 	operator float *()				{ return &x; } // Vectors will now automatically convert to float * when needed

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BVector@@QAEPAMXZ ENDP				; Vector::operator float *
_TEXT	ENDS
PUBLIC	__real@4@4006b60b610000000000
PUBLIC	__real@4@3ff7b400000000000000
EXTRN	__ftol:NEAR
;	COMDAT __real@4@4006b60b610000000000
; File z:\xashxtsrc\game_shared\mathlib.h
CONST	SEGMENT
__real@4@4006b60b610000000000 DD 043360b61r	; 182.044
CONST	ENDS
;	COMDAT __real@4@3ff7b400000000000000
CONST	SEGMENT
__real@4@3ff7b400000000000000 DD 03bb40000r	; 0.00549316
CONST	ENDS
;	COMDAT ?anglemod@@YAMM@Z
_TEXT	SEGMENT
_a$ = 8
?anglemod@@YAMM@Z PROC NEAR				; anglemod, COMDAT

; 81   : inline float anglemod( float a ) { return (360.0f / 65536) * ((int)(a * (65536 / 360.0f)) & 65535); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR _a$[ebp]
	fmul	DWORD PTR __real@4@4006b60b610000000000
	call	__ftol
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR -4+[ebp], eax
	fild	DWORD PTR -4+[ebp]
	fmul	DWORD PTR __real@4@3ff7b400000000000000
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?anglemod@@YAMM@Z ENDP					; anglemod
_TEXT	ENDS
PUBLIC	?CL_IsDead@@YAHXZ				; CL_IsDead
EXTRN	?gHUD@@3VCHud@@A:BYTE				; gHUD
;	COMDAT ?CL_IsDead@@YAHXZ
_TEXT	SEGMENT
?CL_IsDead@@YAHXZ PROC NEAR				; CL_IsDead, COMDAT

; 535  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 536  : 	return ( gHUD.m_Health.m_iHealth <= 0 ) ? 1 : 0;

	xor	eax, eax
	cmp	DWORD PTR ?gHUD@@3VCHud@@A+176, 0
	setle	al

; 537  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CL_IsDead@@YAHXZ ENDP					; CL_IsDead
_TEXT	ENDS
PUBLIC	??0Vector@@QAE@XZ				; Vector::Vector
PUBLIC	?R_StudioAttachmentAngles@@YA?AVVector@@PBUcl_entity_s@@HH@Z ; R_StudioAttachmentAngles
PUBLIC	?R_StudioLookupAttachment@@YAHPBUcl_entity_s@@PBD@Z ; R_StudioLookupAttachment
PUBLIC	__real@4@c005aa00000000000000
PUBLIC	__real@4@4005aa00000000000000
PUBLIC	__real@4@c003c800000000000000
PUBLIC	__real@4@40048c00000000000000
PUBLIC	?CreateVehicleView@@YA_NAAVVector@@@Z		; CreateVehicleView
PUBLIC	??_C@_05PECN@incar?$AA@				; `string'
PUBLIC	??_C@_0BE@LPHC@vehicle_driver_eyes?$AA@		; `string'
EXTRN	_atoi:NEAR
EXTRN	?NormalizeAngles@@YAXAAVVector@@@Z:NEAR		; NormalizeAngles
EXTRN	?AngleDiff@@YAMMM@Z:NEAR			; AngleDiff
EXTRN	?tr@@3Uref_globals_t@@A:BYTE			; tr
;	COMDAT ??_C@_05PECN@incar?$AA@
; File z:\xashxtsrc\client\input.cpp
CONST	SEGMENT
??_C@_05PECN@incar?$AA@ DB 'incar', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LPHC@vehicle_driver_eyes?$AA@
CONST	SEGMENT
??_C@_0BE@LPHC@vehicle_driver_eyes?$AA@ DB 'vehicle_driver_eyes', 00H ; `string'
CONST	ENDS
;	COMDAT __real@4@c005aa00000000000000
CONST	SEGMENT
__real@4@c005aa00000000000000 DD 0c2aa0000r	; -85
CONST	ENDS
;	COMDAT __real@4@4005aa00000000000000
CONST	SEGMENT
__real@4@4005aa00000000000000 DD 042aa0000r	; 85
CONST	ENDS
;	COMDAT __real@4@c003c800000000000000
CONST	SEGMENT
__real@4@c003c800000000000000 DD 0c1c80000r	; -25
CONST	ENDS
;	COMDAT __real@4@40048c00000000000000
CONST	SEGMENT
__real@4@40048c00000000000000 DD 0420c0000r	; 35
CONST	ENDS
;	COMDAT ?CreateVehicleView@@YA_NAAVVector@@@Z
_TEXT	SEGMENT
$T72095 = -36
_vecViewAngles$ = 8
_view$ = -4
_eyeAttachmentIndex$ = -8
_flAngleDiff$ = -12
_vehicleEyeAngles$ = -24
?CreateVehicleView@@YA_NAAVVector@@@Z PROC NEAR		; CreateVehicleView, COMDAT

; 540  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi

; 541  : 	if( atoi( gEngfuncs.PhysInfo_ValueForKey( "incar" )) != VEHICLE_DRIVEN )

	push	OFFSET FLAT:??_C@_05PECN@incar?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+176
	add	esp, 4
	push	eax
	call	_atoi
	add	esp, 4
	cmp	eax, 2
	je	SHORT $L71377

; 542  : 		return false;

	xor	al, al
	jmp	$L71376
$L71377:

; 543  : 
; 544  : 	cl_entity_t *view = GET_ENTITY( tr.viewparams.viewentity );

	mov	eax, DWORD PTR ?tr@@3Uref_globals_t@@A+1411896
	push	eax
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+212
	add	esp, 4
	mov	DWORD PTR _view$[ebp], eax

; 545  : 	int eyeAttachmentIndex = R_StudioLookupAttachment( view, "vehicle_driver_eyes" );

	push	OFFSET FLAT:??_C@_0BE@LPHC@vehicle_driver_eyes?$AA@ ; `string'
	mov	ecx, DWORD PTR _view$[ebp]
	push	ecx
	call	?R_StudioLookupAttachment@@YAHPBUcl_entity_s@@PBD@Z ; R_StudioLookupAttachment
	add	esp, 8
	mov	DWORD PTR _eyeAttachmentIndex$[ebp], eax

; 546  : 	float flAngleDiff;
; 547  : 
; 548  : 	if( eyeAttachmentIndex == -1 )

	cmp	DWORD PTR _eyeAttachmentIndex$[ebp], -1
	jne	SHORT $L71383

; 549  : 		return false;

	xor	al, al
	jmp	$L71376
$L71383:

; 550  : 
; 551  : 	Vector vehicleEyeAngles;

	lea	ecx, DWORD PTR _vehicleEyeAngles$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 552  : 	vehicleEyeAngles = R_StudioAttachmentAngles( view, eyeAttachmentIndex, AF_FORCE_RECALC|AF_LOCAL_SPACE );

	push	3
	mov	edx, DWORD PTR _eyeAttachmentIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _view$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T72095[ebp]
	push	ecx
	call	?R_StudioAttachmentAngles@@YA?AVVector@@PBUcl_entity_s@@HH@Z ; R_StudioAttachmentAngles
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _vehicleEyeAngles$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _vehicleEyeAngles$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _vehicleEyeAngles$[ebp+8], edx

; 553  : 	NormalizeAngles( vehicleEyeAngles );

	lea	eax, DWORD PTR _vehicleEyeAngles$[ebp]
	push	eax
	call	?NormalizeAngles@@YAXAAVVector@@@Z	; NormalizeAngles
	add	esp, 4

; 554  : 	NormalizeAngles( vecViewAngles );

	mov	ecx, DWORD PTR _vecViewAngles$[ebp]
	push	ecx
	call	?NormalizeAngles@@YAXAAVVector@@@Z	; NormalizeAngles
	add	esp, 4

; 555  : 
; 556  : 	// Limit the yaw.
; 557  : 	flAngleDiff = AngleDiff( vecViewAngles.y, vehicleEyeAngles.y );

	mov	edx, DWORD PTR _vehicleEyeAngles$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _vecViewAngles$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?AngleDiff@@YAMMM@Z			; AngleDiff
	add	esp, 8
	fst	DWORD PTR _flAngleDiff$[ebp]

; 558  : 	flAngleDiff = bound( -85.0f, flAngleDiff, 85.0f );

	fcomp	DWORD PTR __real@4@c005aa00000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L72098
	fld	DWORD PTR _flAngleDiff$[ebp]
	fcomp	DWORD PTR __real@4@4005aa00000000000000
	fnstsw	ax
	test	ah, 1
	je	SHORT $L72096
	mov	edx, DWORD PTR _flAngleDiff$[ebp]
	mov	DWORD PTR -40+[ebp], edx
	jmp	SHORT $L72097
$L72096:
	mov	DWORD PTR -40+[ebp], 1118437376		; 42aa0000H
$L72097:
	mov	eax, DWORD PTR -40+[ebp]
	mov	DWORD PTR -44+[ebp], eax
	jmp	SHORT $L72099
$L72098:
	mov	DWORD PTR -44+[ebp], -1029046272	; c2aa0000H
$L72099:
	mov	ecx, DWORD PTR -44+[ebp]
	mov	DWORD PTR _flAngleDiff$[ebp], ecx

; 559  : 	vecViewAngles.y = vehicleEyeAngles.y + flAngleDiff;

	fld	DWORD PTR _vehicleEyeAngles$[ebp+4]
	fadd	DWORD PTR _flAngleDiff$[ebp]
	mov	edx, DWORD PTR _vecViewAngles$[ebp]
	fstp	DWORD PTR [edx+4]

; 560  : 
; 561  : 	// Limit the pitch.
; 562  : 	flAngleDiff = AngleDiff( vecViewAngles.x, vehicleEyeAngles.x );

	mov	eax, DWORD PTR _vehicleEyeAngles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vecViewAngles$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?AngleDiff@@YAMMM@Z			; AngleDiff
	add	esp, 8
	fst	DWORD PTR _flAngleDiff$[ebp]

; 563  : 	flAngleDiff = bound( -25.0f, flAngleDiff, 35.0f );

	fcomp	DWORD PTR __real@4@c003c800000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L72102
	fld	DWORD PTR _flAngleDiff$[ebp]
	fcomp	DWORD PTR __real@4@40048c00000000000000
	fnstsw	ax
	test	ah, 1
	je	SHORT $L72100
	mov	eax, DWORD PTR _flAngleDiff$[ebp]
	mov	DWORD PTR -48+[ebp], eax
	jmp	SHORT $L72101
$L72100:
	mov	DWORD PTR -48+[ebp], 1108082688		; 420c0000H
$L72101:
	mov	ecx, DWORD PTR -48+[ebp]
	mov	DWORD PTR -52+[ebp], ecx
	jmp	SHORT $L72103
$L72102:
	mov	DWORD PTR -52+[ebp], -1043857408	; c1c80000H
$L72103:
	mov	edx, DWORD PTR -52+[ebp]
	mov	DWORD PTR _flAngleDiff$[ebp], edx

; 564  : 	vecViewAngles.x = vehicleEyeAngles.x + flAngleDiff;

	fld	DWORD PTR _vehicleEyeAngles$[ebp]
	fadd	DWORD PTR _flAngleDiff$[ebp]
	mov	eax, DWORD PTR _vecViewAngles$[ebp]
	fstp	DWORD PTR [eax]

; 565  : 
; 566  : 	return true;

	mov	al, 1
$L71376:

; 567  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateVehicleView@@YA_NAAVVector@@@Z ENDP		; CreateVehicleView
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0Vector@@QAE@XZ PROC NEAR				; Vector::Vector, COMDAT

; 134  : 	inline Vector(void)				{ }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector@@QAE@XZ ENDP					; Vector::Vector
_TEXT	ENDS
PUBLIC	??0Vector@@QAE@ABV0@@Z				; Vector::Vector
EXTRN	?StudioGetAttachment@CStudioModelRenderer@@QAEXPBUcl_entity_s@@HPAVVector@@1H@Z:NEAR ; CStudioModelRenderer::StudioGetAttachment
EXTRN	?g_StudioRenderer@@3VCStudioModelRenderer@@A:BYTE ; g_StudioRenderer
EXTRN	?g_vecZero@@3VVector@@B:BYTE			; g_vecZero
;	COMDAT ?R_StudioAttachmentAngles@@YA?AVVector@@PBUcl_entity_s@@HH@Z
_TEXT	SEGMENT
_ent$ = 12
_num$ = 16
_flags$ = 20
___$ReturnUdt$ = 8
_angles$ = -12
?R_StudioAttachmentAngles@@YA?AVVector@@PBUcl_entity_s@@HH@Z PROC NEAR ; R_StudioAttachmentAngles, COMDAT

; 692  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 693  : 	Vector angles = g_vecZero;

	push	OFFSET FLAT:?g_vecZero@@3VVector@@B	; g_vecZero
	lea	ecx, DWORD PTR _angles$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector

; 694  : 
; 695  : 	g_StudioRenderer.StudioGetAttachment( ent, num, NULL, &angles, flags );

	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	lea	ecx, DWORD PTR _angles$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	mov	ecx, OFFSET FLAT:?g_StudioRenderer@@3VCStudioModelRenderer@@A
	call	?StudioGetAttachment@CStudioModelRenderer@@QAEXPBUcl_entity_s@@HPAVVector@@1H@Z ; CStudioModelRenderer::StudioGetAttachment

; 696  : 
; 697  : 	return angles;

	lea	ecx, DWORD PTR _angles$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector@@QAE@ABV0@@Z			; Vector::Vector
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 698  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_StudioAttachmentAngles@@YA?AVVector@@PBUcl_entity_s@@HH@Z ENDP ; R_StudioAttachmentAngles
_TEXT	ENDS
;	COMDAT ??0Vector@@QAE@ABV0@@Z
_TEXT	SEGMENT
_v$ = 8
_this$ = -4
??0Vector@@QAE@ABV0@@Z PROC NEAR			; Vector::Vector, COMDAT

; 136  : 	inline Vector(const Vector& v)		{ x = v.x; y = v.y; z = v.z;		   }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Vector@@QAE@ABV0@@Z ENDP				; Vector::Vector
_TEXT	ENDS
EXTRN	?StudioGetAttachmentNumber@CStudioModelRenderer@@QAEHPBUcl_entity_s@@PBD@Z:NEAR ; CStudioModelRenderer::StudioGetAttachmentNumber
;	COMDAT ?R_StudioLookupAttachment@@YAHPBUcl_entity_s@@PBD@Z
_TEXT	SEGMENT
_ent$ = 8
_name$ = 12
?R_StudioLookupAttachment@@YAHPBUcl_entity_s@@PBD@Z PROC NEAR ; R_StudioLookupAttachment, COMDAT

; 701  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 702  : 	return g_StudioRenderer.StudioGetAttachmentNumber( ent, name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	push	ecx
	mov	ecx, OFFSET FLAT:?g_StudioRenderer@@3VCStudioModelRenderer@@A
	call	?StudioGetAttachmentNumber@CStudioModelRenderer@@QAEHPBUcl_entity_s@@PBD@Z ; CStudioModelRenderer::StudioGetAttachmentNumber

; 703  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?R_StudioLookupAttachment@@YAHPBUcl_entity_s@@PBD@Z ENDP ; R_StudioLookupAttachment
_TEXT	ENDS
PUBLIC	?CL_ButtonBits@@YAHH@Z				; CL_ButtonBits
PUBLIC	?CL_CreateMove@@YAXMPAUusercmd_s@@H@Z		; CL_CreateMove
EXTRN	_atexit:NEAR
EXTRN	_sqrt:NEAR
EXTRN	?IN_Move@@YAXMPAUusercmd_s@@@Z:NEAR		; IN_Move
EXTRN	?g_weaponselect@@3HA:DWORD			; g_weaponselect
_BSS	SEGMENT
_?oldangles@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4VVector@@A DB 0cH DUP (?)
_?$S11@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4EA DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?CL_CreateMove@@YAXMPAUusercmd_s@@H@Z
_TEXT	SEGMENT
_frametime$ = 8
_cmd$ = 12
_active$ = 16
_spd$ = -4
_viewangles$ = -16
_forward$ = -28
_fmov$71405 = -32
_fratio$71407 = -36
?CL_CreateMove@@YAXMPAUusercmd_s@@H@Z PROC NEAR		; CL_CreateMove, COMDAT

; 579  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 580  : 	float spd;
; 581  : 	Vector viewangles, forward;

	lea	ecx, DWORD PTR _viewangles$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector
	lea	ecx, DWORD PTR _forward$[ebp]
	call	??0Vector@@QAE@XZ			; Vector::Vector

; 582  : 	static Vector oldangles;

	xor	eax, eax
	mov	al, BYTE PTR _?$S11@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4EA
	and	eax, 1
	test	eax, eax
	jne	SHORT $L71398
	mov	cl, BYTE PTR _?$S11@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4EA
	or	cl, 1
	mov	BYTE PTR _?$S11@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4EA, cl
	mov	ecx, OFFSET FLAT:_?oldangles@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4VVector@@A
	call	??0Vector@@QAE@XZ			; Vector::Vector
	push	OFFSET FLAT:_$E12
	call	_atexit
	add	esp, 4
$L71398:

; 583  : 
; 584  : 	if( active )

	cmp	DWORD PTR _active$[ebp], 0
	je	$L71408

; 586  : 		gEngfuncs.GetViewAngles( viewangles );

	lea	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+136
	add	esp, 4

; 587  : 
; 588  : 		CL_AdjustAngles( frametime, viewangles );

	lea	edx, DWORD PTR _viewangles$[ebp]
	push	edx
	mov	eax, DWORD PTR _frametime$[ebp]
	push	eax
	call	?CL_AdjustAngles@@YAXMAAVVector@@@Z	; CL_AdjustAngles
	add	esp, 8

; 589  : 
; 590  : 		memset( cmd, 0, sizeof( *cmd ));

	push	52					; 00000034H
	push	0
	mov	ecx, DWORD PTR _cmd$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 591  : 
; 592  : 		gEngfuncs.SetViewAngles( viewangles );

	lea	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+140
	add	esp, 4

; 593  : 
; 594  : 		if( in_strafe.state & BUTTON_DOWN )

	mov	edx, DWORD PTR ?in_strafe@@3Ukbutton_s@@A+8
	and	edx, 1
	test	edx, edx
	je	SHORT $L71401

; 596  : 			cmd->sidemove += cl_sidespeed->value * CL_KeyState( &in_right );

	push	OFFSET FLAT:?in_right@@3Ukbutton_s@@A	; in_right
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	mov	eax, DWORD PTR ?cl_sidespeed@@3PAUcvar_s@@A ; cl_sidespeed
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _cmd$[ebp]
	fadd	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [edx+20]

; 597  : 			cmd->sidemove -= cl_sidespeed->value * CL_KeyState( &in_left );

	push	OFFSET FLAT:?in_left@@3Ukbutton_s@@A	; in_left
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	mov	eax, DWORD PTR ?cl_sidespeed@@3PAUcvar_s@@A ; cl_sidespeed
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _cmd$[ebp]
	fsubr	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [edx+20]
$L71401:

; 599  : 
; 600  : 		cmd->sidemove += cl_sidespeed->value * CL_KeyState( &in_moveright );

	push	OFFSET FLAT:?in_moveright@@3Ukbutton_s@@A ; in_moveright
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	mov	eax, DWORD PTR ?cl_sidespeed@@3PAUcvar_s@@A ; cl_sidespeed
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _cmd$[ebp]
	fadd	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [edx+20]

; 601  : 		cmd->sidemove -= cl_sidespeed->value * CL_KeyState( &in_moveleft );

	push	OFFSET FLAT:?in_moveleft@@3Ukbutton_s@@A ; in_moveleft
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	mov	eax, DWORD PTR ?cl_sidespeed@@3PAUcvar_s@@A ; cl_sidespeed
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _cmd$[ebp]
	fsubr	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [edx+20]

; 602  : 
; 603  : 		cmd->upmove += cl_upspeed->value * CL_KeyState( &in_up );

	push	OFFSET FLAT:?in_up@@3Ukbutton_s@@A	; in_up
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	mov	eax, DWORD PTR ?cl_upspeed@@3PAUcvar_s@@A ; cl_upspeed
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _cmd$[ebp]
	fadd	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [edx+24]

; 604  : 		cmd->upmove -= cl_upspeed->value * CL_KeyState( &in_down );

	push	OFFSET FLAT:?in_down@@3Ukbutton_s@@A	; in_down
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	mov	eax, DWORD PTR ?cl_upspeed@@3PAUcvar_s@@A ; cl_upspeed
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _cmd$[ebp]
	fsubr	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [edx+24]

; 605  : 
; 606  : 		if(!( in_klook.state & BUTTON_DOWN ))

	mov	eax, DWORD PTR ?in_klook@@3Ukbutton_s@@A+8
	and	eax, 1
	test	eax, eax
	jne	SHORT $L71402

; 608  : 			cmd->forwardmove += cl_forwardspeed->value * CL_KeyState( &in_forward );

	push	OFFSET FLAT:?in_forward@@3Ukbutton_s@@A	; in_forward
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	mov	ecx, DWORD PTR ?cl_forwardspeed@@3PAUcvar_s@@A ; cl_forwardspeed
	fmul	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _cmd$[ebp]
	fadd	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [eax+16]

; 609  : 			cmd->forwardmove -= cl_backspeed->value * CL_KeyState( &in_back );

	push	OFFSET FLAT:?in_back@@3Ukbutton_s@@A	; in_back
	call	?CL_KeyState@@YAMPAUkbutton_s@@@Z	; CL_KeyState
	add	esp, 4
	mov	ecx, DWORD PTR ?cl_backspeed@@3PAUcvar_s@@A ; cl_backspeed
	fmul	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _cmd$[ebp]
	fsubr	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [eax+16]
$L71402:

; 611  : 
; 612  : 		// adjust for speed key
; 613  : 		if( in_speed.state & BUTTON_DOWN )

	mov	ecx, DWORD PTR ?in_speed@@3Ukbutton_s@@A+8
	and	ecx, 1
	test	ecx, ecx
	je	SHORT $L71403

; 615  : 			cmd->forwardmove *= cl_movespeedkey->value;

	mov	edx, DWORD PTR _cmd$[ebp]
	mov	eax, DWORD PTR ?cl_movespeedkey@@3PAUcvar_s@@A ; cl_movespeedkey
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [ecx+16]

; 616  : 			cmd->sidemove *= cl_movespeedkey->value;

	mov	edx, DWORD PTR _cmd$[ebp]
	mov	eax, DWORD PTR ?cl_movespeedkey@@3PAUcvar_s@@A ; cl_movespeedkey
	fld	DWORD PTR [edx+20]
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [ecx+20]

; 617  : 			cmd->upmove *= cl_movespeedkey->value;

	mov	edx, DWORD PTR _cmd$[ebp]
	mov	eax, DWORD PTR ?cl_movespeedkey@@3PAUcvar_s@@A ; cl_movespeedkey
	fld	DWORD PTR [edx+24]
	fmul	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [ecx+24]
$L71403:

; 619  : 
; 620  : 		// clip to maxspeed
; 621  : 		spd = gEngfuncs.GetClientMaxspeed();

	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+184
	fstp	DWORD PTR _spd$[ebp]

; 622  : 		if( spd != 0.0f )

	fld	DWORD PTR _spd$[ebp]
	fcomp	DWORD PTR __real@4@00000000000000000000
	fnstsw	ax
	test	ah, 64					; 00000040H
	jne	SHORT $L71406

; 624  : 			// scale the 3 speeds so that the total velocity is not > cl.maxspeed
; 625  : 			float fmov = sqrt(( cmd->forwardmove * cmd->forwardmove) + (cmd->sidemove * cmd->sidemove) + (cmd->upmove * cmd->upmove));

	mov	edx, DWORD PTR _cmd$[ebp]
	mov	eax, DWORD PTR _cmd$[ebp]
	fld	DWORD PTR [edx+16]
	fmul	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	edx, DWORD PTR _cmd$[ebp]
	fld	DWORD PTR [ecx+20]
	fmul	DWORD PTR [edx+20]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _cmd$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR [ecx+24]
	faddp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _fmov$71405[ebp]

; 626  : 
; 627  : 			if( fmov > spd )

	fld	DWORD PTR _fmov$71405[ebp]
	fcomp	DWORD PTR _spd$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L71406

; 629  : 				float fratio = spd / fmov;

	fld	DWORD PTR _spd$[ebp]
	fdiv	DWORD PTR _fmov$71405[ebp]
	fstp	DWORD PTR _fratio$71407[ebp]

; 630  : 				cmd->forwardmove *= fratio;

	mov	edx, DWORD PTR _cmd$[ebp]
	fld	DWORD PTR _fratio$71407[ebp]
	fmul	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [eax+16]

; 631  : 				cmd->sidemove *= fratio;

	mov	ecx, DWORD PTR _cmd$[ebp]
	fld	DWORD PTR _fratio$71407[ebp]
	fmul	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [edx+20]

; 632  : 				cmd->upmove *= fratio;

	mov	eax, DWORD PTR _cmd$[ebp]
	fld	DWORD PTR _fratio$71407[ebp]
	fmul	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _cmd$[ebp]
	fstp	DWORD PTR [ecx+24]
$L71406:

; 635  : 
; 636  : 		// allow mice and other controllers to add their inputs
; 637  : 		if( !CL_IsDead( )) IN_Move( frametime, cmd );

	call	?CL_IsDead@@YAHXZ			; CL_IsDead
	test	eax, eax
	jne	SHORT $L71408
	mov	edx, DWORD PTR _cmd$[ebp]
	push	edx
	mov	eax, DWORD PTR _frametime$[ebp]
	push	eax
	call	?IN_Move@@YAXMPAUusercmd_s@@@Z		; IN_Move
	add	esp, 8
$L71408:

; 639  : 
; 640  : 	cmd->impulse = in_impulse;

	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	dl, BYTE PTR ?in_impulse@@3HA
	mov	BYTE PTR [ecx+32], dl

; 641  : 	in_impulse = 0;

	mov	DWORD PTR ?in_impulse@@3HA, 0		; in_impulse

; 642  : 
; 643  : 	cmd->weaponselect = g_weaponselect;

	mov	eax, DWORD PTR _cmd$[ebp]
	mov	cl, BYTE PTR ?g_weaponselect@@3HA
	mov	BYTE PTR [eax+33], cl

; 644  : 	g_weaponselect = 0;

	mov	DWORD PTR ?g_weaponselect@@3HA, 0	; g_weaponselect

; 645  : 
; 646  : 	// set button and flag bits
; 647  : 	cmd->buttons = CL_ButtonBits( 1 );

	push	1
	call	?CL_ButtonBits@@YAHH@Z			; CL_ButtonBits
	add	esp, 4
	mov	edx, DWORD PTR _cmd$[ebp]
	mov	WORD PTR [edx+30], ax

; 648  : 
; 649  : 	gEngfuncs.GetViewAngles( viewangles );

	lea	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+136
	add	esp, 4

; 650  : 
; 651  : 	if( CreateVehicleView( viewangles ))

	lea	eax, DWORD PTR _viewangles$[ebp]
	push	eax
	call	?CreateVehicleView@@YA_NAAVVector@@@Z	; CreateVehicleView
	add	esp, 4
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L71409

; 653  : 		// clamp viewangles by car
; 654  : 		gEngfuncs.SetViewAngles( viewangles );

	lea	ecx, DWORD PTR _viewangles$[ebp]
	call	??BVector@@QAEPAMXZ			; Vector::operator float *
	push	eax
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+140
	add	esp, 4
$L71409:

; 656  : 
; 657  : 	// Set current view angles.
; 658  : 	if( CL_IsDead( ))

	call	?CL_IsDead@@YAHXZ			; CL_IsDead
	test	eax, eax
	je	SHORT $L71410

; 660  : 		cmd->viewangles = oldangles;

	mov	ecx, DWORD PTR _cmd$[ebp]
	add	ecx, 4
	mov	edx, DWORD PTR _?oldangles@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4VVector@@A
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _?oldangles@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4VVector@@A+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _?oldangles@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4VVector@@A+8
	mov	DWORD PTR [ecx+8], edx

; 662  : 	else

	jmp	SHORT $L71411
$L71410:

; 664  : 		cmd->viewangles = viewangles;

	mov	eax, DWORD PTR _cmd$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _viewangles$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _viewangles$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _viewangles$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 665  : 		oldangles = viewangles;

	mov	edx, DWORD PTR _viewangles$[ebp]
	mov	DWORD PTR _?oldangles@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4VVector@@A, edx
	mov	eax, DWORD PTR _viewangles$[ebp+4]
	mov	DWORD PTR _?oldangles@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4VVector@@A+4, eax
	mov	ecx, DWORD PTR _viewangles$[ebp+8]
	mov	DWORD PTR _?oldangles@?1??CL_CreateMove@@YAXMPAUusercmd_s@@H@Z@4VVector@@A+8, ecx
$L71411:

; 667  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CL_CreateMove@@YAXMPAUusercmd_s@@H@Z ENDP		; CL_CreateMove
_TEXT	ENDS
;	COMDAT _$E12
_TEXT	SEGMENT
_$E12	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_$E12	ENDP
_TEXT	ENDS
;	COMDAT ?CL_ButtonBits@@YAHH@Z
_TEXT	SEGMENT
_bResetState$ = 8
_bits$ = -4
?CL_ButtonBits@@YAHH@Z PROC NEAR			; CL_ButtonBits, COMDAT

; 678  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 679  : 	int bits = 0;

	mov	DWORD PTR _bits$[ebp], 0

; 680  : 
; 681  : 	if( in_attack.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	eax, DWORD PTR ?in_attack@@3Ukbutton_s@@A+8
	and	eax, 3
	test	eax, eax
	je	SHORT $L71417

; 683  : 		bits |= IN_ATTACK;

	mov	ecx, DWORD PTR _bits$[ebp]
	or	ecx, 1
	mov	DWORD PTR _bits$[ebp], ecx
$L71417:

; 685  : 	
; 686  : 	if( in_duck.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	edx, DWORD PTR ?in_duck@@3Ukbutton_s@@A+8
	and	edx, 3
	test	edx, edx
	je	SHORT $L71418

; 688  : 		bits |= IN_DUCK;

	mov	eax, DWORD PTR _bits$[ebp]
	or	al, 4
	mov	DWORD PTR _bits$[ebp], eax
$L71418:

; 690  :  
; 691  : 	if( in_jump.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	ecx, DWORD PTR ?in_jump@@3Ukbutton_s@@A+8
	and	ecx, 3
	test	ecx, ecx
	je	SHORT $L71419

; 693  : 		bits |= IN_JUMP;

	mov	edx, DWORD PTR _bits$[ebp]
	or	edx, 2
	mov	DWORD PTR _bits$[ebp], edx
$L71419:

; 695  : 
; 696  : 	if( in_forward.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	eax, DWORD PTR ?in_forward@@3Ukbutton_s@@A+8
	and	eax, 3
	test	eax, eax
	je	SHORT $L71420

; 698  : 		bits |= IN_FORWARD;

	mov	ecx, DWORD PTR _bits$[ebp]
	or	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
$L71420:

; 700  : 	
; 701  : 	if( in_back.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	edx, DWORD PTR ?in_back@@3Ukbutton_s@@A+8
	and	edx, 3
	test	edx, edx
	je	SHORT $L71421

; 703  : 		bits |= IN_BACK;

	mov	eax, DWORD PTR _bits$[ebp]
	or	al, 16					; 00000010H
	mov	DWORD PTR _bits$[ebp], eax
$L71421:

; 705  : 
; 706  : 	if( in_use.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	ecx, DWORD PTR ?in_use@@3Ukbutton_s@@A+8
	and	ecx, 3
	test	ecx, ecx
	je	SHORT $L71422

; 708  : 		bits |= IN_USE;

	mov	edx, DWORD PTR _bits$[ebp]
	or	edx, 32					; 00000020H
	mov	DWORD PTR _bits$[ebp], edx
$L71422:

; 710  : 
; 711  : 	if( in_cancel )

	cmp	DWORD PTR ?in_cancel@@3HA, 0		; in_cancel
	je	SHORT $L71423

; 713  : 		bits |= IN_CANCEL;

	mov	eax, DWORD PTR _bits$[ebp]
	or	al, 64					; 00000040H
	mov	DWORD PTR _bits$[ebp], eax
$L71423:

; 715  : 
; 716  : 	if( in_left.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	ecx, DWORD PTR ?in_left@@3Ukbutton_s@@A+8
	and	ecx, 3
	test	ecx, ecx
	je	SHORT $L71424

; 718  : 		bits |= IN_LEFT;

	mov	edx, DWORD PTR _bits$[ebp]
	or	dl, -128				; ffffff80H
	mov	DWORD PTR _bits$[ebp], edx
$L71424:

; 720  : 	
; 721  : 	if( in_right.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	eax, DWORD PTR ?in_right@@3Ukbutton_s@@A+8
	and	eax, 3
	test	eax, eax
	je	SHORT $L71425

; 723  : 		bits |= IN_RIGHT;

	mov	ecx, DWORD PTR _bits$[ebp]
	or	ch, 1
	mov	DWORD PTR _bits$[ebp], ecx
$L71425:

; 725  : 	
; 726  : 	if( in_moveleft.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	edx, DWORD PTR ?in_moveleft@@3Ukbutton_s@@A+8
	and	edx, 3
	test	edx, edx
	je	SHORT $L71426

; 728  : 		bits |= IN_MOVELEFT;

	mov	eax, DWORD PTR _bits$[ebp]
	or	ah, 2
	mov	DWORD PTR _bits$[ebp], eax
$L71426:

; 730  : 	
; 731  : 	if( in_moveright.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	ecx, DWORD PTR ?in_moveright@@3Ukbutton_s@@A+8
	and	ecx, 3
	test	ecx, ecx
	je	SHORT $L71427

; 733  : 		bits |= IN_MOVERIGHT;

	mov	edx, DWORD PTR _bits$[ebp]
	or	dh, 4
	mov	DWORD PTR _bits$[ebp], edx
$L71427:

; 735  : 
; 736  : 	if( in_attack2.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	eax, DWORD PTR ?in_attack2@@3Ukbutton_s@@A+8
	and	eax, 3
	test	eax, eax
	je	SHORT $L71428

; 738  : 		bits |= IN_ATTACK2;

	mov	ecx, DWORD PTR _bits$[ebp]
	or	ch, 8
	mov	DWORD PTR _bits$[ebp], ecx
$L71428:

; 740  : 
; 741  : 	if( in_reload.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	edx, DWORD PTR ?in_reload@@3Ukbutton_s@@A+8
	and	edx, 3
	test	edx, edx
	je	SHORT $L71429

; 743  : 		bits |= IN_RELOAD;

	mov	eax, DWORD PTR _bits$[ebp]
	or	ah, 32					; 00000020H
	mov	DWORD PTR _bits$[ebp], eax
$L71429:

; 745  : 
; 746  : 	if( in_alt1.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	ecx, DWORD PTR ?in_alt1@@3Ukbutton_s@@A+8
	and	ecx, 3
	test	ecx, ecx
	je	SHORT $L71430

; 748  : 		bits |= IN_ALT1;

	mov	edx, DWORD PTR _bits$[ebp]
	or	dh, 64					; 00000040H
	mov	DWORD PTR _bits$[ebp], edx
$L71430:

; 750  : 
; 751  : 	if( in_score.state & (BUTTON_DOWN|IMPULSE_DOWN))

	mov	eax, DWORD PTR ?in_score@@3Ukbutton_s@@A+8
	and	eax, 3
	test	eax, eax
	je	SHORT $L71431

; 753  : 		bits |= IN_SCORE;

	mov	ecx, DWORD PTR _bits$[ebp]
	or	ch, -128				; ffffff80H
	mov	DWORD PTR _bits$[ebp], ecx
$L71431:

; 755  : 
; 756  : 	// dead or in intermission? Shore scoreboard, too
; 757  : 	if( CL_IsDead() || gHUD.m_iIntermission )

	call	?CL_IsDead@@YAHXZ			; CL_IsDead
	test	eax, eax
	jne	SHORT $L71433
	cmp	DWORD PTR ?gHUD@@3VCHud@@A+3808, 0
	je	SHORT $L71432
$L71433:

; 759  : 		bits |= IN_SCORE;

	mov	edx, DWORD PTR _bits$[ebp]
	or	dh, -128				; ffffff80H
	mov	DWORD PTR _bits$[ebp], edx
$L71432:

; 761  : 
; 762  : 	if( bResetState )

	cmp	DWORD PTR _bResetState$[ebp], 0
	je	$L71434

; 764  : 		in_attack.state &= ~IMPULSE_DOWN;

	mov	eax, DWORD PTR ?in_attack@@3Ukbutton_s@@A+8
	and	al, -3					; fffffffdH
	mov	DWORD PTR ?in_attack@@3Ukbutton_s@@A+8, eax

; 765  : 		in_duck.state &= ~IMPULSE_DOWN;

	mov	ecx, DWORD PTR ?in_duck@@3Ukbutton_s@@A+8
	and	ecx, -3					; fffffffdH
	mov	DWORD PTR ?in_duck@@3Ukbutton_s@@A+8, ecx

; 766  : 		in_jump.state &= ~IMPULSE_DOWN;

	mov	edx, DWORD PTR ?in_jump@@3Ukbutton_s@@A+8
	and	edx, -3					; fffffffdH
	mov	DWORD PTR ?in_jump@@3Ukbutton_s@@A+8, edx

; 767  : 		in_forward.state &= ~IMPULSE_DOWN;

	mov	eax, DWORD PTR ?in_forward@@3Ukbutton_s@@A+8
	and	al, -3					; fffffffdH
	mov	DWORD PTR ?in_forward@@3Ukbutton_s@@A+8, eax

; 768  : 		in_back.state &= ~IMPULSE_DOWN;

	mov	ecx, DWORD PTR ?in_back@@3Ukbutton_s@@A+8
	and	ecx, -3					; fffffffdH
	mov	DWORD PTR ?in_back@@3Ukbutton_s@@A+8, ecx

; 769  : 		in_use.state &= ~IMPULSE_DOWN;

	mov	edx, DWORD PTR ?in_use@@3Ukbutton_s@@A+8
	and	edx, -3					; fffffffdH
	mov	DWORD PTR ?in_use@@3Ukbutton_s@@A+8, edx

; 770  : 		in_left.state &= ~IMPULSE_DOWN;

	mov	eax, DWORD PTR ?in_left@@3Ukbutton_s@@A+8
	and	al, -3					; fffffffdH
	mov	DWORD PTR ?in_left@@3Ukbutton_s@@A+8, eax

; 771  : 		in_right.state &= ~IMPULSE_DOWN;

	mov	ecx, DWORD PTR ?in_right@@3Ukbutton_s@@A+8
	and	ecx, -3					; fffffffdH
	mov	DWORD PTR ?in_right@@3Ukbutton_s@@A+8, ecx

; 772  : 		in_moveleft.state &= ~IMPULSE_DOWN;

	mov	edx, DWORD PTR ?in_moveleft@@3Ukbutton_s@@A+8
	and	edx, -3					; fffffffdH
	mov	DWORD PTR ?in_moveleft@@3Ukbutton_s@@A+8, edx

; 773  : 		in_moveright.state &= ~IMPULSE_DOWN;

	mov	eax, DWORD PTR ?in_moveright@@3Ukbutton_s@@A+8
	and	al, -3					; fffffffdH
	mov	DWORD PTR ?in_moveright@@3Ukbutton_s@@A+8, eax

; 774  : 		in_attack2.state &= ~IMPULSE_DOWN;

	mov	ecx, DWORD PTR ?in_attack2@@3Ukbutton_s@@A+8
	and	ecx, -3					; fffffffdH
	mov	DWORD PTR ?in_attack2@@3Ukbutton_s@@A+8, ecx

; 775  : 		in_reload.state &= ~IMPULSE_DOWN;

	mov	edx, DWORD PTR ?in_reload@@3Ukbutton_s@@A+8
	and	edx, -3					; fffffffdH
	mov	DWORD PTR ?in_reload@@3Ukbutton_s@@A+8, edx

; 776  : 		in_alt1.state &= ~IMPULSE_DOWN;

	mov	eax, DWORD PTR ?in_alt1@@3Ukbutton_s@@A+8
	and	al, -3					; fffffffdH
	mov	DWORD PTR ?in_alt1@@3Ukbutton_s@@A+8, eax

; 777  : 		in_score.state &= ~IMPULSE_DOWN;

	mov	ecx, DWORD PTR ?in_score@@3Ukbutton_s@@A+8
	and	ecx, -3					; fffffffdH
	mov	DWORD PTR ?in_score@@3Ukbutton_s@@A+8, ecx
$L71434:

; 779  : 
; 780  : 	return bits;

	mov	eax, DWORD PTR _bits$[ebp]

; 781  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CL_ButtonBits@@YAHH@Z ENDP				; CL_ButtonBits
_TEXT	ENDS
PUBLIC	?CL_ResetButtonBits@@YAXH@Z			; CL_ResetButtonBits
;	COMDAT ?CL_ResetButtonBits@@YAXH@Z
_TEXT	SEGMENT
_bits$ = 8
_bitsNew$ = -4
?CL_ResetButtonBits@@YAXH@Z PROC NEAR			; CL_ResetButtonBits, COMDAT

; 790  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 791  : 	int bitsNew = CL_ButtonBits( 0 ) ^ bits;

	push	0
	call	?CL_ButtonBits@@YAHH@Z			; CL_ButtonBits
	add	esp, 4
	xor	eax, DWORD PTR _bits$[ebp]
	mov	DWORD PTR _bitsNew$[ebp], eax

; 792  : 
; 793  : 	// has the attack button been changed
; 794  : 	if( bitsNew & IN_ATTACK )

	mov	eax, DWORD PTR _bitsNew$[ebp]
	and	eax, 1
	test	eax, eax
	je	SHORT $L71441

; 796  : 		// Was it pressed? or let go?
; 797  : 		if( bits & IN_ATTACK )

	mov	ecx, DWORD PTR _bits$[ebp]
	and	ecx, 1
	test	ecx, ecx
	je	SHORT $L71440

; 799  : 			KeyDown( &in_attack );

	push	OFFSET FLAT:?in_attack@@3Ukbutton_s@@A	; in_attack
	call	?KeyDown@@YAXPAUkbutton_s@@@Z		; KeyDown
	add	esp, 4

; 801  : 		else

	jmp	SHORT $L71441
$L71440:

; 803  : 			// totally clear state
; 804  : 			in_attack.state &= ~(BUTTON_DOWN|IMPULSE_DOWN|IMPULSE_UP);

	mov	edx, DWORD PTR ?in_attack@@3Ukbutton_s@@A+8
	and	edx, -8					; fffffff8H
	mov	DWORD PTR ?in_attack@@3Ukbutton_s@@A+8, edx
$L71441:

; 807  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CL_ResetButtonBits@@YAXH@Z ENDP			; CL_ResetButtonBits
_TEXT	ENDS
PUBLIC	?InitInput@@YAXXZ				; InitInput
PUBLIC	??_C@_07KFJC@?$CLmoveup?$AA@			; `string'
PUBLIC	??_C@_07ECOP@?9moveup?$AA@			; `string'
PUBLIC	??_C@_09IMNG@?$CLmovedown?$AA@			; `string'
PUBLIC	??_C@_09BGG@?9movedown?$AA@			; `string'
PUBLIC	??_C@_05IFMH@?$CLleft?$AA@			; `string'
PUBLIC	??_C@_05EFBI@?9left?$AA@			; `string'
PUBLIC	??_C@_06FOLA@?$CLright?$AA@			; `string'
PUBLIC	??_C@_06CDHA@?9right?$AA@			; `string'
PUBLIC	??_C@_08HLLP@?$CLforward?$AA@			; `string'
PUBLIC	??_C@_08MLFI@?9forward?$AA@			; `string'
PUBLIC	??_C@_05NMMM@?$CLback?$AA@			; `string'
PUBLIC	??_C@_05BMBD@?9back?$AA@			; `string'
PUBLIC	??_C@_07BGBD@?$CLlookup?$AA@			; `string'
PUBLIC	??_C@_07PBGO@?9lookup?$AA@			; `string'
PUBLIC	??_C@_09GHKO@?$CLlookdown?$AA@			; `string'
PUBLIC	??_C@_09OKBO@?9lookdown?$AA@			; `string'
PUBLIC	??_C@_07OJLO@?$CLstrafe?$AA@			; `string'
PUBLIC	??_C@_07OMD@?9strafe?$AA@			; `string'
PUBLIC	??_C@_09EGDL@?$CLmoveleft?$AA@			; `string'
PUBLIC	??_C@_09MLIL@?9moveleft?$AA@			; `string'
PUBLIC	??_C@_0L@DMHD@?$CLmoveright?$AA@		; `string'
PUBLIC	??_C@_0L@BMPO@?9moveright?$AA@			; `string'
PUBLIC	??_C@_06FAHP@?$CLspeed?$AA@			; `string'
PUBLIC	??_C@_06CNLP@?9speed?$AA@			; `string'
PUBLIC	??_C@_07KANK@?$CLattack?$AA@			; `string'
PUBLIC	??_C@_07EHKH@?9attack?$AA@			; `string'
PUBLIC	??_C@_08CPBO@?$CLattack2?$AA@			; `string'
PUBLIC	??_C@_08JPPJ@?9attack2?$AA@			; `string'
PUBLIC	??_C@_04MKDH@?$CLuse?$AA@			; `string'
PUBLIC	??_C@_04BFNL@?9use?$AA@				; `string'
PUBLIC	??_C@_05FPLG@?$CLjump?$AA@			; `string'
PUBLIC	??_C@_05JPGJ@?9jump?$AA@			; `string'
PUBLIC	??_C@_07ENEF@impulse?$AA@			; `string'
PUBLIC	??_C@_06BEDN@?$CLklook?$AA@			; `string'
PUBLIC	??_C@_06GJPN@?9klook?$AA@			; `string'
PUBLIC	??_C@_06NEOC@?$CLmlook?$AA@			; `string'
PUBLIC	??_C@_06KJCC@?9mlook?$AA@			; `string'
PUBLIC	??_C@_06LEBI@?$CLjlook?$AA@			; `string'
PUBLIC	??_C@_06MJNI@?9jlook?$AA@			; `string'
PUBLIC	??_C@_05GKBA@?$CLduck?$AA@			; `string'
PUBLIC	??_C@_05KKMP@?9duck?$AA@			; `string'
PUBLIC	??_C@_07MJDD@?$CLreload?$AA@			; `string'
PUBLIC	??_C@_07COEO@?9reload?$AA@			; `string'
PUBLIC	??_C@_05DPBJ@?$CLalt1?$AA@			; `string'
PUBLIC	??_C@_05PPMG@?9alt1?$AA@			; `string'
PUBLIC	??_C@_06IAM@?$CLgraph?$AA@			; `string'
PUBLIC	??_C@_06HFMM@?9graph?$AA@			; `string'
PUBLIC	??_C@_06PPFL@?$CLscore?$AA@			; `string'
PUBLIC	??_C@_06ICJL@?9score?$AA@			; `string'
PUBLIC	??_C@_06ODFM@?$CLbreak?$AA@			; `string'
PUBLIC	??_C@_06JOJM@?9break?$AA@			; `string'
PUBLIC	??_C@_01PLJA@0?$AA@				; `string'
PUBLIC	??_C@_0L@DEGL@lookstrafe?$AA@			; `string'
PUBLIC	??_C@_0L@MEDB@lookspring?$AA@			; `string'
PUBLIC	??_C@_04KHAF@0?467?$AA@				; `string'
PUBLIC	??_C@_0BB@MHNK@cl_anglespeedkey?$AA@		; `string'
PUBLIC	??_C@_03JFFD@210?$AA@				; `string'
PUBLIC	??_C@_0M@CKBA@cl_yawspeed?$AA@			; `string'
PUBLIC	??_C@_03KOGH@225?$AA@				; `string'
PUBLIC	??_C@_0O@IBII@cl_pitchspeed?$AA@		; `string'
PUBLIC	??_C@_03PMLK@320?$AA@				; `string'
PUBLIC	??_C@_0L@BDND@cl_upspeed?$AA@			; `string'
PUBLIC	??_C@_03GPIO@400?$AA@				; `string'
PUBLIC	??_C@_0BA@GNDE@cl_forwardspeed?$AA@		; `string'
PUBLIC	??_C@_0N@IFLM@cl_backspeed?$AA@			; `string'
PUBLIC	??_C@_0N@DLCL@cl_sidespeed?$AA@			; `string'
PUBLIC	??_C@_03HAGP@0?43?$AA@				; `string'
PUBLIC	??_C@_0BA@HCFJ@cl_movespeedkey?$AA@		; `string'
PUBLIC	??_C@_02PBA@89?$AA@				; `string'
PUBLIC	??_C@_0L@FMOC@cl_pitchup?$AA@			; `string'
PUBLIC	??_C@_0N@LIOC@cl_pitchdown?$AA@			; `string'
PUBLIC	??_C@_05GGO@0?4022?$AA@				; `string'
PUBLIC	??_C@_07FHKJ@m_pitch?$AA@			; `string'
PUBLIC	??_C@_05LLLA@m_yaw?$AA@				; `string'
PUBLIC	??_C@_01FBAH@1?$AA@				; `string'
PUBLIC	??_C@_09NFLM@m_forward?$AA@			; `string'
PUBLIC	??_C@_03NLGO@0?48?$AA@				; `string'
PUBLIC	??_C@_06MLIH@m_side?$AA@			; `string'
EXTRN	?IN_Init@@YAXXZ:NEAR				; IN_Init
EXTRN	?V_Init@@YAXXZ:NEAR				; V_Init
;	COMDAT ??_C@_07KFJC@?$CLmoveup?$AA@
; File z:\xashxtsrc\client\input.cpp
CONST	SEGMENT
??_C@_07KFJC@?$CLmoveup?$AA@ DB '+moveup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ECOP@?9moveup?$AA@
CONST	SEGMENT
??_C@_07ECOP@?9moveup?$AA@ DB '-moveup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IMNG@?$CLmovedown?$AA@
CONST	SEGMENT
??_C@_09IMNG@?$CLmovedown?$AA@ DB '+movedown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BGG@?9movedown?$AA@
CONST	SEGMENT
??_C@_09BGG@?9movedown?$AA@ DB '-movedown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IFMH@?$CLleft?$AA@
CONST	SEGMENT
??_C@_05IFMH@?$CLleft?$AA@ DB '+left', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EFBI@?9left?$AA@
CONST	SEGMENT
??_C@_05EFBI@?9left?$AA@ DB '-left', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FOLA@?$CLright?$AA@
CONST	SEGMENT
??_C@_06FOLA@?$CLright?$AA@ DB '+right', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDHA@?9right?$AA@
CONST	SEGMENT
??_C@_06CDHA@?9right?$AA@ DB '-right', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HLLP@?$CLforward?$AA@
CONST	SEGMENT
??_C@_08HLLP@?$CLforward?$AA@ DB '+forward', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLFI@?9forward?$AA@
CONST	SEGMENT
??_C@_08MLFI@?9forward?$AA@ DB '-forward', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NMMM@?$CLback?$AA@
CONST	SEGMENT
??_C@_05NMMM@?$CLback?$AA@ DB '+back', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BMBD@?9back?$AA@
CONST	SEGMENT
??_C@_05BMBD@?9back?$AA@ DB '-back', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BGBD@?$CLlookup?$AA@
CONST	SEGMENT
??_C@_07BGBD@?$CLlookup?$AA@ DB '+lookup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PBGO@?9lookup?$AA@
CONST	SEGMENT
??_C@_07PBGO@?9lookup?$AA@ DB '-lookup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GHKO@?$CLlookdown?$AA@
CONST	SEGMENT
??_C@_09GHKO@?$CLlookdown?$AA@ DB '+lookdown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKBO@?9lookdown?$AA@
CONST	SEGMENT
??_C@_09OKBO@?9lookdown?$AA@ DB '-lookdown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OJLO@?$CLstrafe?$AA@
CONST	SEGMENT
??_C@_07OJLO@?$CLstrafe?$AA@ DB '+strafe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OMD@?9strafe?$AA@
CONST	SEGMENT
??_C@_07OMD@?9strafe?$AA@ DB '-strafe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EGDL@?$CLmoveleft?$AA@
CONST	SEGMENT
??_C@_09EGDL@?$CLmoveleft?$AA@ DB '+moveleft', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MLIL@?9moveleft?$AA@
CONST	SEGMENT
??_C@_09MLIL@?9moveleft?$AA@ DB '-moveleft', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DMHD@?$CLmoveright?$AA@
CONST	SEGMENT
??_C@_0L@DMHD@?$CLmoveright?$AA@ DB '+moveright', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPO@?9moveright?$AA@
CONST	SEGMENT
??_C@_0L@BMPO@?9moveright?$AA@ DB '-moveright', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FAHP@?$CLspeed?$AA@
CONST	SEGMENT
??_C@_06FAHP@?$CLspeed?$AA@ DB '+speed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNLP@?9speed?$AA@
CONST	SEGMENT
??_C@_06CNLP@?9speed?$AA@ DB '-speed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KANK@?$CLattack?$AA@
CONST	SEGMENT
??_C@_07KANK@?$CLattack?$AA@ DB '+attack', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EHKH@?9attack?$AA@
CONST	SEGMENT
??_C@_07EHKH@?9attack?$AA@ DB '-attack', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPBO@?$CLattack2?$AA@
CONST	SEGMENT
??_C@_08CPBO@?$CLattack2?$AA@ DB '+attack2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPPJ@?9attack2?$AA@
CONST	SEGMENT
??_C@_08JPPJ@?9attack2?$AA@ DB '-attack2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKDH@?$CLuse?$AA@
CONST	SEGMENT
??_C@_04MKDH@?$CLuse?$AA@ DB '+use', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFNL@?9use?$AA@
CONST	SEGMENT
??_C@_04BFNL@?9use?$AA@ DB '-use', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FPLG@?$CLjump?$AA@
CONST	SEGMENT
??_C@_05FPLG@?$CLjump?$AA@ DB '+jump', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JPGJ@?9jump?$AA@
CONST	SEGMENT
??_C@_05JPGJ@?9jump?$AA@ DB '-jump', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ENEF@impulse?$AA@
CONST	SEGMENT
??_C@_07ENEF@impulse?$AA@ DB 'impulse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BEDN@?$CLklook?$AA@
CONST	SEGMENT
??_C@_06BEDN@?$CLklook?$AA@ DB '+klook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJPN@?9klook?$AA@
CONST	SEGMENT
??_C@_06GJPN@?9klook?$AA@ DB '-klook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NEOC@?$CLmlook?$AA@
CONST	SEGMENT
??_C@_06NEOC@?$CLmlook?$AA@ DB '+mlook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KJCC@?9mlook?$AA@
CONST	SEGMENT
??_C@_06KJCC@?9mlook?$AA@ DB '-mlook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEBI@?$CLjlook?$AA@
CONST	SEGMENT
??_C@_06LEBI@?$CLjlook?$AA@ DB '+jlook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJNI@?9jlook?$AA@
CONST	SEGMENT
??_C@_06MJNI@?9jlook?$AA@ DB '-jlook', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GKBA@?$CLduck?$AA@
CONST	SEGMENT
??_C@_05GKBA@?$CLduck?$AA@ DB '+duck', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKMP@?9duck?$AA@
CONST	SEGMENT
??_C@_05KKMP@?9duck?$AA@ DB '-duck', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MJDD@?$CLreload?$AA@
CONST	SEGMENT
??_C@_07MJDD@?$CLreload?$AA@ DB '+reload', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07COEO@?9reload?$AA@
CONST	SEGMENT
??_C@_07COEO@?9reload?$AA@ DB '-reload', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DPBJ@?$CLalt1?$AA@
CONST	SEGMENT
??_C@_05DPBJ@?$CLalt1?$AA@ DB '+alt1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPMG@?9alt1?$AA@
CONST	SEGMENT
??_C@_05PPMG@?9alt1?$AA@ DB '-alt1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IAM@?$CLgraph?$AA@
CONST	SEGMENT
??_C@_06IAM@?$CLgraph?$AA@ DB '+graph', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFMM@?9graph?$AA@
CONST	SEGMENT
??_C@_06HFMM@?9graph?$AA@ DB '-graph', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PPFL@?$CLscore?$AA@
CONST	SEGMENT
??_C@_06PPFL@?$CLscore?$AA@ DB '+score', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICJL@?9score?$AA@
CONST	SEGMENT
??_C@_06ICJL@?9score?$AA@ DB '-score', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODFM@?$CLbreak?$AA@
CONST	SEGMENT
??_C@_06ODFM@?$CLbreak?$AA@ DB '+break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOJM@?9break?$AA@
CONST	SEGMENT
??_C@_06JOJM@?9break?$AA@ DB '-break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01PLJA@0?$AA@
CONST	SEGMENT
??_C@_01PLJA@0?$AA@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DEGL@lookstrafe?$AA@
CONST	SEGMENT
??_C@_0L@DEGL@lookstrafe?$AA@ DB 'lookstrafe', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MEDB@lookspring?$AA@
CONST	SEGMENT
??_C@_0L@MEDB@lookspring?$AA@ DB 'lookspring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KHAF@0?467?$AA@
CONST	SEGMENT
??_C@_04KHAF@0?467?$AA@ DB '0.67', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MHNK@cl_anglespeedkey?$AA@
CONST	SEGMENT
??_C@_0BB@MHNK@cl_anglespeedkey?$AA@ DB 'cl_anglespeedkey', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JFFD@210?$AA@
CONST	SEGMENT
??_C@_03JFFD@210?$AA@ DB '210', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CKBA@cl_yawspeed?$AA@
CONST	SEGMENT
??_C@_0M@CKBA@cl_yawspeed?$AA@ DB 'cl_yawspeed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03KOGH@225?$AA@
CONST	SEGMENT
??_C@_03KOGH@225?$AA@ DB '225', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IBII@cl_pitchspeed?$AA@
CONST	SEGMENT
??_C@_0O@IBII@cl_pitchspeed?$AA@ DB 'cl_pitchspeed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PMLK@320?$AA@
CONST	SEGMENT
??_C@_03PMLK@320?$AA@ DB '320', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BDND@cl_upspeed?$AA@
CONST	SEGMENT
??_C@_0L@BDND@cl_upspeed?$AA@ DB 'cl_upspeed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03GPIO@400?$AA@
CONST	SEGMENT
??_C@_03GPIO@400?$AA@ DB '400', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GNDE@cl_forwardspeed?$AA@
CONST	SEGMENT
??_C@_0BA@GNDE@cl_forwardspeed?$AA@ DB 'cl_forwardspeed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IFLM@cl_backspeed?$AA@
CONST	SEGMENT
??_C@_0N@IFLM@cl_backspeed?$AA@ DB 'cl_backspeed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLCL@cl_sidespeed?$AA@
CONST	SEGMENT
??_C@_0N@DLCL@cl_sidespeed?$AA@ DB 'cl_sidespeed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HAGP@0?43?$AA@
CONST	SEGMENT
??_C@_03HAGP@0?43?$AA@ DB '0.3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HCFJ@cl_movespeedkey?$AA@
CONST	SEGMENT
??_C@_0BA@HCFJ@cl_movespeedkey?$AA@ DB 'cl_movespeedkey', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PBA@89?$AA@
CONST	SEGMENT
??_C@_02PBA@89?$AA@ DB '89', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FMOC@cl_pitchup?$AA@
CONST	SEGMENT
??_C@_0L@FMOC@cl_pitchup?$AA@ DB 'cl_pitchup', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LIOC@cl_pitchdown?$AA@
CONST	SEGMENT
??_C@_0N@LIOC@cl_pitchdown?$AA@ DB 'cl_pitchdown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGO@0?4022?$AA@
CONST	SEGMENT
??_C@_05GGO@0?4022?$AA@ DB '0.022', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FHKJ@m_pitch?$AA@
CONST	SEGMENT
??_C@_07FHKJ@m_pitch?$AA@ DB 'm_pitch', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LLLA@m_yaw?$AA@
CONST	SEGMENT
??_C@_05LLLA@m_yaw?$AA@ DB 'm_yaw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FBAH@1?$AA@
CONST	SEGMENT
??_C@_01FBAH@1?$AA@ DB '1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09NFLM@m_forward?$AA@
CONST	SEGMENT
??_C@_09NFLM@m_forward?$AA@ DB 'm_forward', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NLGO@0?48?$AA@
CONST	SEGMENT
??_C@_03NLGO@0?48?$AA@ DB '0.8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLIH@m_side?$AA@
CONST	SEGMENT
??_C@_06MLIH@m_side?$AA@ DB 'm_side', 00H		; `string'
CONST	ENDS
;	COMDAT ?InitInput@@YAXXZ
_TEXT	SEGMENT
?InitInput@@YAXXZ PROC NEAR				; InitInput, COMDAT

; 815  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 816  : 	ADD_COMMAND ("+moveup", IN_UpDown);

	push	OFFSET FLAT:?IN_UpDown@@YAXXZ		; IN_UpDown
	push	OFFSET FLAT:??_C@_07KFJC@?$CLmoveup?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 817  : 	ADD_COMMAND ("-moveup", IN_UpUp);

	push	OFFSET FLAT:?IN_UpUp@@YAXXZ		; IN_UpUp
	push	OFFSET FLAT:??_C@_07ECOP@?9moveup?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 818  : 	ADD_COMMAND ("+movedown", IN_DownDown);

	push	OFFSET FLAT:?IN_DownDown@@YAXXZ		; IN_DownDown
	push	OFFSET FLAT:??_C@_09IMNG@?$CLmovedown?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 819  : 	ADD_COMMAND ("-movedown", IN_DownUp);

	push	OFFSET FLAT:?IN_DownUp@@YAXXZ		; IN_DownUp
	push	OFFSET FLAT:??_C@_09BGG@?9movedown?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 820  : 	ADD_COMMAND ("+left", IN_LeftDown);

	push	OFFSET FLAT:?IN_LeftDown@@YAXXZ		; IN_LeftDown
	push	OFFSET FLAT:??_C@_05IFMH@?$CLleft?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 821  : 	ADD_COMMAND ("-left", IN_LeftUp);

	push	OFFSET FLAT:?IN_LeftUp@@YAXXZ		; IN_LeftUp
	push	OFFSET FLAT:??_C@_05EFBI@?9left?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 822  : 	ADD_COMMAND ("+right", IN_RightDown);

	push	OFFSET FLAT:?IN_RightDown@@YAXXZ	; IN_RightDown
	push	OFFSET FLAT:??_C@_06FOLA@?$CLright?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 823  : 	ADD_COMMAND ("-right", IN_RightUp);

	push	OFFSET FLAT:?IN_RightUp@@YAXXZ		; IN_RightUp
	push	OFFSET FLAT:??_C@_06CDHA@?9right?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 824  : 	ADD_COMMAND ("+forward", IN_ForwardDown);

	push	OFFSET FLAT:?IN_ForwardDown@@YAXXZ	; IN_ForwardDown
	push	OFFSET FLAT:??_C@_08HLLP@?$CLforward?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 825  : 	ADD_COMMAND ("-forward", IN_ForwardUp);

	push	OFFSET FLAT:?IN_ForwardUp@@YAXXZ	; IN_ForwardUp
	push	OFFSET FLAT:??_C@_08MLFI@?9forward?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 826  : 	ADD_COMMAND ("+back", IN_BackDown);

	push	OFFSET FLAT:?IN_BackDown@@YAXXZ		; IN_BackDown
	push	OFFSET FLAT:??_C@_05NMMM@?$CLback?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 827  : 	ADD_COMMAND ("-back", IN_BackUp);

	push	OFFSET FLAT:?IN_BackUp@@YAXXZ		; IN_BackUp
	push	OFFSET FLAT:??_C@_05BMBD@?9back?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 828  : 	ADD_COMMAND ("+lookup", IN_LookupDown);

	push	OFFSET FLAT:?IN_LookupDown@@YAXXZ	; IN_LookupDown
	push	OFFSET FLAT:??_C@_07BGBD@?$CLlookup?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 829  : 	ADD_COMMAND ("-lookup", IN_LookupUp);

	push	OFFSET FLAT:?IN_LookupUp@@YAXXZ		; IN_LookupUp
	push	OFFSET FLAT:??_C@_07PBGO@?9lookup?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 830  : 	ADD_COMMAND ("+lookdown", IN_LookdownDown);

	push	OFFSET FLAT:?IN_LookdownDown@@YAXXZ	; IN_LookdownDown
	push	OFFSET FLAT:??_C@_09GHKO@?$CLlookdown?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 831  : 	ADD_COMMAND ("-lookdown", IN_LookdownUp);

	push	OFFSET FLAT:?IN_LookdownUp@@YAXXZ	; IN_LookdownUp
	push	OFFSET FLAT:??_C@_09OKBO@?9lookdown?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 832  : 	ADD_COMMAND ("+strafe", IN_StrafeDown);

	push	OFFSET FLAT:?IN_StrafeDown@@YAXXZ	; IN_StrafeDown
	push	OFFSET FLAT:??_C@_07OJLO@?$CLstrafe?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 833  : 	ADD_COMMAND ("-strafe", IN_StrafeUp);

	push	OFFSET FLAT:?IN_StrafeUp@@YAXXZ		; IN_StrafeUp
	push	OFFSET FLAT:??_C@_07OMD@?9strafe?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 834  : 	ADD_COMMAND ("+moveleft", IN_MoveleftDown);

	push	OFFSET FLAT:?IN_MoveleftDown@@YAXXZ	; IN_MoveleftDown
	push	OFFSET FLAT:??_C@_09EGDL@?$CLmoveleft?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 835  : 	ADD_COMMAND ("-moveleft", IN_MoveleftUp);

	push	OFFSET FLAT:?IN_MoveleftUp@@YAXXZ	; IN_MoveleftUp
	push	OFFSET FLAT:??_C@_09MLIL@?9moveleft?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 836  : 	ADD_COMMAND ("+moveright", IN_MoverightDown);

	push	OFFSET FLAT:?IN_MoverightDown@@YAXXZ	; IN_MoverightDown
	push	OFFSET FLAT:??_C@_0L@DMHD@?$CLmoveright?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 837  : 	ADD_COMMAND ("-moveright", IN_MoverightUp);

	push	OFFSET FLAT:?IN_MoverightUp@@YAXXZ	; IN_MoverightUp
	push	OFFSET FLAT:??_C@_0L@BMPO@?9moveright?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 838  : 	ADD_COMMAND ("+speed", IN_SpeedDown);

	push	OFFSET FLAT:?IN_SpeedDown@@YAXXZ	; IN_SpeedDown
	push	OFFSET FLAT:??_C@_06FAHP@?$CLspeed?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 839  : 	ADD_COMMAND ("-speed", IN_SpeedUp);

	push	OFFSET FLAT:?IN_SpeedUp@@YAXXZ		; IN_SpeedUp
	push	OFFSET FLAT:??_C@_06CNLP@?9speed?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 840  : 	ADD_COMMAND ("+attack", IN_AttackDown);

	push	OFFSET FLAT:?IN_AttackDown@@YAXXZ	; IN_AttackDown
	push	OFFSET FLAT:??_C@_07KANK@?$CLattack?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 841  : 	ADD_COMMAND ("-attack", IN_AttackUp);

	push	OFFSET FLAT:?IN_AttackUp@@YAXXZ		; IN_AttackUp
	push	OFFSET FLAT:??_C@_07EHKH@?9attack?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 842  : 	ADD_COMMAND ("+attack2", IN_Attack2Down);

	push	OFFSET FLAT:?IN_Attack2Down@@YAXXZ	; IN_Attack2Down
	push	OFFSET FLAT:??_C@_08CPBO@?$CLattack2?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 843  : 	ADD_COMMAND ("-attack2", IN_Attack2Up);

	push	OFFSET FLAT:?IN_Attack2Up@@YAXXZ	; IN_Attack2Up
	push	OFFSET FLAT:??_C@_08JPPJ@?9attack2?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 844  : 	ADD_COMMAND ("+use", IN_UseDown);

	push	OFFSET FLAT:?IN_UseDown@@YAXXZ		; IN_UseDown
	push	OFFSET FLAT:??_C@_04MKDH@?$CLuse?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 845  : 	ADD_COMMAND ("-use", IN_UseUp);

	push	OFFSET FLAT:?IN_UseUp@@YAXXZ		; IN_UseUp
	push	OFFSET FLAT:??_C@_04BFNL@?9use?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 846  : 	ADD_COMMAND ("+jump", IN_JumpDown);

	push	OFFSET FLAT:?IN_JumpDown@@YAXXZ		; IN_JumpDown
	push	OFFSET FLAT:??_C@_05FPLG@?$CLjump?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 847  : 	ADD_COMMAND ("-jump", IN_JumpUp);

	push	OFFSET FLAT:?IN_JumpUp@@YAXXZ		; IN_JumpUp
	push	OFFSET FLAT:??_C@_05JPGJ@?9jump?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 848  : 	ADD_COMMAND ("impulse", IN_Impulse);

	push	OFFSET FLAT:?IN_Impulse@@YAXXZ		; IN_Impulse
	push	OFFSET FLAT:??_C@_07ENEF@impulse?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 849  : 	ADD_COMMAND ("+klook", IN_KLookDown);

	push	OFFSET FLAT:?IN_KLookDown@@YAXXZ	; IN_KLookDown
	push	OFFSET FLAT:??_C@_06BEDN@?$CLklook?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 850  : 	ADD_COMMAND ("-klook", IN_KLookUp);

	push	OFFSET FLAT:?IN_KLookUp@@YAXXZ		; IN_KLookUp
	push	OFFSET FLAT:??_C@_06GJPN@?9klook?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 851  : 	ADD_COMMAND ("+mlook", IN_MLookDown);

	push	OFFSET FLAT:?IN_MLookDown@@YAXXZ	; IN_MLookDown
	push	OFFSET FLAT:??_C@_06NEOC@?$CLmlook?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 852  : 	ADD_COMMAND ("-mlook", IN_MLookUp);

	push	OFFSET FLAT:?IN_MLookUp@@YAXXZ		; IN_MLookUp
	push	OFFSET FLAT:??_C@_06KJCC@?9mlook?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 853  : 	ADD_COMMAND ("+jlook", IN_JLookDown);

	push	OFFSET FLAT:?IN_JLookDown@@YAXXZ	; IN_JLookDown
	push	OFFSET FLAT:??_C@_06LEBI@?$CLjlook?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 854  : 	ADD_COMMAND ("-jlook", IN_JLookUp);

	push	OFFSET FLAT:?IN_JLookUp@@YAXXZ		; IN_JLookUp
	push	OFFSET FLAT:??_C@_06MJNI@?9jlook?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 855  : 	ADD_COMMAND ("+duck", IN_DuckDown);

	push	OFFSET FLAT:?IN_DuckDown@@YAXXZ		; IN_DuckDown
	push	OFFSET FLAT:??_C@_05GKBA@?$CLduck?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 856  : 	ADD_COMMAND ("-duck", IN_DuckUp);

	push	OFFSET FLAT:?IN_DuckUp@@YAXXZ		; IN_DuckUp
	push	OFFSET FLAT:??_C@_05KKMP@?9duck?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 857  : 	ADD_COMMAND ("+reload", IN_ReloadDown);

	push	OFFSET FLAT:?IN_ReloadDown@@YAXXZ	; IN_ReloadDown
	push	OFFSET FLAT:??_C@_07MJDD@?$CLreload?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 858  : 	ADD_COMMAND ("-reload", IN_ReloadUp);

	push	OFFSET FLAT:?IN_ReloadUp@@YAXXZ		; IN_ReloadUp
	push	OFFSET FLAT:??_C@_07COEO@?9reload?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 859  : 	ADD_COMMAND ("+alt1", IN_Alt1Down);

	push	OFFSET FLAT:?IN_Alt1Down@@YAXXZ		; IN_Alt1Down
	push	OFFSET FLAT:??_C@_05DPBJ@?$CLalt1?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 860  : 	ADD_COMMAND ("-alt1", IN_Alt1Up);

	push	OFFSET FLAT:?IN_Alt1Up@@YAXXZ		; IN_Alt1Up
	push	OFFSET FLAT:??_C@_05PPMG@?9alt1?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 861  : 	ADD_COMMAND ("+graph", IN_GraphDown);

	push	OFFSET FLAT:?IN_GraphDown@@YAXXZ	; IN_GraphDown
	push	OFFSET FLAT:??_C@_06IAM@?$CLgraph?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 862  : 	ADD_COMMAND ("-graph", IN_GraphUp);

	push	OFFSET FLAT:?IN_GraphUp@@YAXXZ		; IN_GraphUp
	push	OFFSET FLAT:??_C@_06HFMM@?9graph?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 863  : 	ADD_COMMAND ("+score", IN_ScoreDown);

	push	OFFSET FLAT:?IN_ScoreDown@@YAXXZ	; IN_ScoreDown
	push	OFFSET FLAT:??_C@_06PPFL@?$CLscore?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 864  : 	ADD_COMMAND ("-score", IN_ScoreUp);

	push	OFFSET FLAT:?IN_ScoreUp@@YAXXZ		; IN_ScoreUp
	push	OFFSET FLAT:??_C@_06ICJL@?9score?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 865  : 	ADD_COMMAND ("+break", IN_BreakDown);

	push	OFFSET FLAT:?IN_BreakDown@@YAXXZ	; IN_BreakDown
	push	OFFSET FLAT:??_C@_06ODFM@?$CLbreak?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 866  : 	ADD_COMMAND ("-break", IN_BreakUp);

	push	OFFSET FLAT:?IN_BreakUp@@YAXXZ		; IN_BreakUp
	push	OFFSET FLAT:??_C@_06JOJM@?9break?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+68
	add	esp, 8

; 867  : 
; 868  : 	lookstrafe	= CVAR_REGISTER ( "lookstrafe", "0", FCVAR_ARCHIVE );

	push	1
	push	OFFSET FLAT:??_C@_01PLJA@0?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@DEGL@lookstrafe?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?lookstrafe@@3PAUcvar_s@@A, eax ; lookstrafe

; 869  : 	lookspring	= CVAR_REGISTER ( "lookspring", "0", FCVAR_ARCHIVE );

	push	1
	push	OFFSET FLAT:??_C@_01PLJA@0?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@MEDB@lookspring?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?lookspring@@3PAUcvar_s@@A, eax ; lookspring

; 870  : 	cl_anglespeedkey	= CVAR_REGISTER ( "cl_anglespeedkey", "0.67", 0 );

	push	0
	push	OFFSET FLAT:??_C@_04KHAF@0?467?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BB@MHNK@cl_anglespeedkey?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?cl_anglespeedkey@@3PAUcvar_s@@A, eax ; cl_anglespeedkey

; 871  : 	cl_yawspeed	= CVAR_REGISTER ( "cl_yawspeed", "210", 0 );

	push	0
	push	OFFSET FLAT:??_C@_03JFFD@210?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0M@CKBA@cl_yawspeed?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?cl_yawspeed@@3PAUcvar_s@@A, eax ; cl_yawspeed

; 872  : 	cl_pitchspeed	= CVAR_REGISTER ( "cl_pitchspeed", "225", 0 );

	push	0
	push	OFFSET FLAT:??_C@_03KOGH@225?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0O@IBII@cl_pitchspeed?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?cl_pitchspeed@@3PAUcvar_s@@A, eax ; cl_pitchspeed

; 873  : 	cl_upspeed	= CVAR_REGISTER ( "cl_upspeed", "320", 0 );

	push	0
	push	OFFSET FLAT:??_C@_03PMLK@320?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@BDND@cl_upspeed?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?cl_upspeed@@3PAUcvar_s@@A, eax ; cl_upspeed

; 874  : 	cl_forwardspeed	= CVAR_REGISTER ( "cl_forwardspeed", "400", FCVAR_ARCHIVE );

	push	1
	push	OFFSET FLAT:??_C@_03GPIO@400?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@GNDE@cl_forwardspeed?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?cl_forwardspeed@@3PAUcvar_s@@A, eax ; cl_forwardspeed

; 875  : 	cl_backspeed	= CVAR_REGISTER ( "cl_backspeed", "400", FCVAR_ARCHIVE );

	push	1
	push	OFFSET FLAT:??_C@_03GPIO@400?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@IFLM@cl_backspeed?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?cl_backspeed@@3PAUcvar_s@@A, eax ; cl_backspeed

; 876  : 	cl_sidespeed	= CVAR_REGISTER ( "cl_sidespeed", "400", 0 );

	push	0
	push	OFFSET FLAT:??_C@_03GPIO@400?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@DLCL@cl_sidespeed?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?cl_sidespeed@@3PAUcvar_s@@A, eax ; cl_sidespeed

; 877  : 	cl_movespeedkey	= CVAR_REGISTER ( "cl_movespeedkey", "0.3", 0 );

	push	0
	push	OFFSET FLAT:??_C@_03HAGP@0?43?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@HCFJ@cl_movespeedkey?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?cl_movespeedkey@@3PAUcvar_s@@A, eax ; cl_movespeedkey

; 878  : 	cl_pitchup	= CVAR_REGISTER ( "cl_pitchup", "89", 0 );

	push	0
	push	OFFSET FLAT:??_C@_02PBA@89?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FMOC@cl_pitchup?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?cl_pitchup@@3PAUcvar_s@@A, eax ; cl_pitchup

; 879  : 	cl_pitchdown	= CVAR_REGISTER ( "cl_pitchdown", "89", 0 );

	push	0
	push	OFFSET FLAT:??_C@_02PBA@89?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@LIOC@cl_pitchdown?$AA@ ; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?cl_pitchdown@@3PAUcvar_s@@A, eax ; cl_pitchdown

; 880  : 
; 881  : 	m_pitch		= CVAR_REGISTER ( "m_pitch","0.022", FCVAR_ARCHIVE );

	push	1
	push	OFFSET FLAT:??_C@_05GGO@0?4022?$AA@	; `string'
	push	OFFSET FLAT:??_C@_07FHKJ@m_pitch?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_pitch@@3PAUcvar_s@@A, eax	; m_pitch

; 882  : 	m_yaw		= CVAR_REGISTER ( "m_yaw","0.022", FCVAR_ARCHIVE );

	push	1
	push	OFFSET FLAT:??_C@_05GGO@0?4022?$AA@	; `string'
	push	OFFSET FLAT:??_C@_05LLLA@m_yaw?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_yaw@@3PAUcvar_s@@A, eax	; m_yaw

; 883  : 	m_forward		= CVAR_REGISTER ( "m_forward","1", FCVAR_ARCHIVE );

	push	1
	push	OFFSET FLAT:??_C@_01FBAH@1?$AA@		; `string'
	push	OFFSET FLAT:??_C@_09NFLM@m_forward?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_forward@@3PAUcvar_s@@A, eax ; m_forward

; 884  : 	m_side		= CVAR_REGISTER ( "m_side","0.8", FCVAR_ARCHIVE );

	push	1
	push	OFFSET FLAT:??_C@_03NLGO@0?48?$AA@	; `string'
	push	OFFSET FLAT:??_C@_06MLIH@m_side?$AA@	; `string'
	call	DWORD PTR ?gEngfuncs@@3Ucl_enginefuncs_s@@A+56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?m_side@@3PAUcvar_s@@A, eax	; m_side

; 885  : 
; 886  : 	// initialize inputs
; 887  : 	IN_Init();

	call	?IN_Init@@YAXXZ				; IN_Init

; 888  : 
; 889  : 	// initialize keyboard
; 890  : 	KB_Init();

	call	?KB_Init@@YAXXZ				; KB_Init

; 891  : 
; 892  : 	// initialize view system
; 893  : 	V_Init();

	call	?V_Init@@YAXXZ				; V_Init

; 894  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitInput@@YAXXZ ENDP					; InitInput
_TEXT	ENDS
PUBLIC	?ShutdownInput@@YAXXZ				; ShutdownInput
EXTRN	?IN_Shutdown@@YAXXZ:NEAR			; IN_Shutdown
;	COMDAT ?ShutdownInput@@YAXXZ
_TEXT	SEGMENT
?ShutdownInput@@YAXXZ PROC NEAR				; ShutdownInput, COMDAT

; 902  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 903  : 	IN_Shutdown();

	call	?IN_Shutdown@@YAXXZ			; IN_Shutdown

; 904  : 	KB_Shutdown();

	call	?KB_Shutdown@@YAXXZ			; KB_Shutdown

; 905  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ShutdownInput@@YAXXZ ENDP				; ShutdownInput
_TEXT	ENDS
END
